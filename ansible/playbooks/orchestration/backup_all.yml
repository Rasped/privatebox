---
# Backup orchestration playbook
# Creates backups of all services

- name: Backup All Services
  hosts: all
  vars:
    backup_timestamp: "{{ ansible_date_time.epoch }}"
    backup_root: "{{ backup_location | default('/backup') }}"
  
  tasks:
    - name: Create backup directory structure
      ansible.builtin.file:
        path: "{{ backup_root }}/{{ item }}"
        state: directory
        mode: '0750'
      loop:
        - config
        - data
        - metadata
      delegate_to: localhost
      run_once: true

    - name: Generate backup metadata
      ansible.builtin.copy:
        content: |
          Backup Metadata
          ==============
          Timestamp: {{ ansible_date_time.iso8601 }}
          Environment: {{ environment_name }}
          Hosts: {{ ansible_play_hosts | join(', ') }}
          Ansible Version: {{ ansible_version.full }}
          
          Services:
          {% for group in group_names %}
          - {{ group }}
          {% endfor %}
        dest: "{{ backup_root }}/metadata/backup-{{ backup_timestamp }}.txt"
      delegate_to: localhost
      run_once: true

- name: Backup Configuration Files
  hosts: all
  tasks:
    - name: Create host configuration archive
      ansible.builtin.archive:
        path:
          - /etc/ssh/sshd_config
          - /etc/systemd/system/
          - /etc/docker/
        dest: "/tmp/{{ inventory_hostname }}-config-{{ hostvars['localhost']['backup_timestamp'] }}.tar.gz"
        format: gz
      register: config_backup

    - name: Fetch configuration backups
      ansible.builtin.fetch:
        src: "{{ config_backup.dest }}"
        dest: "{{ hostvars['localhost']['backup_root'] }}/config/"
        flat: true

- name: Backup Network Services
  hosts: network_services
  tasks:
    - name: Backup AdGuard Home
      block:
        - name: Create AdGuard backup
          community.docker.docker_container_exec:
            container: adguard
            command: tar czf /tmp/adguard-backup.tar.gz /opt/adguardhome/work /opt/adguardhome/conf
          register: adguard_backup

        - name: Copy AdGuard backup from container
          ansible.builtin.command: |
            docker cp adguard:/tmp/adguard-backup.tar.gz {{ backup_root }}/data/adguard-{{ backup_timestamp }}.tar.gz

    - name: Backup Unbound DNS
      block:
        - name: Create Unbound backup
          ansible.builtin.archive:
            path: "{{ unbound_data_dir }}"
            dest: "{{ backup_root }}/data/unbound-{{ backup_timestamp }}.tar.gz"
            format: gz

- name: Backup Management Services
  hosts: management_services
  tasks:
    - name: Backup Portainer
      ansible.builtin.archive:
        path: "{{ portainer_data_dir }}"
        dest: "{{ backup_root }}/data/portainer-{{ backup_timestamp }}.tar.gz"
        format: gz
        exclude_path:
          - "*.sock"
          - "*.log"

    - name: Backup Semaphore
      ansible.builtin.include_role:
        name: semaphore
        tasks_from: backup

- name: Backup Summary
  hosts: localhost
  tasks:
    - name: List all backups
      ansible.builtin.find:
        paths: "{{ backup_root }}"
        patterns: "*-{{ backup_timestamp }}*"
        recurse: true
      register: backup_files

    - name: Calculate backup size
      ansible.builtin.stat:
        path: "{{ item.path }}"
      loop: "{{ backup_files.files }}"
      register: backup_stats

    - name: Display backup summary
      ansible.builtin.debug:
        msg: |
          Backup Complete
          ==============
          Timestamp: {{ backup_timestamp }}
          Location: {{ backup_root }}
          Total Files: {{ backup_files.files | length }}
          Total Size: {{ backup_stats.results | map(attribute='stat.size') | sum | human_readable }}
          
          Backup Files:
          {% for file in backup_files.files %}
          - {{ file.path | basename }}
          {% endfor %}

    - name: Clean old backups
      ansible.builtin.find:
        paths: "{{ backup_root }}"
        patterns: "*"
        age: "{{ backup_retention_days }}d"
        recurse: true
      register: old_backups

    - name: Remove old backups
      ansible.builtin.file:
        path: "{{ item.path }}"
        state: absent
      loop: "{{ old_backups.files }}"
      when: old_backups.files | length > 0