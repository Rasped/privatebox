---
# Configure OPNSense Initial Setup Playbook
# Performs initial configuration of OPNSense firewall after deployment

- name: Configure OPNSense Initial Setup
  hosts: opnsense_hosts
  gather_facts: true
  become: true
  tags:
    - opnsense
    - initial-config
    - deployment
  
  vars:
    opnsense_api_key: "{{ vault_opnsense_api_key }}"
    opnsense_api_secret: "{{ vault_opnsense_api_secret }}"
    opnsense_api_url: "https://{{ ansible_default_ipv4.address }}/api"

  pre_tasks:
    - name: Verify OPNSense is accessible
      ansible.builtin.uri:
        url: "{{ opnsense_api_url }}/core/system/status"
        method: GET
        user: "{{ opnsense_api_key }}"
        password: "{{ opnsense_api_secret }}"
        force_basic_auth: true
        validate_certs: false
        status_code: 200
      register: opnsense_status
      tags:
        - connectivity-check

    - name: Backup current configuration
      ansible.builtin.uri:
        url: "{{ opnsense_api_url }}/core/backup/download"
        method: GET
        user: "{{ opnsense_api_key }}"
        password: "{{ opnsense_api_secret }}"
        force_basic_auth: true
        validate_certs: false
        dest: "/tmp/opnsense_backup_{{ ansible_date_time.epoch }}.xml"
      tags:
        - backup
        - pre-config

  tasks:
    - name: Configure system settings
      ansible.builtin.uri:
        url: "{{ opnsense_api_url }}/core/system/settings/set"
        method: POST
        user: "{{ opnsense_api_key }}"
        password: "{{ opnsense_api_secret }}"
        force_basic_auth: true
        validate_certs: false
        body_format: json
        body:
          system:
            hostname: "{{ opnsense_hostname | default('privatebox-fw') }}"
            domain: "{{ opnsense_domain | default('privatebox.local') }}"
            timezone: "{{ opnsense_timezone | default('UTC') }}"
            dns_servers: "{{ opnsense_dns_servers | default(['1.1.1.1', '8.8.8.8']) }}"
      tags:
        - system-config

    - name: Configure network interfaces
      ansible.builtin.include_tasks: tasks/configure_opnsense_interfaces.yml
      vars:
        interfaces: "{{ opnsense_interfaces }}"
      tags:
        - network-interfaces
        - vlans

    - name: Configure firewall rules
      ansible.builtin.include_tasks: tasks/configure_opnsense_rules.yml
      vars:
        firewall_rules: "{{ opnsense_firewall_rules }}"
      tags:
        - firewall-rules
        - security

    - name: Configure NAT rules
      ansible.builtin.include_tasks: tasks/configure_opnsense_nat.yml
      vars:
        nat_rules: "{{ opnsense_nat_rules }}"
      tags:
        - nat
        - network

    - name: Configure DHCP server
      ansible.builtin.uri:
        url: "{{ opnsense_api_url }}/dhcpv4/settings/set"
        method: POST
        user: "{{ opnsense_api_key }}"
        password: "{{ opnsense_api_secret }}"
        force_basic_auth: true
        validate_certs: false
        body_format: json
        body: "{{ opnsense_dhcp_config }}"
      when: opnsense_dhcp_enabled | default(true)
      tags:
        - dhcp
        - network-services

    - name: Configure VPN settings
      ansible.builtin.include_tasks: tasks/configure_opnsense_vpn.yml
      when: opnsense_vpn_enabled | default(false)
      tags:
        - vpn
        - security

    - name: Enable and configure plugins
      ansible.builtin.include_tasks: tasks/configure_opnsense_plugins.yml
      vars:
        plugins: "{{ opnsense_plugins | default([]) }}"
      when: opnsense_plugins is defined
      tags:
        - plugins
        - features

  post_tasks:
    - name: Apply configuration changes
      ansible.builtin.uri:
        url: "{{ opnsense_api_url }}/core/service/reconfigure"
        method: POST
        user: "{{ opnsense_api_key }}"
        password: "{{ opnsense_api_secret }}"
        force_basic_auth: true
        validate_certs: false
      tags:
        - apply-config

    - name: Validate firewall functionality
      ansible.builtin.include_tasks: tasks/validate_opnsense_config.yml
      tags:
        - validation
        - post-config

    - name: Generate OPNSense configuration report
      ansible.builtin.template:
        src: templates/opnsense_config_report.j2
        dest: /etc/privatebox/opnsense_config_report.txt
      delegate_to: localhost
      tags:
        - reporting
        - documentation

    - name: Create configuration marker
      ansible.builtin.file:
        path: /etc/privatebox/.opnsense_configured
        state: touch
      tags:
        - marker

  handlers:
    - name: restart opnsense services
      ansible.builtin.uri:
        url: "{{ opnsense_api_url }}/core/service/restart/{{ item }}"
        method: POST
        user: "{{ opnsense_api_key }}"
        password: "{{ opnsense_api_secret }}"
        force_basic_auth: true
        validate_certs: false
      loop:
        - dhcpd
        - unbound
        - firewall
      when: item in opnsense_services_to_restart | default([])