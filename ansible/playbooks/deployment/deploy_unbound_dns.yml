---
# Deploy Unbound DNS Resolver
# This playbook deploys Unbound as a recursive DNS resolver with DNSSEC support
# configured to work as the upstream resolver for AdGuard Home

- name: Deploy Unbound Recursive DNS Resolver
  hosts: dns_servers
  become: yes
  gather_facts: yes
  
  vars:
    # Configure Unbound to listen on port 5353 to avoid conflict with AdGuard
    unbound_port: 5353
    
    # Listen on localhost for AdGuard integration
    unbound_interfaces:
      - "127.0.0.1"
      - "::1"
    
    # Allow queries from local networks
    unbound_access_control:
      - "127.0.0.0/8 allow"
      - "::1 allow"
      - "10.0.0.0/8 allow"
      - "172.16.0.0/12 allow" 
      - "192.168.0.0/16 allow"
      - "fd00::/8 allow"
      - "fe80::/10 allow"
    
    # Performance tuning for small network
    unbound_num_threads: 2
    unbound_msg_cache_size: "32m"
    unbound_rrset_cache_size: "64m"
    
  pre_tasks:
    - name: Check system resources
      ansible.builtin.setup:
        gather_subset:
          - hardware
      tags:
        - prerequisites
    
    - name: Display system information
      ansible.builtin.debug:
        msg:
          - "CPU cores: {{ ansible_processor_vcpus }}"
          - "Memory: {{ ansible_memtotal_mb }} MB"
      tags:
        - prerequisites
    
    - name: Adjust thread count based on CPU cores
      ansible.builtin.set_fact:
        unbound_num_threads: "{{ [ansible_processor_vcpus, 4] | min }}"
      when: ansible_processor_vcpus is defined
      tags:
        - prerequisites
    
    - name: Check if port 5353 is available
      ansible.builtin.wait_for:
        port: 5353
        state: stopped
        timeout: 1
      register: port_check
      failed_when: false
      changed_when: false
      tags:
        - prerequisites
    
    - name: Warn if port is in use
      ansible.builtin.fail:
        msg: "Port 5353 is already in use. Please check for conflicting services."
      when: port_check.failed is not defined or not port_check.failed
      tags:
        - prerequisites
  
  roles:
    - role: unbound_dns
      tags:
        - unbound
  
  post_tasks:
    - name: Display Unbound configuration summary
      ansible.builtin.debug:
        msg:
          - "Unbound DNS resolver has been deployed successfully!"
          - "Listening on: {{ unbound_interfaces | join(', ') }} port {{ unbound_port }}"
          - "DNSSEC validation: Enabled"
          - "Cache size: {{ unbound_msg_cache_size }} (message) / {{ unbound_rrset_cache_size }} (RRset)"
          - "Threads: {{ unbound_num_threads }}"
          - ""
          - "To use with AdGuard Home, configure upstream DNS as:"
          - "  - 127.0.0.1:{{ unbound_port }}"
          - "  - [::1]:{{ unbound_port }}"
      tags:
        - info
    
    - name: Test DNSSEC validation
      ansible.builtin.shell: |
        # Test valid DNSSEC domain
        dig @127.0.0.1 -p {{ unbound_port }} dnssec-failed.org +dnssec +short
        # Test invalid DNSSEC domain (should fail)
        dig @127.0.0.1 -p {{ unbound_port }} fail01.dnssec.works +dnssec +short
      register: dnssec_test
      changed_when: false
      failed_when: false
      tags:
        - test
    
    - name: Display DNSSEC test results
      ansible.builtin.debug:
        msg: 
          - "DNSSEC validation is {{ 'working correctly' if dnssec_test.rc != 0 else 'not working' }}"
          - "Note: The second query should fail if DNSSEC is working properly"
      tags:
        - test
    
    - name: Performance test
      ansible.builtin.shell: |
        # Warm up cache
        for i in {1..10}; do
          dig @127.0.0.1 -p {{ unbound_port }} example.com +short > /dev/null
        done
        # Measure response time
        time dig @127.0.0.1 -p {{ unbound_port }} example.com +stats | grep "Query time"
      register: perf_test
      changed_when: false
      tags:
        - test
    
    - name: Display performance test results
      ansible.builtin.debug:
        var: perf_test.stdout_lines
      tags:
        - test