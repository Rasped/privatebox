---
# SSL/TLS Configuration Playbook
# Configures SSL certificates for all management services

- name: Configure SSL/TLS for Management Services
  hosts: all
  become: yes
  tags:
    - ssl
    - security
  
  vars:
    # Certificate configuration
    ssl_cert_dir: /etc/ssl/privatebox
    ssl_key_size: 4096
    ssl_cert_days: 365
    
    # Certificate details
    ssl_country: "US"
    ssl_state: "State"
    ssl_locality: "City"
    ssl_organization: "PrivateBox"
    ssl_common_name: "{{ inventory_hostname }}"
    
  tasks:
    - name: Install SSL prerequisites
      package:
        name:
          - openssl
          - python3-cryptography
        state: present

    - name: Create SSL directory
      file:
        path: "{{ ssl_cert_dir }}"
        state: directory
        mode: '0755'
        owner: root
        group: root

    - name: Generate private key
      community.crypto.openssl_privatekey:
        path: "{{ ssl_cert_dir }}/{{ inventory_hostname }}.key"
        size: "{{ ssl_key_size }}"
        mode: '0600'
        owner: root
        group: root

    - name: Generate CSR
      community.crypto.openssl_csr:
        path: "{{ ssl_cert_dir }}/{{ inventory_hostname }}.csr"
        privatekey_path: "{{ ssl_cert_dir }}/{{ inventory_hostname }}.key"
        country_name: "{{ ssl_country }}"
        state_or_province_name: "{{ ssl_state }}"
        locality_name: "{{ ssl_locality }}"
        organization_name: "{{ ssl_organization }}"
        common_name: "{{ ssl_common_name }}"
        subject_alt_name:
          - "DNS:{{ inventory_hostname }}"
          - "DNS:{{ inventory_hostname }}.local"
          - "IP:{{ ansible_default_ipv4.address | default(ansible_all_ipv4_addresses[0]) }}"

    - name: Generate self-signed certificate
      community.crypto.x509_certificate:
        path: "{{ ssl_cert_dir }}/{{ inventory_hostname }}.crt"
        privatekey_path: "{{ ssl_cert_dir }}/{{ inventory_hostname }}.key"
        csr_path: "{{ ssl_cert_dir }}/{{ inventory_hostname }}.csr"
        provider: selfsigned
        selfsigned_not_after: "+{{ ssl_cert_days }}d"
        mode: '0644'
        owner: root
        group: root

    - name: Create certificate bundle
      shell: |
        cat {{ ssl_cert_dir }}/{{ inventory_hostname }}.crt \
            {{ ssl_cert_dir }}/{{ inventory_hostname }}.key \
            > {{ ssl_cert_dir }}/{{ inventory_hostname }}.pem
      changed_when: true

    - name: Set bundle permissions
      file:
        path: "{{ ssl_cert_dir }}/{{ inventory_hostname }}.pem"
        mode: '0600'
        owner: root
        group: root

- name: Configure SSL for Portainer
  hosts: portainer_hosts
  become: yes
  tags:
    - ssl
    - portainer
  
  tasks:
    - name: Copy certificates to Portainer
      copy:
        src: "{{ ssl_cert_dir }}/{{ inventory_hostname }}.{{ item }}"
        dest: "{{ portainer_data_dir }}/certs/{{ item }}"
        remote_src: yes
        owner: root
        group: root
        mode: '0644'
      loop:
        - crt
        - key
      notify: restart portainer

    - name: Update Portainer to use SSL
      lineinfile:
        path: "{{ portainer_data_dir }}/docker-compose.yml"
        regexp: "{{ item.regexp }}"
        line: "{{ item.line }}"
      loop:
        - { regexp: '- "9000:9000"', line: '      - "9443:9443"  # HTTPS' }
        - { regexp: 'command:', line: '    command: --ssl --sslcert /certs/crt --sslkey /certs/key' }
      notify: restart portainer

- name: Configure SSL for Semaphore
  hosts: semaphore_hosts
  become: yes
  tags:
    - ssl
    - semaphore
  
  tasks:
    - name: Update Semaphore configuration for SSL
      blockinfile:
        path: "{{ semaphore_config_file }}"
        block: |
          "web_host": "https://0.0.0.0:3001",
          "ssl_enabled": true,
          "ssl_cert": "{{ ssl_cert_dir }}/{{ inventory_hostname }}.crt",
          "ssl_key": "{{ ssl_cert_dir }}/{{ inventory_hostname }}.key",
        marker: "# {mark} SSL CONFIGURATION"
      notify: restart semaphore

  handlers:
    - name: restart portainer
      systemd:
        name: portainer
        state: restarted
      listen: restart portainer

    - name: restart semaphore
      systemd:
        name: semaphore
        state: restarted
      listen: restart semaphore