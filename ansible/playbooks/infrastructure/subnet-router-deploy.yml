---
- name: "Subnet Router: Create Alpine VM"
  hosts: proxmox
  gather_facts: true

  vars:
    # VM configuration
    vmid: 101
    vm_name: "privatebox-subnet-router"
    vm_memory: 256
    vm_cores: 1
    vm_disk_size: "2G"
    vm_storage: "local-lvm"

    # Network configuration - Dual IPs
    lan_ip: "10.10.10.10"
    lan_netmask: "24"
    lan_gateway: "10.10.10.1"
    services_ip: "10.10.20.11"
    services_netmask: "24"

    # Alpine Linux cloud image
    alpine_version: "3.19"
    alpine_image_url: "https://dl-cdn.alpinelinux.org/alpine/v{{ alpine_version }}/releases/cloud/nocloud_alpine-{{ alpine_version }}.0-x86_64-bios-cloudinit-r0.qcow2"
    alpine_image_name: "nocloud_alpine-{{ alpine_version }}.0-x86_64-bios-cloudinit-r0.qcow2"
    image_cache_dir: "/var/lib/vz/template/cache"

    # Template configuration for Semaphore
    template_config:
      semaphore_environment: "ServicePasswords"
      semaphore_inventory: "proxmox"

  tasks:
    - name: Display deployment header
      debug:
        msg:
          - "=========================================="
          - "   SUBNET ROUTER VM CREATION"
          - "=========================================="
          - "VMID: {{ vmid }}"
          - "LAN IP: {{ lan_ip }}"
          - "Services IP: {{ services_ip }}"

    # Pre-flight checks
    - name: Check if VM already exists
      command: qm status {{ vmid }}
      register: vm_exists
      failed_when: false
      changed_when: false

    - name: Fail if VM already exists
      fail:
        msg: "VM {{ vmid }} already exists. Delete it first or choose a different VMID."
      when: vm_exists.rc == 0

    - name: Create image cache directory
      file:
        path: "{{ image_cache_dir }}"
        state: directory
        mode: '0755'

    # Download Alpine cloud image
    - name: Check if Alpine image exists
      stat:
        path: "{{ image_cache_dir }}/{{ alpine_image_name }}"
      register: alpine_image_stat

    - name: Download Alpine cloud image
      get_url:
        url: "{{ alpine_image_url }}"
        dest: "{{ image_cache_dir }}/{{ alpine_image_name }}"
        mode: '0644'
      when: not alpine_image_stat.stat.exists

    # Create cloud-init configuration
    - name: Enable snippets on local storage
      command: pvesm set local --content vztmpl,iso,backup,snippets
      failed_when: false
      changed_when: false

    - name: Create snippets directory
      file:
        path: /var/lib/vz/snippets
        state: directory
        mode: '0755'

    - name: Get Proxmox SSH public key
      slurp:
        src: /root/.ssh/id_rsa.pub
      register: proxmox_ssh_key
      failed_when: false

    - name: Hash password for cloud-init
      command: openssl passwd -6 "{{ SERVICES_PASSWORD }}"
      register: hashed_password
      changed_when: false

    - name: Generate cloud-init user-data
      copy:
        dest: "/var/lib/vz/snippets/subnet-router-{{ vmid }}.yml"
        mode: '0644'
        content: |
          #cloud-config
          hostname: {{ vm_name }}
          manage_etc_hosts: true

          users:
            - name: alpine
              sudo: ALL=(ALL) NOPASSWD:ALL
              shell: /bin/sh
              lock_passwd: false
              passwd: {{ hashed_password.stdout }}
              ssh_authorized_keys:
                - {{ (proxmox_ssh_key.content | b64decode).strip() }}

          ssh_pwauth: true

          package_update: true
          package_upgrade: true

          packages:
            - curl
            - ca-certificates

          write_files:
            - path: /etc/network/interfaces
              permissions: '0644'
              content: |
                auto lo
                iface lo inet loopback

                auto eth0
                iface eth0 inet static
                    address {{ lan_ip }}/{{ lan_netmask }}
                    gateway {{ lan_gateway }}
                    dns-nameservers {{ lan_gateway }}

                auto eth1
                iface eth1 inet static
                    address {{ services_ip }}/{{ services_netmask }}

          runcmd:
            - echo "Subnet router VM ready"

          final_message: "Alpine subnet router VM deployed after $UPTIME seconds"

    # Create VM
    - name: Create VM {{ vmid }}
      command: >
        qm create {{ vmid }}
        --name {{ vm_name }}
        --memory {{ vm_memory }}
        --cores {{ vm_cores }}
        --cpu host
        --net0 virtio,bridge=vmbr1,tag=10
        --net1 virtio,bridge=vmbr1,tag=20
        --serial0 socket
        --vga serial0
        --agent enabled=1
      register: vm_created

    - name: Import disk image
      command: qm importdisk {{ vmid }} {{ image_cache_dir }}/{{ alpine_image_name }} {{ vm_storage }}
      when: vm_created is succeeded

    - name: Attach and configure disk
      command: >
        qm set {{ vmid }}
        --scsihw virtio-scsi-pci
        --scsi0 {{ vm_storage }}:vm-{{ vmid }}-disk-0
        --boot c
        --bootdisk scsi0
      when: vm_created is succeeded

    - name: Resize disk
      command: qm resize {{ vmid }} scsi0 {{ vm_disk_size }}
      when: vm_created is succeeded

    - name: Add cloud-init drive
      command: qm set {{ vmid }} --ide2 {{ vm_storage }}:cloudinit
      when: vm_created is succeeded

    - name: Enable auto-start
      command: qm set {{ vmid }} --onboot 1
      when: vm_created is succeeded

    - name: Configure cloud-init network
      command: >
        qm set {{ vmid }}
        --ipconfig0 ip={{ lan_ip }}/{{ lan_netmask }},gw={{ lan_gateway }}
        --ipconfig1 ip={{ services_ip }}/{{ services_netmask }}
        --nameserver {{ lan_gateway }}
        --cicustom "user=local:snippets/subnet-router-{{ vmid }}.yml"
      when: vm_created is succeeded

    - name: Start VM
      command: qm start {{ vmid }}
      when: vm_created is succeeded

    - name: Wait for VM to be running
      command: qm status {{ vmid }}
      register: vm_status
      until: vm_status.stdout.find('running') != -1
      retries: 30
      delay: 2

    - name: Wait for SSH to be available on Services IP
      wait_for:
        host: "{{ services_ip }}"
        port: 22
        delay: 10
        timeout: 180

    - name: Test SSH connection
      command: ssh -o StrictHostKeyChecking=no alpine@{{ services_ip }} "hostname"
      register: ssh_test
      changed_when: false

    - name: Display deployment summary
      debug:
        msg:
          - ""
          - "=========================================="
          - "   VM CREATION COMPLETE"
          - "=========================================="
          - ""
          - "VM ID: {{ vmid }}"
          - "VM Name: {{ vm_name }}"
          - "LAN IP: {{ lan_ip }}"
          - "Services IP (management): {{ services_ip }}"
          - "SSH Test: {{ ssh_test.stdout }}"
          - ""
          - "Next Steps:"
          - "  1. Add to Semaphore inventory as 'subnet-router' ({{ services_ip }})"
          - "  2. Run subnet router configuration playbook"
          - ""
