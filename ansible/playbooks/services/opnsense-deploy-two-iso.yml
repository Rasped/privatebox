---
# OPNsense Two-ISO Deployment (100% Hands-Off)
#
# This playbook implements the Two-ISO approach with FULL AUTOMATION:
# 1. Main OPNsense DVD ISO for installation
# 2. Config ISO containing /conf/config.xml for automatic import
# 3. Automated installation using qm sendkey commands
#
# The installer is fully automated:
# - Logs in as installer/opnsense
# - Navigates through installation wizard
# - Selects guided installation with entire disk
# - Reboots into configured system
#
# OPNsense automatically imports config.xml from the config ISO
# during first boot, applying all your custom settings.
#
# Usage:
#   ansible-playbook -i inventory.yml opnsense-deploy-two-iso.yml \
#     -e "opnsense_ssh_key='ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQC...'"
#
# Optional overrides:
#   -e "opnsense_vm_id=8001"
#   -e "opnsense_lan_ip=192.168.1.100"
#   -e "opnsense_root_password=YourPassword"

- name: "OPNsense: Deploy via Two-ISO Method (100% Hands-Off)"
  hosts: proxmox
  become: false  # Already root on Proxmox
  gather_facts: true
  
  vars:
    # Service metadata
    service_name: "OPNsense Firewall"
    service_description: "Secure firewall with Two-ISO deployment"
    
    # VM Configuration
    opnsense_vm_id: 8000
    opnsense_vm_name: "opnsense"
    opnsense_memory: 2048
    opnsense_cores: 2
    opnsense_cpu: "host"
    opnsense_disk_size: "16"  # Size in GB without 'G' suffix
    opnsense_storage: "local-lvm"
    opnsense_onboot: true
    
    # Network Configuration
    opnsense_net0_bridge: "vmbr0"  # LAN
    opnsense_net1_bridge: "vmbr1"  # WAN
    opnsense_lan_ip: "192.168.1.69"
    opnsense_lan_netmask: "24"
    opnsense_lan_gateway: "192.168.1.3"
    
    # Authentication
    # Pass SSH key via -e "opnsense_ssh_key='ssh-rsa AAAA...'"
    opnsense_root_password: "PrivateBox2024!"
    opnsense_ssh_key: "{{ opnsense_ssh_key | mandatory }}"  # Required - pass as extra var
    
    # ISO Configuration
    opnsense_version: "25.1"
    # Using official DVD ISO (not IMG)
    opnsense_iso_url: "https://pkg.opnsense.org/releases/25.1/OPNsense-25.1-dvd-amd64.iso.bz2"
    iso_storage_path: "/var/lib/vz/template/iso"
    work_dir: "/tmp/opnsense-two-iso"
    
  tasks:
    # Prerequisites check
    - name: "{{ service_name }} - Check prerequisites"
      tags: [opnsense, prereq]
      block:
        - name: Ensure required tools are installed
          package:
            name:
              - genisoimage  # For creating config ISO
              - bzip2
              - libxml2-utils  # for xmllint
              - apache2-utils  # for htpasswd
            state: present
            
        - name: Check if VM already exists
          command: qm status {{ opnsense_vm_id }}
          register: vm_exists
          failed_when: false
          changed_when: false
          
        - name: Fail if VM already exists
          fail:
            msg: "VM {{ opnsense_vm_id }} already exists. Remove it first or use different ID."
          when: vm_exists.rc == 0
          
        - name: Check if vmbr1 exists
          command: ip link show {{ opnsense_net1_bridge }}
          register: vmbr1_exists
          failed_when: false
          changed_when: false
          
        - name: Warn if vmbr1 missing
          debug:
            msg: "WARNING: {{ opnsense_net1_bridge }} not found. Will configure single NIC only."
          when: vmbr1_exists.rc != 0
    
    # Download Main ISO
    - name: "{{ service_name }} - Download OPNsense DVD ISO"
      tags: [opnsense, iso]
      block:
        - name: Create working directory
          file:
            path: "{{ work_dir }}"
            state: directory
            mode: '0755'
            
        - name: Check if DVD ISO already exists
          stat:
            path: "{{ iso_storage_path }}/OPNsense-{{ opnsense_version }}-dvd-amd64.iso"
          register: dvd_iso_exists
          
        - name: Download and extract DVD ISO
          when: not dvd_iso_exists.stat.exists
          block:
            - name: Download compressed DVD ISO
              get_url:
                url: "{{ opnsense_iso_url }}"
                dest: "{{ iso_storage_path }}/OPNsense-{{ opnsense_version }}-dvd-amd64.iso.bz2"
                mode: '0644'
              register: download_result
              
            - name: Extract DVD ISO
              command: |
                bzip2 -d -k "{{ iso_storage_path }}/OPNsense-{{ opnsense_version }}-dvd-amd64.iso.bz2"
              args:
                creates: "{{ iso_storage_path }}/OPNsense-{{ opnsense_version }}-dvd-amd64.iso"
                
            - name: Remove compressed file
              file:
                path: "{{ iso_storage_path }}/OPNsense-{{ opnsense_version }}-dvd-amd64.iso.bz2"
                state: absent
    
    # Create Config ISO
    - name: "{{ service_name }} - Create Configuration ISO"
      tags: [opnsense, config]
      block:
        - name: Generate bcrypt password hash
          shell: |
            echo -n "{{ opnsense_root_password }}" | htpasswd -bnBC 10 "" | tr -d ':\n' | sed 's/$2y/$2b/'
          register: password_hash_result
          
        - name: Set password hash fact
          set_fact:
            password_hash: "{{ password_hash_result.stdout }}"
            
        - name: Create config directory structure
          file:
            path: "{{ work_dir }}/config-iso/conf"
            state: directory
            mode: '0755'
            
        - name: Create config.xml from template
          template:
            src: ../../templates/opnsense-config.xml.j2
            dest: "{{ work_dir }}/config-iso/conf/config.xml"
            mode: '0644'
          vars:
            root_password_hash: "{{ password_hash }}"
            ssh_key: "{{ opnsense_ssh_key }}"
            lan_ip: "{{ opnsense_lan_ip }}"
            lan_netmask: "{{ opnsense_lan_netmask }}"
            gateway_ip: "{{ opnsense_lan_gateway }}"
            timestamp_epoch: "{{ lookup('pipe', 'date +%s') }}"
            
        - name: Validate XML syntax
          command: xmllint --noout "{{ work_dir }}/config-iso/conf/config.xml"
          changed_when: false
          
        - name: Create config ISO
          command: |
            genisoimage -r -J -o "{{ iso_storage_path }}/opnsense-config.iso" \
              -V "OPN_CONFIG" \
              "{{ work_dir }}/config-iso/"
          args:
            creates: "{{ iso_storage_path }}/opnsense-config.iso"
            
        - name: Clean up working directory
          file:
            path: "{{ work_dir }}"
            state: absent
    
    # VM Creation and deployment
    - name: "{{ service_name }} - Create and deploy VM"
      tags: [opnsense, deploy]
      block:
        - name: Create VM
          command: |
            qm create {{ opnsense_vm_id }} \
              --name {{ opnsense_vm_name }} \
              --memory {{ opnsense_memory }} \
              --cores {{ opnsense_cores }} \
              --cpu {{ opnsense_cpu }} \
              --ostype l26 \
              --onboot {{ opnsense_onboot | int }}
              
        - name: Configure network interfaces (dual NIC)
          command: |
            qm set {{ opnsense_vm_id }} \
              --net0 virtio,bridge={{ opnsense_net0_bridge }} \
              --net1 virtio,bridge={{ opnsense_net1_bridge }}
          when: vmbr1_exists.rc == 0
          
        - name: Configure network interfaces (single NIC)
          command: |
            qm set {{ opnsense_vm_id }} \
              --net0 virtio,bridge={{ opnsense_net0_bridge }}
          when: vmbr1_exists.rc != 0
              
        - name: Attach DVD ISO as primary boot device
          command: |
            qm set {{ opnsense_vm_id }} \
              --ide2 "local:iso/OPNsense-{{ opnsense_version }}-dvd-amd64.iso,media=cdrom"
              
        - name: Attach config ISO
          command: |
            qm set {{ opnsense_vm_id }} \
              --ide3 "local:iso/opnsense-config.iso,media=cdrom"
              
        - name: Create and attach disk
          command: |
            qm set {{ opnsense_vm_id }} \
              --scsi0 {{ opnsense_storage }}:{{ opnsense_disk_size }} \
              --scsihw virtio-scsi-pci
              
        - name: Set boot order - boot from DVD first
          command: |
            qm set {{ opnsense_vm_id }} \
              --boot order=ide2
              
        - name: Start VM
          command: qm start {{ opnsense_vm_id }}
          
        - name: Display automation starting notice
          debug:
            msg:
              - "=========================================="
              - "OPNsense VM Started - Automated Installation Beginning"
              - "=========================================="
              - ""
              - "The VM has been created with:"
              - "- Main OPNsense DVD ISO attached"
              - "- Configuration ISO with your custom config.xml"
              - ""
              - "Automated installation will now proceed using qm sendkey commands."
              - "This process takes approximately 5-7 minutes."
              - ""
              - "DO NOT interact with the VM console during installation!"
              - "=========================================="
    
    # Automated Installation via qm sendkey
    - name: "{{ service_name }} - Automated installation"
      tags: [opnsense, install]
      block:
        - name: Wait for boot prompt
          pause:
            seconds: 30
            prompt: "Waiting for OPNsense to reach login prompt..."
            
        - name: Copy sendstring helper script
          copy:
            src: ../../files/qm-sendstring.sh
            dest: /tmp/qm-sendstring.sh
            mode: '0755'
            
        - name: Login as installer
          shell: |
            # Send username "installer"
            /tmp/qm-sendstring.sh {{ opnsense_vm_id }} "installer"
            qm sendkey {{ opnsense_vm_id }} "ret"
            sleep 2
            
            # Send password "opnsense"
            /tmp/qm-sendstring.sh {{ opnsense_vm_id }} "opnsense"
            qm sendkey {{ opnsense_vm_id }} "ret"
          
        - name: Wait for installer to start
          pause:
            seconds: 10
            prompt: "Waiting for installer menu..."
            
        - name: Navigate installer - Accept and continue
          shell: |
            # Press Enter to accept and continue
            qm sendkey {{ opnsense_vm_id }} "ret"
            sleep 2
            
        - name: Select guided installation
          shell: |
            # Default is already on guided install, just press Enter
            qm sendkey {{ opnsense_vm_id }} "ret"
            sleep 2
            
        - name: Select disk (da0)
          shell: |
            # Default should be first disk, press Space to select
            qm sendkey {{ opnsense_vm_id }} "spc"
            sleep 0.5
            # Press Enter to continue
            qm sendkey {{ opnsense_vm_id }} "ret"
            sleep 2
            
        - name: Confirm disk selection - Use entire disk
          shell: |
            # Press Enter to use entire disk (default)
            qm sendkey {{ opnsense_vm_id }} "ret"
            sleep 2
            
        - name: Select GPT/UEFI partition scheme
          shell: |
            # Default is usually GPT/UEFI, press Enter
            qm sendkey {{ opnsense_vm_id }} "ret"
            sleep 5
            
        - name: Skip LAGG configuration prompt
          shell: |
            # Skip LAGG configuration (Link Aggregation)
            qm sendkey {{ opnsense_vm_id }} "n"
            sleep 1
            qm sendkey {{ opnsense_vm_id }} "ret"
            sleep 2
            
        - name: Skip VLAN configuration prompt
          shell: |
            # Skip VLAN configuration
            qm sendkey {{ opnsense_vm_id }} "n"
            sleep 1
            qm sendkey {{ opnsense_vm_id }} "ret"
            sleep 2
            
        - name: Auto-detect network interfaces
          shell: |
            # Select 'a' for auto-detection of interfaces
            qm sendkey {{ opnsense_vm_id }} "a"
            sleep 1
            qm sendkey {{ opnsense_vm_id }} "ret"
            sleep 2
            
        - name: Wait for installation to complete
          pause:
            seconds: 180
            prompt: "Waiting for file copy and installation to complete..."
            
        - name: Complete installation
          shell: |
            # Installation complete dialog - press Enter
            qm sendkey {{ opnsense_vm_id }} "ret"
            sleep 2
            
        - name: Reboot system
          shell: |
            # Select Reboot option (should be default)
            qm sendkey {{ opnsense_vm_id }} "ret"
            sleep 5
            
        - name: Wait for system to shutdown
          pause:
            seconds: 30
            prompt: "Waiting for shutdown before reboot..."
            
        - name: Ensure boot from disk
          command: |
            qm set {{ opnsense_vm_id }} --boot order=scsi0
            
        - name: Start VM if not running
          command: qm start {{ opnsense_vm_id }}
          failed_when: false
          
        - name: Wait for OPNsense to boot and import config
          pause:
            seconds: 120
            prompt: "Waiting for OPNsense to boot and import configuration..."
            
        - name: Wait for HTTPS interface
          wait_for:
            host: "{{ opnsense_lan_ip }}"
            port: 443
            delay: 10
            timeout: 300
            
        - name: Test HTTPS connectivity
          uri:
            url: "https://{{ opnsense_lan_ip }}"
            method: GET
            validate_certs: false
            status_code: [200, 302, 401]
          register: https_test
          
        - name: Clean up helper script
          file:
            path: /tmp/qm-sendstring.sh
            state: absent
            
        - name: Display final status
          debug:
            msg:
              - "=========================================="
              - "OPNsense Deployment Complete!"
              - "=========================================="
              - ""
              - "Configuration has been automatically imported."
              - "The system is now accessible at:"
              - ""
              - "Web UI: https://{{ opnsense_lan_ip }}"
              - "SSH: ssh -i ~/.ssh/your_key root@{{ opnsense_lan_ip }}"
              - ""
              - "=========================================="

