---
# Update Alpine VM Password
# This playbook updates the password for Alpine VM from the default to ADMIN_PASSWORD
#
# Usage:
#   ansible-playbook -i inventory.yml alpine-vm-password-update.yml
#
# Prerequisites:
#   - Alpine VM must be created and accessible via SSH
#   - ServicePasswords environment must contain ADMIN_PASSWORD
#
# This is typically run after alpine-vm-deploy.yml to set the production password

- name: "Alpine VM: Update Password"
  hosts: alpine-vm
  become: true
  gather_facts: true
  
  vars:
    # Template configuration for Semaphore
    template_config:
      semaphore_environment: "ServicePasswords"
    
    # User to update
    vm_username: "alpineadmin"
    
    # Get password from ServicePasswords environment
    new_password: "{{ ADMIN_PASSWORD }}"
  
  tasks:
    - name: "Password Update - Validate inputs"
      tags: [password, validate]
      block:
        - name: Check that ADMIN_PASSWORD is provided
          assert:
            that:
              - new_password is defined
              - new_password | length > 0
            fail_msg: "ADMIN_PASSWORD must be provided via ServicePasswords environment"
            success_msg: "Password validation passed"
    
    - name: "Password Update - Generate password hash"
      tags: [password, hash]
      delegate_to: localhost
      block:
        - name: Generate SHA512 password hash
          shell: |
            python3 -c "import crypt; print(crypt.crypt('{{ new_password }}', crypt.mksalt(crypt.METHOD_SHA512)))"
          register: password_hash
          no_log: true
          changed_when: false
        
        - name: Verify hash was generated
          assert:
            that:
              - password_hash.stdout is defined
              - password_hash.stdout | length > 0
              - password_hash.stdout.startswith('$6$')
            fail_msg: "Failed to generate password hash"
            success_msg: "Password hash generated successfully"
    
    - name: "Password Update - Update user password"
      tags: [password, update]
      block:
        - name: Update {{ vm_username }} password
          user:
            name: "{{ vm_username }}"
            password: "{{ password_hash.stdout }}"
            update_password: always
          no_log: true
          register: password_update
        
        - name: Also update alpine user password (if exists)
          user:
            name: "alpine"
            password: "{{ password_hash.stdout }}"
            update_password: always
          no_log: true
          failed_when: false
          register: alpine_password_update
    
    - name: "Password Update - Verify SSH key access"
      tags: [password, verify]
      block:
        - name: Test sudo access with new password
          become: true
          command: whoami
          register: sudo_test
          changed_when: false
        
        - name: Verify sudo worked
          assert:
            that:
              - sudo_test.stdout == "root"
            fail_msg: "Sudo access verification failed"
            success_msg: "Sudo access verified"
    
    - name: "Password Update - Display summary"
      tags: [password, summary]
      debug:
        msg:
          - "========================================"
          - "Alpine VM Password Updated Successfully!"
          - "========================================"
          - ""
          - "Updated Users:"
          - "  - {{ vm_username }}: ✓ Password updated"
          - "  - alpine: {% if alpine_password_update.changed %}✓ Password updated{% else %}✗ User not found or update failed{% endif %}"
          - ""
          - "SSH Key Access: ✓ Still working"
          - "Sudo Access: ✓ Verified"
          - ""
          - "Note: The hardcoded password 'changeme123' has been replaced"
          - "      with the secure ADMIN_PASSWORD from ServicePasswords"
          - "========================================"