---
- name: "DynDNS 5: Verify Complete Setup"
  hosts: privatebox-management
  become: false
  gather_facts: true

  vars:
    # Template configuration for Semaphore
    template_config:
      semaphore_environment: "privatebox-env-opnsense"
      semaphore_inventory: "privatebox-management"
      semaphore_category: "services"

    # Configuration
    management_vm_ip: "{{ ansible_default_ipv4.address }}"
    adguard_ip: "{{ ansible_default_ipv4.address }}"
    opnsense_api_url: "{{ OPNSENSE_API_URL }}"
    opnsense_api_key: "{{ OPNSENSE_API_KEY }}"
    opnsense_api_secret: "{{ OPNSENSE_API_SECRET }}"
    caddy_data_dir: "/opt/caddy/data"

    # Test services
    test_services:
      - portainer
      - semaphore
      - adguard

    enable_debug: true

  tasks:
    # ============================================
    # Phase 1: Read Config File from Semaphore Container
    # ============================================

    - name: Read DynDNS config from Semaphore container
      shell: podman exec semaphore cat /tmp/ddns-handoff.json
      register: ddns_config_raw
      changed_when: false
      no_log: true

    - name: Parse DynDNS config
      set_fact:
        ddns_config: "{{ ddns_config_raw.stdout | from_json }}"
      no_log: true

    - name: Set domain from config
      set_fact:
        ddns_domain: "{{ ddns_config.ddns_domain }}"

    # ============================================
    # Phase 2: Header
    # ============================================

    - name: Display verification header
      debug:
        msg:
          - "========================================"
          - "   DYNAMIC DNS + LET'S ENCRYPT VERIFICATION"
          - "========================================"
          - "Domain: {{ ddns_domain }}"
          - "Management VM: {{ management_vm_ip }}"

    # ============================================
    # Phase 3: Certificate Verification
    # ============================================

    - name: Check for Let's Encrypt certificates
      find:
        paths: "{{ caddy_data_dir }}/certificates/acme-v02.api.letsencrypt.org-directory"
        patterns: "*{{ ddns_domain }}.crt"
        recurse: yes
      register: letsencrypt_certs
      become: true

    - name: Display certificate count
      debug:
        msg: "Found {{ letsencrypt_certs.matched }} Let's Encrypt certificate(s)"

    - name: Get certificate details
      when: letsencrypt_certs.matched > 0
      become: true
      block:
        - name: Extract certificate information
          command: >
            openssl x509 -in {{ letsencrypt_certs.files[0].path }}
            -noout -issuer -subject -dates
          register: cert_info
          changed_when: false

        - name: Display certificate details
          debug:
            msg:
              - "Certificate Details:"
              - "{{ cert_info.stdout_lines }}"

        - name: Check certificate expiry
          command: >
            openssl x509 -in {{ letsencrypt_certs.files[0].path }}
            -noout -checkend {{ 60 * 24 * 3600 }}
          register: cert_expiry_check
          changed_when: false
          failed_when: false

        - name: Display certificate expiry status
          debug:
            msg: >-
              Certificate expiry: {{ 'Valid for more than 60 days' if cert_expiry_check.rc == 0
              else 'EXPIRES SOON - less than 60 days remaining' }}

    # ============================================
    # Phase 4: HTTPS Service Access Tests
    # ============================================

    - name: Test HTTPS access via .lan domains
      uri:
        url: "https://{{ item }}.lan"
        method: GET
        validate_certs: no
        follow_redirects: yes
        status_code: [200, 302, 401]
        timeout: 10
      register: lan_https_tests
      loop: "{{ test_services }}"
      failed_when: false

    - name: Display .lan HTTPS results
      debug:
        msg:
          - "HTTPS Access - .lan domains:"
          - "{% for result in lan_https_tests.results %}  https://{{ result.item }}.lan → HTTP {{ result.status | default('FAILED') }}{% endfor %}"

    - name: Test HTTPS access via custom domains
      uri:
        url: "https://{{ item }}.{{ ddns_domain }}"
        method: GET
        validate_certs: yes  # Validate cert for custom domains
        follow_redirects: yes
        status_code: [200, 302, 401]
        timeout: 10
      register: custom_https_tests
      loop: "{{ test_services }}"
      failed_when: false

    - name: Display custom domain HTTPS results
      debug:
        msg:
          - "HTTPS Access - {{ ddns_domain }}:"
          - "{% for result in custom_https_tests.results %}  https://{{ result.item }}.{{ ddns_domain }} → HTTP {{ result.status | default('FAILED') }}{% endfor %}"

    - name: Check if any HTTPS tests failed
      set_fact:
        https_failures: >-
          {{
            (lan_https_tests.results + custom_https_tests.results) |
            rejectattr('status', 'defined') |
            list
          }}

    - name: Display HTTPS test summary
      debug:
        msg: >-
          HTTPS Tests: {{ lan_https_tests.results | length + custom_https_tests.results | length }} total,
          {{ https_failures | length }} failed

    # ============================================
    # Phase 5: DynDNS Status Check
    # ============================================

    - name: Check OPNsense DynDNS service status
      block:
        - name: Get DynDNS service status
          uri:
            url: "{{ opnsense_api_url }}/api/dyndns/service/status"
            method: GET
            user: "{{ opnsense_api_key }}"
            password: "{{ opnsense_api_secret }}"
            force_basic_auth: true
            validate_certs: no
            status_code: 200
          register: dyndns_status
          failed_when: false

        - name: Display DynDNS status
          debug:
            msg: "OPNsense DynDNS service: {{ dyndns_status.json.status | default('UNKNOWN') }}"
          when: dyndns_status.status == 200

        - name: Get DynDNS accounts
          uri:
            url: "{{ opnsense_api_url }}/api/dyndns/accounts/get"
            method: GET
            user: "{{ opnsense_api_key }}"
            password: "{{ opnsense_api_secret }}"
            force_basic_auth: true
            validate_certs: no
            status_code: 200
          register: dyndns_accounts
          failed_when: false

        - name: Display DynDNS accounts
          debug:
            msg: "DynDNS accounts configured: {{ dyndns_accounts.json | default({}) | length }}"
          when: dyndns_accounts.status == 200

    # ============================================
    # Phase 6: Caddy Service Health
    # ============================================

    - name: Check Caddy health endpoint
      uri:
        url: "http://{{ management_vm_ip }}/health"
        method: GET
        status_code: 200
        timeout: 5
      register: caddy_health

    - name: Display Caddy health status
      debug:
        msg: "✓ Caddy health check: OK"
      when: caddy_health.status == 200

    - name: Get Caddy service status
      become: true
      systemd:
        name: caddy.service
      register: caddy_service

    - name: Display Caddy service status
      debug:
        msg: "Caddy service: {{ caddy_service.status.ActiveState }} ({{ caddy_service.status.SubState }})"

    # ============================================
    # Phase 7: Final Summary
    # ============================================

    - name: Calculate test results
      set_fact:
        https_pass: "{{ (lan_https_tests.results + custom_https_tests.results) | selectattr('status', 'defined') | list | length }}"
        https_total: "{{ (lan_https_tests.results + custom_https_tests.results) | length }}"
        cert_valid: "{{ letsencrypt_certs.matched > 0 }}"
        caddy_running: "{{ caddy_service.status.ActiveState == 'active' }}"

    - name: Display final verification summary
      debug:
        msg:
          - "========================================"
          - "   VERIFICATION SUMMARY"
          - "========================================"
          - ""
          - "HTTPS Access:"
          - "  ✓ .lan domains: {{ lan_https_tests.results | selectattr('status', 'defined') | list | length }}/{{ lan_https_tests.results | length }} accessible"
          - "  ✓ Custom domains: {{ custom_https_tests.results | selectattr('status', 'defined') | list | length }}/{{ custom_https_tests.results | length }} accessible"
          - ""
          - "Certificates:"
          - "  ✓ Let's Encrypt certs: {{ 'ISSUED' if cert_valid else 'NOT FOUND' }}"
          - "  ✓ Certificate expiry: {{ 'Valid (>60 days)' if cert_expiry_check.rc == 0 else 'Check required' }}"
          - ""
          - "Services:"
          - "  ✓ Caddy: {{ 'RUNNING' if caddy_running else 'NOT RUNNING' }}"
          - "  ✓ DynDNS: {{ dyndns_status.json.status | default('NOT CHECKED') }}"
          - ""
          - "Overall Status: {{ 'ALL CHECKS PASSED ✓' if (https_pass | int == https_total | int and cert_valid and caddy_running) else 'SOME CHECKS FAILED - Review above' }}"
          - ""
          - "Access URLs:"
          - "  - https://portainer.lan (self-signed cert)"
          - "  - https://portainer.{{ ddns_domain }} (Let's Encrypt cert)"
          - ""
          - "========================================"

    - name: Mark verification as complete
      debug:
        msg: "✓ Dynamic DNS + Let's Encrypt setup verification complete"
