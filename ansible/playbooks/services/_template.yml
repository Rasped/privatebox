---
# Template playbook for deploying a new containerized service
# Instructions:
# 1. Copy this file to <service_name>.yml
# 2. Replace all instances of:
#    - SERVICE_NAME with your service name (e.g., "Pi-hole")
#    - SERVICE_TAG with a short tag (e.g., "pihole")
#    - service_var with your service variable prefix (e.g., "pihole")
# 3. Update the vars_prompt section for service-specific options
# 4. Modify deployment tasks as needed
# 5. Create corresponding Quadlet template in files/quadlet/<service>.container.j2
# 6. Add service variables to group_vars/privatebox/main.yml

- name: Deploy SERVICE_NAME
  hosts: privatebox
  become: true
  gather_facts: true
  
  vars:
    service_name: "SERVICE_NAME"
    service_description: "SERVICE_DESCRIPTION"
    service_tag: "SERVICE_TAG"
    
  # Allow override from SemaphoreUI survey
  vars_prompt:
    - name: confirm_deploy
      prompt: "Deploy {{ service_name }}? (yes/no)"
      default: "yes"
      private: no
      
    # Add service-specific prompts here
    # - name: custom_port
    #   prompt: "Service port (default: {{ service_var_port }})"
    #   default: "{{ service_var_port }}"
    #   private: no

  tasks:
    # Pre-deployment validation
    - name: "{{ service_name }} - Pre-deployment checks"
      when: confirm_deploy | bool
      tags: ["{{ service_tag }}", preflight]
      block:
        - name: Check system requirements
          assert:
            that:
              - ansible_distribution == "Ubuntu"
              - ansible_distribution_version is version('22.04', '>=')
            fail_msg: "This playbook requires Ubuntu 22.04 or later"
            
        - name: Check if Podman is installed
          command: which podman
          register: podman_check
          changed_when: false
          failed_when: false
          
        - name: Fail if Podman not installed
          fail:
            msg: "Podman is not installed. Please install Podman first."
          when: podman_check.rc != 0
          
        # Add service-specific pre-flight checks here
        # - name: Check for port conflicts
        #   wait_for:
        #     port: "{{ service_var_port }}"
        #     state: stopped
        #     timeout: 1
        #   ignore_errors: true
        #   register: port_check

    # Main deployment
    - name: "{{ service_name }} - Deployment"
      when: confirm_deploy | bool
      tags: ["{{ service_tag }}", deploy]
      block:
        - name: Create directory structure
          file:
            path: "{{ item.path }}"
            state: directory
            owner: "{{ item.owner | default(ansible_user) }}"
            group: "{{ item.group | default(ansible_user) }}"
            mode: "{{ item.mode | default('0755') }}"
          loop:
            - { path: "{{ service_var_data_dir }}" }
            - { path: "{{ service_var_config_dir }}" }
            - { path: "{{ quadlet_system_path if use_system_quadlet else quadlet_user_path }}" }
            
        - name: Deploy Quadlet unit file
          template:
            src: "../../files/quadlet/{{ service_tag }}.container.j2"
            dest: "{{ quadlet_system_path if use_system_quadlet else quadlet_user_path }}/{{ service_tag }}.container"
            owner: root
            group: root
            mode: '0644'
          register: quadlet_deployed
          
        - name: Reload systemd daemon
          systemd:
            daemon_reload: true
          when: quadlet_deployed.changed
            
        - name: Enable {{ service_name }} service
          systemd:
            name: "{{ service_tag }}-container.service"
            enabled: true
            scope: "{{ 'system' if use_system_quadlet else 'user' }}"
            
        - name: Start {{ service_name }} service
          systemd:
            name: "{{ service_tag }}-container.service"
            state: started
            scope: "{{ 'system' if use_system_quadlet else 'user' }}"
          register: service_start
          
        # Add service-specific wait conditions
        # - name: Wait for {{ service_name }} to be ready
        #   wait_for:
        #     port: "{{ service_var_port }}"
        #     delay: 5
        #     timeout: 60
        #   when: service_start.changed

    # Post-deployment validation
    - name: "{{ service_name }} - Post-deployment validation"
      when: confirm_deploy | bool
      tags: ["{{ service_tag }}", validate]
      block:
        - name: Check service status
          systemd:
            name: "{{ service_tag }}-container.service"
            scope: "{{ 'system' if use_system_quadlet else 'user' }}"
          register: service_status
          
        - name: Verify service is active
          assert:
            that:
              - service_status.status.ActiveState == "active"
            fail_msg: "{{ service_name }} service is not active"
            
        - name: Check container status
          command: podman ps --filter "name={{ service_tag }}" --format json
          register: container_status
          changed_when: false
          
        # Add service-specific validation tasks
            
    # Display access information
    - name: "{{ service_name }} - Access information"
      when: confirm_deploy | bool
      tags: ["{{ service_tag }}", info]
      block:
        - name: Display access information
          debug:
            msg:
              - "=========================================="
              - "{{ service_name }} Deployment Complete!"
              - "=========================================="
              - ""
              - "Service Status: {{ service_status.status.ActiveState }}"
              - ""
              # Add service-specific access information
              # - "Web Interface: http://{{ ansible_default_ipv4.address }}:{{ service_var_port }}"
              - ""
              - "Service Management:"
              - "- Status: sudo systemctl status {{ service_tag }}-container"
              - "- Logs: sudo podman logs {{ service_tag }}"
              - "- Restart: sudo systemctl restart {{ service_tag }}-container"
              - "=========================================="
              
        - name: Save deployment info
          copy:
            content: |
              {{ service_name }} Deployment Information
              =====================================
              Deployed: {{ ansible_date_time.iso8601 }}
              Host: {{ inventory_hostname }}
              
              Service: {{ service_tag }}-container.service
              Container: {{ service_tag }}
              
              Data Directory: {{ service_var_data_dir }}
              Config Directory: {{ service_var_config_dir }}
            dest: "{{ privatebox_base_path }}/deployment-info-{{ service_tag }}.txt"
            mode: '0644'

  handlers:
    - name: restart {{ service_tag }}
      systemd:
        name: "{{ service_tag }}-container.service"
        state: restarted
        scope: "{{ 'system' if use_system_quadlet else 'user' }}"