---
- name: "Network: Plan Architecture"
  hosts: all
  gather_facts: true
  
  vars:
    service_name: "Network Planning"
    service_description: "Generate and validate network configuration plan for VLAN deployment"
    service_tag: "network-planning"
    
    # Network plan output file
    network_plan_file: "/opt/privatebox/ansible/group_vars/all/network_plan.yml"
    
    # Default VLAN IDs - will adjust if conflicts found
    default_vlans:
      management: 10
      services: 20
      lan: 30
      iot: 40
      
    # Default values for hands-off deployment
    confirm_planning: true
    auto_resolve_conflicts: true      
  # Metadata for Semaphore template generation
  vars_prompt:
    - name: confirm_planning
      prompt: "Proceed with network planning?"
      default: "yes"
      private: no
      
    - name: auto_resolve_conflicts
      prompt: "Automatically resolve VLAN ID conflicts?"
      default: "yes"
      private: no
      
  tasks:
    # Pre-planning validation
    - name: "{{ service_name }} - Pre-planning checks"
      when: confirm_planning | bool
      tags: [network-plan, preflight]
      block:
        - name: Check for Proxmox discovery data
          stat:
            path: "/opt/privatebox/ansible/host_vars/proxmox/discovered.yml"
          register: discovery_file_check
          delegate_to: localhost
          
        - name: Warn if discovery data missing
          debug:
            msg: "WARNING: Proxmox discovery data not found. Running with limited information."
          when: not discovery_file_check.stat.exists
          
    # Main planning tasks
    - name: "{{ service_name }} - Network analysis"
      when: confirm_planning | bool
      tags: [network-plan, analyze]
      block:
        - name: Gather network facts from management VM
          setup:
            gather_subset:
              - network
          when: inventory_hostname == "ubuntu-management" or inventory_hostname == "container-host"
      
    - name: Get current management network
      set_fact:
        current_network:
          ip: "{{ ansible_default_ipv4.address }}"
          network: "{{ ansible_default_ipv4.network }}"
          gateway: "{{ ansible_default_ipv4.gateway }}"
          interface: "{{ ansible_default_ipv4.interface }}"
      when: inventory_hostname == "ubuntu-management" or inventory_hostname == "container-host"
      
    - name: Load Proxmox discovery if available
      include_vars:
        file: "/opt/privatebox/ansible/host_vars/proxmox/discovered.yml"
        name: proxmox_discovery
      delegate_to: localhost
      run_once: true
      ignore_errors: true
      
    - name: Detect IP allocation patterns
      set_fact:
        network_analysis:
          current_subnet: "{{ current_network.network | default('192.168.1.0') }}"
          subnet_prefix: >-
            {{
              (current_network.network | default('192.168.1.0')).split('.')[0:2] | join('.')
            }}
      delegate_to: localhost
      run_once: true
      
    - name: Check for VLAN conflicts
      set_fact:
        vlan_conflicts: >-
          {{
            default_vlans |
            dict2items |
            selectattr('value', 'in', proxmox_discovery.network.existing_vlans | default([])) |
            list
          }}
      when: proxmox_discovery is defined
      delegate_to: localhost
      run_once: true
      
    - name: Generate conflict-free VLAN IDs
      set_fact:
        safe_vlans: |
          {% set used_vlans = proxmox_discovery.network.existing_vlans | default([]) | map('int') | list %}
          {% set result = {} %}
          {% for name, preferred_id in default_vlans.items() %}
            {% if preferred_id not in used_vlans %}
              {% set _ = result.update({name: preferred_id}) %}
            {% else %}
              {% set new_id = preferred_id %}
              {% for i in range(100) %}
                {% set new_id = preferred_id + (i + 1) * 10 %}
                {% if new_id not in used_vlans and new_id < 4096 %}
                  {% set _ = result.update({name: new_id}) %}
                  {% break %}
                {% endif %}
              {% endfor %}
            {% endif %}
          {% endfor %}
          {{ result }}
      delegate_to: localhost
      run_once: true
      
    - name: Determine VLAN subnet scheme
      set_fact:
        vlan_networks:
          management: "10.0.{{ safe_vlans.management }}.0/24"
          services: "10.0.{{ safe_vlans.services }}.0/24"
          lan: "10.0.{{ safe_vlans.lan }}.0/24"
          iot: "10.0.{{ safe_vlans.iot }}.0/24"
      delegate_to: localhost
      run_once: true
      
    - name: Find suitable bridge for VLANs
      set_fact:
        vlan_bridge: >-
          {{
            proxmox_discovery.network.vlan_capable_bridges | default([]) | first |
            default(proxmox_discovery.network.bridges | default(['vmbr0']) | first)
          }}
      when: proxmox_discovery is defined
      delegate_to: localhost
      run_once: true
      
    - name: Create network plan
      set_fact:
        network_plan:
          current_network: "{{ current_network | default({}) }}"
          vlan_ids: "{{ safe_vlans }}"
          vlan_networks: "{{ vlan_networks }}"
          vlan_bridge: "{{ vlan_bridge | default('vmbr0') }}"
          ip_assignments:
            opnsense:
              management: "10.0.{{ safe_vlans.management }}.1"
              services: "10.0.{{ safe_vlans.services }}.1"
              lan: "10.0.{{ safe_vlans.lan }}.1"
              iot: "10.0.{{ safe_vlans.iot }}.1"
              wan: "dhcp"
            management_vm:
              current: "{{ current_network.ip | default('192.168.1.21') }}"
              future: "10.0.{{ safe_vlans.services }}.21"
            adguard:
              dns_ip: "10.0.{{ safe_vlans.services }}.21"
              dns_port: 53
          dhcp_ranges:
            lan:
              start: "10.0.{{ safe_vlans.lan }}.100"
              end: "10.0.{{ safe_vlans.lan }}.200"
            iot:
              start: "10.0.{{ safe_vlans.iot }}.100"
              end: "10.0.{{ safe_vlans.iot }}.200"
          migration_order:
            - prepare_opnsense
            - configure_vlans
            - setup_routing
            - migrate_services
            - update_dns
            - migrate_clients
            - cleanup
      delegate_to: localhost
      run_once: true
      
    - name: Create group_vars directory for network plan
      file:
        path: "{{ network_plan_file | dirname }}"
        state: directory
        mode: '0755'
      delegate_to: localhost
      run_once: true
      
    - name: Save network plan
      copy:
        content: |
          ---
          # Network Configuration Plan
          # Generated: {{ ansible_date_time.iso8601 }}
          #
          # This file contains the network migration plan
          # It is used by all subsequent playbooks
          
          {{ network_plan | to_nice_yaml }}
        dest: "{{ network_plan_file }}"
        mode: '0644'
      delegate_to: localhost
      run_once: true
      
    - name: Validate IP ranges for conflicts
      assert:
        that:
          - "item.key != 'wan' or item.value == 'dhcp'"
          - "item.key == 'wan' or (item.value | ipaddr)"
        fail_msg: "Invalid IP address for {{ item.key }}: {{ item.value }}"
      loop: "{{ network_plan.ip_assignments.opnsense | dict2items }}"
      when: confirm_planning | bool
      
    - name: Validate VLAN IDs are within valid range
      assert:
        that:
          - item.value | int >= 1
          - item.value | int <= 4094
        fail_msg: "VLAN ID {{ item.value }} for {{ item.key }} is out of range (1-4094)"
      loop: "{{ safe_vlans | dict2items }}"
      when: confirm_planning | bool
      
    - name: Check for IP subnet overlaps
      set_fact:
        subnet_check: |
          {% set subnets = [] %}
          {% for name, network in vlan_networks.items() %}
            {% set _ = subnets.append(network | ipaddr('network/prefix')) %}
          {% endfor %}
          {% set unique_subnets = subnets | unique | list %}
          {{ subnets | length == unique_subnets | length }}
      delegate_to: localhost
      run_once: true
      
    - name: Validate no subnet overlaps
      assert:
        that:
          - subnet_check | bool
        fail_msg: "Detected overlapping subnets in network plan"
      when: confirm_planning | bool
      
    # Display results
    - name: "{{ service_name }} - Planning results"
      when: confirm_planning | bool
      tags: [network-plan, info]
      block:
        - name: Display network plan summary
          debug:
            msg:
              - "=========================================="
              - "{{ service_name }} Complete!"
              - "=========================================="
              - ""
              - "Current Network: {{ current_network.network | default('Unknown') }}/{{ current_network.network | default('192.168.1.0') | ipaddr('prefix') | default(24) }}"
              - "Current Gateway: {{ current_network.gateway | default('Unknown') }}"
              - ""
              - "VLAN Configuration:"
              - "  Bridge: {{ vlan_bridge | default('vmbr0') }}"
              - "  Management VLAN: {{ safe_vlans.management }} (10.0.{{ safe_vlans.management }}.0/24)"
              - "  Services VLAN: {{ safe_vlans.services }} (10.0.{{ safe_vlans.services }}.0/24)"
              - "  LAN VLAN: {{ safe_vlans.lan }} (10.0.{{ safe_vlans.lan }}.0/24)"
              - "  IoT VLAN: {{ safe_vlans.iot }} (10.0.{{ safe_vlans.iot }}.0/24)"
              - ""
              - "Key IP Assignments:"
              - "  OPNsense WAN: DHCP from current network"
              - "  OPNsense LAN Gateway: 10.0.{{ safe_vlans.lan }}.1"
              - "  Management VM: {{ current_network.ip | default('Unknown') }} â†’ {{ network_plan.ip_assignments.management_vm.future }}"
              - "  AdGuard DNS: {{ network_plan.ip_assignments.adguard.dns_ip }}"
              - ""
              - "DHCP Ranges:"
              - "  LAN: {{ network_plan.dhcp_ranges.lan.start }} - {{ network_plan.dhcp_ranges.lan.end }}"
              - "  IoT: {{ network_plan.dhcp_ranges.iot.start }} - {{ network_plan.dhcp_ranges.iot.end }}"
              - ""
              - "Network plan saved to: {{ network_plan_file }}"
              - "=========================================="