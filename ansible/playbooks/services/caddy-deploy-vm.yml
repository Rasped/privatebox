---
# Deploy Caddy Reverse Proxy in Alpine Linux VM
# This playbook creates a dedicated Alpine VM for Caddy to solve certificate trust issues
#
# Usage:
#   ansible-playbook -i inventory.yml caddy-deploy-vm.yml
#
# Benefits over container deployment:
#   - Full system access for certificate trust store
#   - Caddy can properly install root CA certificates
#   - No container isolation issues with certutil
#   - Lighter than Ubuntu VM (Alpine ~50MB base)

- name: "Caddy VM: Deploy Alpine Linux Reverse Proxy VM"
  hosts: proxmox
  become: false
  gather_facts: true
  
  vars:
    service_name: "Caddy Alpine VM"
    service_description: "HTTPS reverse proxy with proper certificate trust"
    
    # VM Configuration
    vm_id: 9002
    vm_name: "caddy-proxy"
    vm_memory: 512
    vm_cores: 1
    vm_storage: "local-lvm"
    vm_disk_size: "4G"
    vm_network_bridge: "vmbr0"
    
    # Alpine Configuration
    alpine_version: "3.20"  # Using stable version with known cloud-init support
    alpine_arch: "x86_64"
    alpine_firmware: "bios"
    alpine_image_name: "alpine-{{ alpine_version }}-cloud-init-{{ alpine_arch }}.qcow2"
    alpine_image_url: "https://dl-cdn.alpinelinux.org/alpine/v{{ alpine_version }}/releases/cloud/nocloud_alpine-{{ alpine_version }}.0-{{ alpine_arch }}-{{ alpine_firmware }}-cloudinit-r0.qcow2"
    
    # Network Configuration (will be auto-detected if not set)
    vm_ip: ""  # Leave empty for auto-detection
    vm_gateway: ""  # Leave empty for auto-detection
    vm_netmask: "24"
    vm_dns: "1.1.1.1,8.8.8.8"
    
    # SSH Configuration
    ssh_public_key_file: "/root/.ssh/id_rsa.pub"
    alpine_user: "alpine"
    
    # Caddy Configuration
    caddy_config_dir: "/etc/caddy"
    caddy_data_dir: "/var/lib/caddy"
    caddy_log_dir: "/var/log/caddy"
    
    # Services to proxy (same as container deployment)
    privatebox_services:
      - name: adguard
        port: 8080
        domain: adguard.lan
        host: "{{ hostvars['container-host']['ansible_default_ipv4']['address'] | default('192.168.1.22') }}"
        description: "AdGuard Home DNS Filter"
      - name: semaphore
        port: 3000
        domain: semaphore.lan
        host: "{{ hostvars['container-host']['ansible_default_ipv4']['address'] | default('192.168.1.22') }}"
        description: "Semaphore Ansible UI"
      - name: portainer
        port: 9000
        domain: portainer.lan
        host: "{{ hostvars['container-host']['ansible_default_ipv4']['address'] | default('192.168.1.22') }}"
        description: "Portainer Container Management"
    
    # Temporary paths
    temp_dir: "/tmp/caddy-vm-deploy"
    
  tasks:
    # Pre-deployment checks
    - name: "{{ service_name }} - Pre-deployment validation"
      tags: [caddy-vm, preflight]
      block:
        - name: Check if VM already exists
          command: qm status {{ vm_id }}
          register: vm_exists
          failed_when: false
          changed_when: false
          
        - name: Get network configuration from container-host
          when: vm_ip == "" or vm_gateway == ""
          block:
            - name: Get container-host network info
              set_fact:
                detected_network: "{{ hostvars['container-host']['ansible_default_ipv4']['network'] | default('192.168.1.0') }}"
                detected_gateway: "{{ hostvars['container-host']['ansible_default_ipv4']['gateway'] | default('192.168.1.1') }}"
              when: "'container-host' in hostvars"
              
            - name: Calculate next available IP
              set_fact:
                vm_ip: "{{ detected_network.split('.')[0:3] | join('.') }}.23"
                vm_gateway: "{{ detected_gateway }}"
              when: detected_network is defined
              
            - name: Use default network if detection failed
              set_fact:
                vm_ip: "192.168.1.23"
                vm_gateway: "192.168.1.1"
              when: vm_ip == ""
              
        - name: Display network configuration
          debug:
            msg:
              - "VM will be created with:"
              - "  IP: {{ vm_ip }}"
              - "  Gateway: {{ vm_gateway }}"
              - "  Network: {{ vm_network_bridge }}"

    # VM Deployment
    - name: "{{ service_name }} - VM Creation"
      tags: [caddy-vm, deploy]
      when: vm_exists.rc != 0
      block:
        - name: Create temporary directory
          file:
            path: "{{ temp_dir }}"
            state: directory
            mode: '0755'
            
        - name: Download Alpine cloud-init image
          get_url:
            url: "{{ alpine_image_url }}"
            dest: "{{ temp_dir }}/{{ alpine_image_name }}"
            mode: '0644'
            timeout: 300
          register: image_download
          
        - name: Generate cloud-init user-data
          copy:
            dest: "{{ temp_dir }}/user-data"
            content: |
              #cloud-config
              hostname: {{ vm_name }}
              manage_etc_hosts: true
              
              users:
                - name: {{ alpine_user }}
                  ssh_authorized_keys:
                    - {{ lookup('file', ssh_public_key_file) }}
                  sudo: ALL=(ALL) NOPASSWD:ALL
                  shell: /bin/ash
                  
              packages:
                - caddy
                - caddy-openrc
                - nss-tools
                - ca-certificates
                - curl
                - nano
                
              write_files:
                - path: /etc/caddy/Caddyfile
                  owner: caddy:caddy
                  permissions: '0644'
                  content: |
                    # Temporary Caddyfile - will be replaced by Ansible
                    :80 {
                        respond "Caddy is running!"
                    }
                    
              runcmd:
                - rc-update add caddy default
                - mkdir -p {{ caddy_log_dir }}
                - chown caddy:caddy {{ caddy_log_dir }}
                - rc-service caddy start
                # Install Caddy root CA certificate to system trust store
                - sleep 5
                - caddy trust || true
                
        - name: Generate cloud-init meta-data
          copy:
            dest: "{{ temp_dir }}/meta-data"
            content: |
              instance-id: {{ vm_name }}-{{ vm_id }}
              local-hostname: {{ vm_name }}
              
        - name: Create cloud-init ISO
          command: |
            genisoimage -output {{ temp_dir }}/cloud-init.iso -V cidata -r -J \
              {{ temp_dir }}/meta-data {{ temp_dir }}/user-data
          args:
            creates: "{{ temp_dir }}/cloud-init.iso"
            
        - name: Create VM
          command: |
            qm create {{ vm_id }} \
              --name {{ vm_name }} \
              --memory {{ vm_memory }} \
              --cores {{ vm_cores }} \
              --net0 virtio,bridge={{ vm_network_bridge }} \
              --serial0 socket \
              --vga serial0 \
              --agent 1
          register: vm_created
          
        - name: Import Alpine disk image
          command: |
            qm importdisk {{ vm_id }} {{ temp_dir }}/{{ alpine_image_name }} {{ vm_storage }}
          register: import_result
          
        - name: Get imported disk name
          set_fact:
            imported_disk: "{{ vm_storage }}:vm-{{ vm_id }}-disk-0"
            
        - name: Attach imported disk to VM
          command: |
            qm set {{ vm_id }} --scsi0 {{ imported_disk }}
            
        - name: Set boot disk
          command: |
            qm set {{ vm_id }} --boot c --bootdisk scsi0
            
        - name: Resize disk
          command: |
            qm resize {{ vm_id }} scsi0 {{ vm_disk_size }}
            
        - name: Add cloud-init drive
          command: |
            qm set {{ vm_id }} --ide2 {{ vm_storage }}:cloudinit
            
        - name: Upload cloud-init ISO
          command: |
            qm set {{ vm_id }} --ide1 {{ vm_storage }}:0,import-from={{ temp_dir }}/cloud-init.iso
            
        - name: Configure network
          command: |
            qm set {{ vm_id }} --ipconfig0 ip={{ vm_ip }}/{{ vm_netmask }},gw={{ vm_gateway }}
            
        - name: Start VM
          command: qm start {{ vm_id }}
          
        - name: Wait for VM to be ready
          wait_for:
            host: "{{ vm_ip }}"
            port: 22
            delay: 30
            timeout: 300
            
        - name: Clean up temporary files
          file:
            path: "{{ temp_dir }}"
            state: absent

    # Configure VM inventory dynamically
    - name: "{{ service_name }} - Add VM to inventory"
      tags: [caddy-vm, configure]
      block:
        - name: Add Caddy VM to inventory
          add_host:
            name: caddy-vm
            groups: caddy_proxy
            ansible_host: "{{ vm_ip }}"
            ansible_user: "{{ alpine_user }}"
            ansible_ssh_private_key_file: "{{ ssh_public_key_file | regex_replace('.pub$', '') }}"
            ansible_python_interpreter: /usr/bin/python3

    # Display deployment information
    - name: "{{ service_name }} - Deployment summary"
      tags: [caddy-vm, info]
      debug:
        msg:
          - "=========================================="
          - "{{ service_name }} VM Created Successfully!"
          - "=========================================="
          - ""
          - "VM Details:"
          - "  VM ID: {{ vm_id }}"
          - "  VM Name: {{ vm_name }}"
          - "  IP Address: {{ vm_ip }}"
          - "  SSH Access: ssh {{ alpine_user }}@{{ vm_ip }}"
          - ""
          - "Next Steps:"
          - "  1. Run the configuration playbook to deploy Caddy"
          - "  2. The VM has Caddy pre-installed but needs configuration"
          - "  3. Certificate trust will work properly in this VM"
          - ""
          - "To configure Caddy, run:"
          - "  ansible-playbook -i inventory.yml caddy-configure-vm.yml"
          - "=========================================="

# Second play to configure Caddy on the VM
- name: "Caddy VM: Configure Caddy Service"
  hosts: caddy-vm
  become: true
  gather_facts: true
  
  vars:
    caddy_config_dir: "/etc/caddy"
    caddy_data_dir: "/var/lib/caddy"
    caddy_log_dir: "/var/log/caddy"
    
    # Inherit privatebox_services from first play
    privatebox_services: "{{ hostvars['localhost']['privatebox_services'] }}"
    
  tasks:
    - name: "Caddy Configuration"
      tags: [caddy-vm, configure]
      block:
        - name: Ensure Caddy directories exist
          file:
            path: "{{ item }}"
            state: directory
            owner: caddy
            group: caddy
            mode: '0755'
          loop:
            - "{{ caddy_config_dir }}"
            - "{{ caddy_data_dir }}"
            - "{{ caddy_log_dir }}"
            
        - name: Deploy Caddyfile
          template:
            src: ../../files/caddy/Caddyfile.j2
            dest: "{{ caddy_config_dir }}/Caddyfile"
            owner: caddy
            group: caddy
            mode: '0644'
          notify: reload caddy
          
        - name: Ensure Caddy service is enabled and started
          service:
            name: caddy
            enabled: yes
            state: started
            
        - name: Trust Caddy root certificate
          command: caddy trust
          become: true
          register: trust_result
          failed_when: false
          changed_when: "'certificate installed successfully' in trust_result.stdout"
          
        - name: Test Caddy configuration
          command: caddy validate --config {{ caddy_config_dir }}/Caddyfile
          become_user: caddy
          changed_when: false
          
        - name: Get Caddy root certificate
          command: cat {{ caddy_data_dir }}/pki/authorities/local/root.crt
          register: root_cert
          changed_when: false
          
        - name: Display certificate info
          debug:
            msg:
              - "Caddy root CA certificate has been installed in the VM"
              - "To trust this certificate on client machines:"
              - "1. Save the certificate from the VM"
              - "2. Install it as a trusted root CA"
              - ""
              - "Certificate location: {{ caddy_data_dir }}/pki/authorities/local/root.crt"
              
  handlers:
    - name: reload caddy
      service:
        name: caddy
        state: reloaded