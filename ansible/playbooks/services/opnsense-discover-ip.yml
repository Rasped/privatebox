---
- name: "OPNsense: Discover IP address via MAC lookup"
  hosts: proxmox
  gather_facts: yes
  vars:
    # You can override this with -e vm_name=exact-name or set in Semaphore
    vm_name: "{{ opnsense_vm_name | default('opnsense') }}"
    ssh_timeout: 5
    opnsense_default_password: "opnsense"
    enable_debug: true

  tasks:
    - name: Debug - Show host information
      debug:
        msg:
          - "Running on host: {{ inventory_hostname }}"
          - "Host IP: {{ ansible_default_ipv4.address | default('unknown') }}"
      when: enable_debug | bool

    - name: List all VMs on this host
      shell: qm list
      register: all_vms
      changed_when: false
      
    - name: Debug - Show all VMs
      debug:
        msg: "VMs on this host:\n{{ all_vms.stdout }}"
      when: enable_debug | bool

    - name: Find VM ID by name
      shell: |
        qm list | awk -v name="{{ vm_name }}" '$2 == name {print $1}' | head -1 || echo "NOT_FOUND"
      register: vm_id_result
      changed_when: false
      
    - name: Check if VM was found
      fail:
        msg: |
          VM '{{ vm_name }}' not found on this Proxmox host!
          Available VMs:
          {{ all_vms.stdout }}
      when: vm_id_result.stdout == "NOT_FOUND"
      
    - name: Set VM ID fact
      set_fact:
        vm_id: "{{ vm_id_result.stdout }}"
        
    - name: Debug - Show VM ID
      debug:
        msg: "Found VM '{{ vm_name }}' with ID: {{ vm_id }}"

    - name: Get VM configuration
      shell: qm config {{ vm_id }}
      register: vm_config
      changed_when: false
      
    - name: Extract MAC address from VM config
      shell: |
        qm config {{ vm_id }} | grep -E '^net0:' | grep -oP '([0-9A-Fa-f]{2}:){5}[0-9A-Fa-f]{2}' || echo "NO_MAC"
      register: mac_result
      changed_when: false
      
    - name: Check if MAC was found
      fail:
        msg: |
          Could not extract MAC address from VM {{ vm_id }} configuration!
          Network config line:
          {{ vm_config.stdout | regex_search('^net0:.*', multiline=True) }}
      when: mac_result.stdout == "NO_MAC"

    - name: Set MAC address fact
      set_fact:
        opnsense_mac: "{{ mac_result.stdout | lower }}"
        
    - name: Display target MAC address
      debug:
        msg: "Looking for OPNsense VM with MAC address: {{ opnsense_mac }}"

    - name: Check VM status
      shell: qm status {{ vm_id }}
      register: vm_status
      changed_when: false
      
    - name: Verify VM is running
      fail:
        msg: "VM {{ vm_id }} is not running. Status: {{ vm_status.stdout }}"
      when: "'running' not in vm_status.stdout"

    - name: Wait for VM to boot
      pause:
        seconds: 30
        prompt: "Waiting for OPNsense to boot and obtain DHCP..."

    - name: Detect network to scan
      shell: |
        ip route | grep -v default | grep "dev vmbr0" | head -1 | awk '{print $1}'
      register: network_to_scan
      changed_when: false
      
    - name: Set scan network
      set_fact:
        scan_network: "{{ network_to_scan.stdout | default('192.168.1.0/24') }}"
        
    - name: Display network to scan
      debug:
        msg: "Will scan network: {{ scan_network }}"

    - name: Scan network for live hosts
      shell: |
        nmap -sn {{ scan_network }} -oG - | grep "Up" | awk '{print $2}' | grep -v "^$"
      register: live_hosts
      changed_when: false
      
    - name: Debug - Show discovered hosts
      debug:
        msg: "Found {{ live_hosts.stdout_lines | length }} live hosts on network"
      when: enable_debug | bool

    - name: Initialize discovery status
      set_fact:
        opnsense_ip: ""
        hosts_checked: []
        
    - name: Check each host for OPNsense with matching MAC
      shell: |
        # Try to SSH and get MAC address
        SSHPASS='{{ opnsense_default_password }}' sshpass -e ssh \
          -o StrictHostKeyChecking=no \
          -o ConnectTimeout={{ ssh_timeout }} \
          -o PasswordAuthentication=yes \
          -o PreferredAuthentications=password \
          root@{{ item }} \
          "ifconfig vtnet0 2>/dev/null | grep ether | sed 's/.*ether //'" 2>/dev/null || echo "FAILED"
      register: mac_check
      with_items: "{{ live_hosts.stdout_lines }}"
      when: opnsense_ip == ""
      changed_when: false
      failed_when: false

    - name: Process discovery results
      set_fact:
        opnsense_ip: "{{ item.item }}"
      when:
        - item.stdout | lower == opnsense_mac
        - opnsense_ip == ""
      with_items: "{{ mac_check.results }}"
      
    - name: Debug - Show check results
      debug:
        msg: "Host {{ item.item }}: {{ 'MAC=' + item.stdout if item.stdout != 'FAILED' else 'No SSH access or not OPNsense' }}"
      with_items: "{{ mac_check.results }}"
      when: enable_debug | bool

    - name: Display discovery result - Success
      debug:
        msg: 
          - "========================================"
          - "SUCCESS: Found OPNsense!"
          - "IP Address: {{ opnsense_ip }}"
          - "MAC Address: {{ opnsense_mac }}"
          - "VM Name: {{ vm_name }}"
          - "VM ID: {{ vm_id }}"
          - "========================================"
      when: opnsense_ip != ""

    - name: Verify OPNsense is accessible
      shell: |
        SSHPASS='{{ opnsense_default_password }}' sshpass -e ssh \
          -o StrictHostKeyChecking=no \
          -o ConnectTimeout={{ ssh_timeout }} \
          root@{{ opnsense_ip }} \
          "hostname && opnsense-version"
      register: opnsense_verify
      when: opnsense_ip != ""
      changed_when: false
      
    - name: Debug - Show OPNsense verification
      debug:
        msg: "OPNsense verification:\n{{ opnsense_verify.stdout }}"
      when: 
        - opnsense_ip != ""
        - enable_debug | bool

    - name: Save discovered IP for future use
      copy:
        content: |
          # OPNsense Discovery Results
          OPNSENSE_IP={{ opnsense_ip }}
          OPNSENSE_MAC={{ opnsense_mac }}
          OPNSENSE_VM_ID={{ vm_id }}
          OPNSENSE_VM_NAME={{ vm_name }}
          DISCOVERED_AT={{ ansible_date_time.iso8601 }}
          DISCOVERED_ON_HOST={{ inventory_hostname }}
        dest: /tmp/opnsense-discovery.env
      when: opnsense_ip != ""
      
    - name: Display discovery file location
      debug:
        msg: "Discovery results saved to: /tmp/opnsense-discovery.env on {{ inventory_hostname }}"
      when: opnsense_ip != ""

    - name: Failed to discover OPNsense
      fail:
        msg: |
          ========================================
          FAILED: Could not discover OPNsense IP
          ========================================
          
          VM Information:
          - VM Name: {{ vm_name }}
          - VM ID: {{ vm_id }}
          - MAC Address: {{ opnsense_mac }}
          - VM Status: Running
          
          Network scanned: {{ scan_network }}
          Hosts checked: {{ live_hosts.stdout_lines | length }}
          
          Possible reasons:
          1. OPNsense hasn't obtained DHCP yet - wait and retry
          2. Default password has been changed
          3. SSH is disabled on WAN interface
          4. Firewall blocking SSH access
          
          Manual discovery:
          - Check your router's DHCP client list for MAC {{ opnsense_mac }}
          - Try accessing OPNsense console via Proxmox
          - Verify WAN interface is configured for DHCP
      when: opnsense_ip == ""