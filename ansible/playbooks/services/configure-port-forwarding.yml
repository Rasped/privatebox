---
# Task 5.3: Create Port Forwarding Rules
# Configure external service access through NAT/port forwarding
- name: OPNsense: Configure Port Forwarding
  hosts: container-host
  become: true
  gather_facts: true
  
  vars:
    service_name: "OPNsense Port Forwarding"
    service_description: "Configure NAT and firewall rules for external service access"
    service_tag: "port-forward"
    
    # API credentials location
    api_key_file: "/etc/privatebox-opnsense-api-key"
    api_secret_file: "/etc/privatebox-opnsense-api-secret"
    
    # Default port forwarding rules (can be overridden)
    default_port_forwards: []
      # Example entries:
      # - name: "Web Server"
      #   external_port: "80"
      #   internal_ip: "10.0.20.50"
      #   internal_port: "80"
      #   protocol: "tcp"
      #   description: "Forward HTTP to internal web server"      opnsense_host:
        semaphore_type: "string"
        semaphore_required: true
        semaphore_description: "OPNsense IP address or hostname"
      port_forwards_json:
        semaphore_type: "text"
        semaphore_required: false
        semaphore_description: "JSON array of port forwards (leave empty for none)"
        semaphore_default: "[]"
      confirm_port_forward:
        semaphore_type: "boolean"
        semaphore_required: true
        semaphore_default: false
        semaphore_description: "Confirm port forwarding configuration"
  
  tasks:
    - name: Pre-flight checks
      block:
        - name: Verify confirmation
          assert:
            that:
              - confirm_port_forward | bool
            fail_msg: "Port forwarding not confirmed. Set confirm_port_forward=true to proceed."
            
        - name: Load API credentials
          set_fact:
            api_key: "{{ lookup('file', api_key_file) | trim }}"
            api_secret: "{{ lookup('file', api_secret_file) | trim }}"
            
        - name: Parse port forwards configuration
          set_fact:
            port_forwards: "{{ port_forwards_json | from_json }}"
          when: port_forwards_json is defined and port_forwards_json | length > 0
          
        - name: Use default if no custom config
          set_fact:
            port_forwards: "{{ default_port_forwards }}"
          when: port_forwards is not defined
          
        - name: Test API connectivity
          uri:
            url: "https://{{ opnsense_host }}/api/core/system/status"
            method: GET
            user: "{{ api_key }}"
            password: "{{ api_secret }}"
            force_basic_auth: true
            validate_certs: false
            status_code: 200
          register: api_test
          
    - name: Configure WAN inbound rules
      when: port_forwards | length > 0
      block:
        - name: Define WAN inbound rules
          set_fact:
            wan_rules:
              # Default deny all inbound
              - sequence: "500"
                action: "block"
                interface: "WAN"
                source: "any"
                destination: "any"
                protocol: "any"
                description: "500-WAN-ALL-DENY - Block all inbound by default"
                log: "1"
                
              # Allow established connections
              - sequence: "501"
                action: "pass"
                interface: "WAN"
                source: "any"
                destination: "any"
                protocol: "any"
                state: "established,related"
                description: "501-WAN-ESTABLISHED-ALLOW - Allow established connections"
                log: "0"
                
        - name: Add WAN security rules
          uri:
            url: "https://{{ opnsense_host }}/api/firewall/filter/addRule"
            method: POST
            user: "{{ api_key }}"
            password: "{{ api_secret }}"
            force_basic_auth: true
            validate_certs: false
            body_format: json
            body:
              rule:
                sequence: "{{ item.sequence }}"
                action: "{{ item.action }}"
                interface: "{{ item.interface }}"
                direction: "in"
                ipprotocol: "inet"
                protocol: "{{ item.protocol }}"
                source: "{{ item.source }}"
                destination: "{{ item.destination }}"
                log: "{{ item.log | default('0') }}"
                description: "{{ item.description }}"
                state: "{{ item.state | default('') }}"
                enabled: "1"
            status_code: [200, 201]
          loop: "{{ wan_rules }}"
          
    - name: Configure port forwarding NAT rules
      when: port_forwards | length > 0
      block:
        - name: Create NAT port forward rules
          uri:
            url: "https://{{ opnsense_host }}/api/firewall/nat/forward/addRule"
            method: POST
            user: "{{ api_key }}"
            password: "{{ api_secret }}"
            force_basic_auth: true
            validate_certs: false
            body_format: json
            body:
              rule:
                interface: "WAN"
                protocol: "{{ item.protocol | default('tcp') }}"
                source: "any"
                destination: "WAN:address"
                destination_port: "{{ item.external_port }}"
                target: "{{ item.internal_ip }}"
                local_port: "{{ item.internal_port | default(item.external_port) }}"
                description: "{{ item.description | default(item.name + ' port forward') }}"
                natreflection: "enable"
                associated_rule_id: "pass"
                enabled: "1"
            status_code: [200, 201]
          loop: "{{ port_forwards }}"
          register: nat_results
          
        - name: Apply NAT configuration
          uri:
            url: "https://{{ opnsense_host }}/api/firewall/nat/forward/apply"
            method: POST
            user: "{{ api_key }}"
            password: "{{ api_secret }}"
            force_basic_auth: true
            validate_certs: false
            body_format: json
            body: {}
            status_code: 200
            
    - name: Configure associated firewall rules
      when: port_forwards | length > 0
      block:
        - name: Create firewall rules for port forwards
          uri:
            url: "https://{{ opnsense_host }}/api/firewall/filter/addRule"
            method: POST
            user: "{{ api_key }}"
            password: "{{ api_secret }}"
            force_basic_auth: true
            validate_certs: false
            body_format: json
            body:
              rule:
                sequence: "{{ 510 + index }}"
                action: "pass"
                interface: "WAN"
                direction: "in"
                ipprotocol: "inet"
                protocol: "{{ item.protocol | default('tcp') }}"
                source: "{{ item.source_ip | default('any') }}"
                destination: "{{ item.internal_ip }}"
                destination_port: "{{ item.internal_port | default(item.external_port) }}"
                log: "1"
                description: "Port forward - {{ item.name }}"
                enabled: "1"
            status_code: [200, 201]
          loop: "{{ port_forwards }}"
          loop_control:
            index_var: index
            
    - name: Configure outbound NAT
      block:
        - name: Ensure outbound NAT for all VLANs
          set_fact:
            outbound_nat_rules:
              - interface: "WAN"
                source: "10.0.10.0/24"
                destination: "any"
                description: "Management VLAN outbound NAT"
                
              - interface: "WAN"
                source: "10.0.20.0/24"
                destination: "any"
                description: "Services VLAN outbound NAT"
                
              - interface: "WAN"
                source: "10.0.30.0/24"
                destination: "any"
                description: "LAN VLAN outbound NAT"
                
              - interface: "WAN"
                source: "10.0.40.0/24"
                destination: "any"
                description: "IoT VLAN outbound NAT"
                
        - name: Configure outbound NAT rules
          uri:
            url: "https://{{ opnsense_host }}/api/firewall/nat/outbound/addRule"
            method: POST
            user: "{{ api_key }}"
            password: "{{ api_secret }}"
            force_basic_auth: true
            validate_certs: false
            body_format: json
            body:
              rule:
                interface: "{{ item.interface }}"
                source: "{{ item.source }}"
                destination: "{{ item.destination }}"
                description: "{{ item.description }}"
                nat_type: "interface"
                enabled: "1"
            status_code: [200, 201]
          loop: "{{ outbound_nat_rules }}"
          
        - name: Apply outbound NAT configuration
          uri:
            url: "https://{{ opnsense_host }}/api/firewall/nat/outbound/apply"
            method: POST
            user: "{{ api_key }}"
            password: "{{ api_secret }}"
            force_basic_auth: true
            validate_certs: false
            body_format: json
            body: {}
            status_code: 200
            
    - name: Apply all firewall changes
      uri:
        url: "https://{{ opnsense_host }}/api/firewall/filter/apply"
        method: POST
        user: "{{ api_key }}"
        password: "{{ api_secret }}"
        force_basic_auth: true
        validate_certs: false
        body_format: json
        body: {}
        status_code: 200
      register: apply_result
      
    - name: Create port forwarding documentation
      copy:
        content: |
          # Port Forwarding Configuration
          # Generated: {{ ansible_date_time.iso8601 }}
          
          ## Active Port Forwards
          {% if port_forwards | length > 0 %}
          {% for pf in port_forwards %}
          
          ### {{ pf.name }}
          - External Port: {{ pf.external_port }}
          - Internal IP: {{ pf.internal_ip }}
          - Internal Port: {{ pf.internal_port | default(pf.external_port) }}
          - Protocol: {{ pf.protocol | default('tcp') | upper }}
          - Description: {{ pf.description | default('N/A') }}
          {% if pf.source_ip is defined %}
          - Source Restriction: {{ pf.source_ip }}
          {% endif %}
          {% endfor %}
          {% else %}
          
          No port forwards configured.
          {% endif %}
          
          ## Outbound NAT Configuration
          
          All VLANs are configured with outbound NAT (SNAT) to the WAN interface:
          - Management VLAN (10.0.10.0/24) → WAN IP
          - Services VLAN (10.0.20.0/24) → WAN IP
          - LAN VLAN (10.0.30.0/24) → WAN IP
          - IoT VLAN (10.0.40.0/24) → WAN IP
          
          ## Security Considerations
          
          1. **Default Deny**: All inbound traffic is denied by default
          2. **Established Connections**: Return traffic for outbound connections is allowed
          3. **Logging**: All port forward connections are logged
          4. **NAT Reflection**: Enabled to allow internal access to forwarded services
          
          ## Testing Port Forwards
          
          From external network:
          ```bash
          # Test TCP port
          nc -zv <WAN_IP> <EXTERNAL_PORT>
          
          # Test with curl (HTTP/HTTPS)
          curl -v http://<WAN_IP>:<EXTERNAL_PORT>
          ```
          
          From internal network (NAT reflection):
          ```bash
          # Should work the same as external
          curl -v http://<WAN_IP>:<EXTERNAL_PORT>
          ```
          
          ## Adding New Port Forwards
          
          Use the port_forwards_json parameter with format:
          ```json
          [
            {
              "name": "Service Name",
              "external_port": "8080",
              "internal_ip": "10.0.20.100",
              "internal_port": "80",
              "protocol": "tcp",
              "description": "Forward port 8080 to internal web server"
            }
          ]
          ```
        dest: /opt/privatebox/docs/port-forwarding-config.md
        mode: '0644'
        
    - name: Create port forward testing script
      copy:
        content: |
          #!/bin/bash
          # Port Forward Testing Script
          # Generated: {{ ansible_date_time.iso8601 }}
          
          WAN_IP="{{ opnsense_host }}"
          
          echo "Testing Port Forwards on $WAN_IP"
          echo "================================"
          
          {% if port_forwards | length > 0 %}
          {% for pf in port_forwards %}
          echo ""
          echo "Testing: {{ pf.name }}"
          echo "External port {{ pf.external_port }} → {{ pf.internal_ip }}:{{ pf.internal_port | default(pf.external_port) }}"
          
          # Test connectivity
          timeout 2 nc -zv $WAN_IP {{ pf.external_port }} 2>&1
          if [ $? -eq 0 ]; then
              echo "✓ Port {{ pf.external_port }} is open"
          else
              echo "✗ Port {{ pf.external_port }} is not reachable"
          fi
          {% endfor %}
          {% else %}
          echo "No port forwards configured to test."
          {% endif %}
          
          echo ""
          echo "Testing outbound NAT..."
          echo "======================="
          
          # Test from each VLAN
          for vlan in "10.0.10.1" "10.0.20.1" "10.0.30.1" "10.0.40.1"; do
              echo "Testing from $vlan..."
              ssh -o ConnectTimeout=5 root@{{ opnsense_host }} \
                  "curl -s --interface $vlan https://api.ipify.org" 2>/dev/null
              if [ $? -eq 0 ]; then
                  echo "✓ Outbound NAT working for $vlan"
              else
                  echo "✗ Outbound NAT failed for $vlan"
              fi
          done
        dest: /opt/privatebox/scripts/test-port-forwards.sh
        mode: '0755'
        
    - name: Display completion information
      debug:
        msg:
          - "=========================================="
          - "Port Forwarding Configuration Complete!"
          - "=========================================="
          - ""
          - "Port forwards configured: {{ port_forwards | length }}"
          - ""
          - "{% if port_forwards | length > 0 %}"
          - "Active port forwards:"
          - "{% for pf in port_forwards %}"
          - "- {{ pf.name }}: {{ pf.external_port }} → {{ pf.internal_ip }}:{{ pf.internal_port | default(pf.external_port) }}"
          - "{% endfor %}"
          - "{% else %}"
          - "No port forwards configured."
          - "{% endif %}"
          - ""
          - "Outbound NAT configured for all VLANs"
          - ""
          - "Documentation:"
          - "- /opt/privatebox/docs/port-forwarding-config.md"
          - ""
          - "Test script:"
          - "- /opt/privatebox/scripts/test-port-forwards.sh"
          - ""
          - "Security notes:"
          - "- All inbound traffic denied by default"
          - "- Only configured ports are accessible"
          - "- All forwarded connections are logged"
          - ""
          - "Next steps:"
          - "- Test port forwards from external network"
          - "- Monitor firewall logs for connection attempts"
          - "- Run configure-vpn-rules.yml for VPN setup"
          - "=========================================="