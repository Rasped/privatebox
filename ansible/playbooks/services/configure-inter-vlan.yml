---
# Task 5.2: Implement Inter-VLAN Routing Rules
# Configure controlled VLAN communication based on security matrix
- name: "OPNsense: Configure Inter-VLAN Routing"
  hosts: container-host
  become: true
  gather_facts: true
  
  vars:
    service_name: "OPNsense Inter-VLAN Routing"
    service_description: "Configure controlled communication between VLANs with security zones"
    service_tag: "inter-vlan"
    
    # API credentials location
    api_key_file: "/etc/privatebox-opnsense-api-key"
    api_secret_file: "/etc/privatebox-opnsense-api-secret"
    
  vars_prompt:
    - name: opnsense_host
      prompt: "OPNsense IP address or hostname"
      private: no
      semaphore_type: "string"
      semaphore_required: true
      semaphore_description: "OPNsense IP address or hostname"
    - name: confirm_routing_changes
      prompt: "Confirm inter-VLAN routing changes"
      private: no
      default: "false"
      semaphore_type: "boolean"
      semaphore_required: true
      semaphore_default: false
      semaphore_description: "Confirm inter-VLAN routing changes"
  
  tasks:
    - name: Pre-flight checks
      block:
        - name: Verify confirmation
          assert:
            that:
              - confirm_routing_changes | bool
            fail_msg: "Routing changes not confirmed. Set confirm_routing_changes=true to proceed."
            
        - name: Load API credentials
          set_fact:
            api_key: "{{ lookup('file', api_key_file) | trim }}"
            api_secret: "{{ lookup('file', api_secret_file) | trim }}"
            
        - name: Test API connectivity
          uri:
            url: "https://{{ opnsense_host }}/api/core/system/status"
            method: GET
            user: "{{ api_key }}"
            password: "{{ api_secret }}"
            force_basic_auth: true
            validate_certs: false
            status_code: 200
          register: api_test
          
    - name: Configure Services VLAN rules
      block:
        - name: Define Services VLAN rules
          set_fact:
            services_rules:
              # Services to Internet - HTTPS
              - sequence: "200"
                action: "pass"
                interface: "SVC"
                source: "SVC_net"
                destination: "!RFC1918"
                destination_port: "443"
                protocol: "tcp"
                description: "200-SVC-INTERNET-HTTPS-ALLOW - Services to Internet HTTPS"
                log: "0"
                
              # Services to Internet - HTTP
              - sequence: "201"
                action: "pass"
                interface: "SVC"
                source: "SVC_net"
                destination: "!RFC1918"
                destination_port: "80"
                protocol: "tcp"
                description: "201-SVC-INTERNET-HTTP-ALLOW - Services to Internet HTTP"
                log: "0"
                
              # Services to Internet - DNS over TLS
              - sequence: "202"
                action: "pass"
                interface: "SVC"
                source: "SVC_net"
                destination: "!RFC1918"
                destination_port: "853"
                protocol: "tcp"
                description: "202-SVC-INTERNET-DNS-ALLOW - DNS over TLS"
                log: "0"
                
              # Services to Internet - NTP
              - sequence: "203"
                action: "pass"
                interface: "SVC"
                source: "SVC_net"
                destination: "!RFC1918"
                destination_port: "123"
                protocol: "udp"
                description: "203-SVC-INTERNET-NTP-ALLOW - NTP time sync"
                log: "0"
                
              # Block Services to Management
              - sequence: "210"
                action: "block"
                interface: "SVC"
                source: "SVC_net"
                destination: "MGMT_net"
                protocol: "any"
                description: "210-SVC-MGMT-DENY - Block services to management"
                log: "1"
                
              # Block Services to LAN
              - sequence: "211"
                action: "block"
                interface: "SVC"
                source: "SVC_net"
                destination: "LAN_net"
                protocol: "any"
                description: "211-SVC-LAN-DENY - Block services to LAN"
                log: "1"
                
              # Block Services to IoT
              - sequence: "212"
                action: "block"
                interface: "SVC"
                source: "SVC_net"
                destination: "IOT_net"
                protocol: "any"
                description: "212-SVC-IOT-DENY - Block services to IoT"
                log: "1"
                
        - name: Add Services VLAN rules
          uri:
            url: "https://{{ opnsense_host }}/api/firewall/filter/addRule"
            method: POST
            user: "{{ api_key }}"
            password: "{{ api_secret }}"
            force_basic_auth: true
            validate_certs: false
            body_format: json
            body:
              rule:
                sequence: "{{ item.sequence }}"
                action: "{{ item.action }}"
                interface: "{{ item.interface }}"
                direction: "in"
                ipprotocol: "inet"
                protocol: "{{ item.protocol }}"
                source: "{{ item.source }}"
                destination: "{{ item.destination }}"
                destination_port: "{{ item.destination_port | default('') }}"
                log: "{{ item.log | default('0') }}"
                description: "{{ item.description }}"
                enabled: "1"
            status_code: [200, 201]
          loop: "{{ services_rules }}"
          
    - name: Configure LAN VLAN rules
      block:
        - name: Define LAN VLAN rules
          set_fact:
            lan_rules:
              # LAN to AdGuard DNS
              - sequence: "300"
                action: "pass"
                interface: "LAN"
                source: "LAN_net"
                destination: "10.0.20.21"
                destination_port: "53"
                protocol: "udp,tcp"
                description: "300-LAN-SVC-DNS-ALLOW - LAN to AdGuard DNS"
                log: "0"
                
              # LAN to AdGuard WebUI
              - sequence: "301"
                action: "pass"
                interface: "LAN"
                source: "LAN_net"
                destination: "10.0.20.21"
                destination_port: "8080"
                protocol: "tcp"
                description: "301-LAN-SVC-WEBUI-ALLOW - LAN to AdGuard WebUI"
                log: "0"
                
              # LAN to Portainer
              - sequence: "302"
                action: "pass"
                interface: "LAN"
                source: "LAN_net"
                destination: "10.0.20.21"
                destination_port: "9000"
                protocol: "tcp"
                description: "302-LAN-SVC-PORTAINER-ALLOW - LAN to Portainer"
                log: "0"
                
              # LAN to Semaphore
              - sequence: "303"
                action: "pass"
                interface: "LAN"
                source: "LAN_net"
                destination: "10.0.20.21"
                destination_port: "3000"
                protocol: "tcp"
                description: "303-LAN-SVC-SEMAPHORE-ALLOW - LAN to Semaphore"
                log: "0"
                
              # LAN to Internet - Full access
              - sequence: "310"
                action: "pass"
                interface: "LAN"
                source: "LAN_net"
                destination: "!RFC1918"
                protocol: "any"
                description: "310-LAN-INTERNET-ANY-ALLOW - LAN full Internet access"
                log: "0"
                
              # Block LAN to Management
              - sequence: "320"
                action: "block"
                interface: "LAN"
                source: "LAN_net"
                destination: "MGMT_net"
                protocol: "any"
                description: "320-LAN-MGMT-DENY - Block LAN to management"
                log: "1"
                
              # Block LAN to IoT
              - sequence: "321"
                action: "block"
                interface: "LAN"
                source: "LAN_net"
                destination: "IOT_net"
                protocol: "any"
                description: "321-LAN-IOT-DENY - Block LAN to IoT"
                log: "1"
                
        - name: Add LAN VLAN rules
          uri:
            url: "https://{{ opnsense_host }}/api/firewall/filter/addRule"
            method: POST
            user: "{{ api_key }}"
            password: "{{ api_secret }}"
            force_basic_auth: true
            validate_certs: false
            body_format: json
            body:
              rule:
                sequence: "{{ item.sequence }}"
                action: "{{ item.action }}"
                interface: "{{ item.interface }}"
                direction: "in"
                ipprotocol: "inet"
                protocol: "{{ item.protocol }}"
                source: "{{ item.source }}"
                destination: "{{ item.destination }}"
                destination_port: "{{ item.destination_port | default('') }}"
                log: "{{ item.log | default('0') }}"
                description: "{{ item.description }}"
                enabled: "1"
            status_code: [200, 201]
          loop: "{{ lan_rules }}"
          
    - name: Configure IoT VLAN rules
      block:
        - name: Define IoT VLAN rules
          set_fact:
            iot_rules:
              # IoT to AdGuard DNS
              - sequence: "400"
                action: "pass"
                interface: "IOT"
                source: "IOT_net"
                destination: "10.0.20.21"
                destination_port: "53"
                protocol: "udp,tcp"
                description: "400-IOT-SVC-DNS-ALLOW - IoT to AdGuard DNS"
                log: "0"
                
              # IoT to Internet - HTTP
              - sequence: "401"
                action: "pass"
                interface: "IOT"
                source: "IOT_net"
                destination: "!RFC1918"
                destination_port: "80"
                protocol: "tcp"
                description: "401-IOT-INTERNET-HTTP-ALLOW - IoT HTTP updates"
                log: "0"
                
              # IoT to Internet - HTTPS
              - sequence: "402"
                action: "pass"
                interface: "IOT"
                source: "IOT_net"
                destination: "!RFC1918"
                destination_port: "443"
                protocol: "tcp"
                description: "402-IOT-INTERNET-HTTPS-ALLOW - IoT HTTPS"
                log: "0"
                
              # IoT to Internet - NTP
              - sequence: "403"
                action: "pass"
                interface: "IOT"
                source: "IOT_net"
                destination: "!RFC1918"
                destination_port: "123"
                protocol: "udp"
                description: "403-IOT-INTERNET-NTP-ALLOW - IoT NTP time sync"
                log: "0"
                
              # IoT to Internet - MQTT over TLS
              - sequence: "404"
                action: "pass"
                interface: "IOT"
                source: "IOT_net"
                destination: "!RFC1918"
                destination_port: "8883"
                protocol: "tcp"
                description: "404-IOT-INTERNET-MQTT-ALLOW - IoT MQTT over TLS"
                log: "0"
                
              # Block IoT to Management
              - sequence: "410"
                action: "block"
                interface: "IOT"
                source: "IOT_net"
                destination: "MGMT_net"
                protocol: "any"
                description: "410-IOT-MGMT-DENY - Block IoT to management"
                log: "1"
                
              # Block IoT to Services (except DNS already allowed)
              - sequence: "411"
                action: "block"
                interface: "IOT"
                source: "IOT_net"
                destination: "SVC_net"
                protocol: "any"
                description: "411-IOT-SVC-DENY - Block IoT to services (except DNS)"
                log: "1"
                
              # Block IoT to LAN
              - sequence: "412"
                action: "block"
                interface: "IOT"
                source: "IOT_net"
                destination: "LAN_net"
                protocol: "any"
                description: "412-IOT-LAN-DENY - Block IoT to LAN"
                log: "1"
                
        - name: Add IoT VLAN rules
          uri:
            url: "https://{{ opnsense_host }}/api/firewall/filter/addRule"
            method: POST
            user: "{{ api_key }}"
            password: "{{ api_secret }}"
            force_basic_auth: true
            validate_certs: false
            body_format: json
            body:
              rule:
                sequence: "{{ item.sequence }}"
                action: "{{ item.action }}"
                interface: "{{ item.interface }}"
                direction: "in"
                ipprotocol: "inet"
                protocol: "{{ item.protocol }}"
                source: "{{ item.source }}"
                destination: "{{ item.destination }}"
                destination_port: "{{ item.destination_port | default('') }}"
                log: "{{ item.log | default('0') }}"
                description: "{{ item.description }}"
                enabled: "1"
            status_code: [200, 201]
          loop: "{{ iot_rules }}"
          
    - name: Configure rate limiting
      block:
        - name: Create rate limit rules
          set_fact:
            rate_limit_rules:
              # DNS rate limiting
              - sequence: "800"
                action: "pass"
                interface: "any"
                destination_port: "53"
                protocol: "udp,tcp"
                description: "DNS rate limit - 100/sec per source"
                advanced:
                  max-src-conn-rate: "100/1"
                  max-src-conn: "150"
                  
              # SSH brute force protection
              - sequence: "801"
                action: "block"
                interface: "any"
                destination_port: "22"
                protocol: "tcp"
                description: "SSH brute force protection - 3/min"
                advanced:
                  max-src-conn-rate: "3/60"
                  max-src-conn: "5"
                  
              # HTTPS rate limiting
              - sequence: "802"
                action: "pass"
                interface: "any"
                destination_port: "443"
                protocol: "tcp"
                description: "HTTPS rate limit - 10/sec"
                advanced:
                  max-src-conn-rate: "10/1"
                  max-src-conn: "20"
                  
        # Note: Rate limiting configuration may require advanced API features
        # This is a placeholder for when the API supports advanced rule options
        
    - name: Apply firewall changes
      uri:
        url: "https://{{ opnsense_host }}/api/firewall/filter/apply"
        method: POST
        user: "{{ api_key }}"
        password: "{{ api_secret }}"
        force_basic_auth: true
        validate_certs: false
        body_format: json
        body: {}
        status_code: 200
      register: apply_result
      
    - name: Validate configuration
      block:
        - name: Get current firewall rules
          uri:
            url: "https://{{ opnsense_host }}/api/firewall/filter/searchRule"
            method: GET
            user: "{{ api_key }}"
            password: "{{ api_secret }}"
            force_basic_auth: true
            validate_certs: false
            status_code: 200
          register: current_rules
          
        - name: Count rules by VLAN
          set_fact:
            rule_counts:
              services: "{{ current_rules.json.rows | selectattr('description', 'match', '.*SVC.*') | list | length }}"
              lan: "{{ current_rules.json.rows | selectattr('description', 'match', '.*LAN.*') | list | length }}"
              iot: "{{ current_rules.json.rows | selectattr('description', 'match', '.*IOT.*') | list | length }}"
              
    - name: Create traffic flow documentation
      copy:
        content: |
          # Inter-VLAN Traffic Flow Documentation
          # Generated: {{ ansible_date_time.iso8601 }}
          
          ## Allowed Traffic Flows
          
          ### Services VLAN (10.0.20.0/24)
          - → Internet: HTTP (80), HTTPS (443), DNS-over-TLS (853), NTP (123)
          - ✗ Management VLAN: BLOCKED
          - ✗ LAN VLAN: BLOCKED
          - ✗ IoT VLAN: BLOCKED
          
          ### LAN VLAN (10.0.30.0/24)
          - → Internet: ALL PROTOCOLS
          - → Services VLAN: DNS (53), AdGuard WebUI (8080), Portainer (9000), Semaphore (3000)
          - ✗ Management VLAN: BLOCKED
          - ✗ IoT VLAN: BLOCKED
          
          ### IoT VLAN (10.0.40.0/24)
          - → Internet: HTTP (80), HTTPS (443), NTP (123), MQTT-TLS (8883)
          - → Services VLAN: DNS (53) only
          - ✗ Management VLAN: BLOCKED
          - ✗ LAN VLAN: BLOCKED
          
          ### Management VLAN (10.0.10.0/24)
          - → ALL: UNRESTRICTED ACCESS
          
          ## Security Zones
          
          1. **Trusted Zone**: Management VLAN
             - Full access to all resources
             - Used for infrastructure management only
          
          2. **Semi-Trusted Zone**: LAN VLAN
             - Full Internet access
             - Limited service access (DNS, web UIs)
             - Blocked from management and IoT
          
          3. **Restricted Zone**: Services VLAN
             - Limited Internet access (updates only)
             - No access to other VLANs
             - Hosts critical services
          
          4. **Untrusted Zone**: IoT VLAN
             - Minimal Internet access
             - DNS service only
             - Maximum isolation
             
          ## Rate Limiting
          
          - DNS: 100 queries/sec per source IP
          - SSH: 3 connections/min (brute force protection)
          - HTTPS: 10 connections/sec per source IP
        dest: /opt/privatebox/docs/inter-vlan-traffic-flows.md
        mode: '0644'
        
    - name: Display completion information
      debug:
        msg:
          - "=========================================="
          - "Inter-VLAN Routing Rules Configured!"
          - "=========================================="
          - ""
          - "Rules configured by VLAN:"
          - "- Services VLAN: {{ rule_counts.services | default(0) }} rules"
          - "- LAN VLAN: {{ rule_counts.lan | default(0) }} rules"
          - "- IoT VLAN: {{ rule_counts.iot | default(0) }} rules"
          - ""
          - "Traffic flows enabled:"
          - "- Services → Internet (limited ports)"
          - "- LAN → Internet (unrestricted)"
          - "- LAN → Services (DNS, UIs)"
          - "- IoT → Internet (limited ports)"
          - "- IoT → Services (DNS only)"
          - ""
          - "Security isolation enforced:"
          - "- No VLAN can access Management (except Management itself)"
          - "- Services isolated from LAN and IoT"
          - "- IoT isolated from all except DNS service"
          - ""
          - "Documentation created:"
          - "/opt/privatebox/docs/inter-vlan-traffic-flows.md"
          - ""
          - "Next steps:"
          - "- Test inter-VLAN connectivity"
          - "- Monitor firewall logs for denies"
          - "- Run configure-port-forwarding.yml if needed"
          - "=========================================="