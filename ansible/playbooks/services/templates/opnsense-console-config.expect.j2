#!/usr/bin/expect -f
#
# OPNsense Console Configuration Script
# Automates initial setup via serial console
#

set timeout 30
set vm_id {{ vm_id }}
set lan_ip "{{ lan_ip }}"
set lan_netmask "{{ lan_netmask }}"
set lan_gateway "{{ lan_gateway }}"
set ssh_key "{{ ssh_public_key }}"
set root_password "{{ opnsense_root_password | default('PrivateBox2024!') }}"

# Enable logging
log_file /tmp/opnsense-console-config.log

proc send_slowly {text} {
    foreach char [split $text ""] {
        send -- $char
        sleep 0.05
    }
}

send_user "Starting OPNsense console configuration for VM $vm_id\n"

# Connect to serial console
spawn qm terminal $vm_id

# Wait for boot to complete and login prompt
send_user "Waiting for OPNsense to boot...\n"
expect {
    timeout {
        send_user "ERROR: Timeout waiting for login prompt\n"
        exit 1
    }
    "login:" {
        send_user "Login prompt detected\n"
    }
}

# Login as root
send_slowly "root"
send "\r"
expect {
    timeout {
        send_user "ERROR: Timeout waiting for password prompt\n"
        exit 1
    }
    "Password:" {
        send_user "Entering default password\n"
    }
}
send_slowly "opnsense"
send "\r"

# Wait for menu
expect {
    timeout {
        send_user "ERROR: Timeout waiting for console menu\n"
        exit 1
    }
    "Enter an option:" {
        send_user "Console menu ready\n"
    }
}

# Configure LAN interface IP (option 2)
send_user "Configuring LAN interface IP address...\n"
send "2\r"

# Select LAN interface (1)
expect "Enter the number of the interface"
send "1\r"

# Configure IPv4 - NO DHCP
expect "Configure IPv4 address LAN interface via DHCP?"
send "n\r"

# Enter IP address
expect "Enter the new LAN IPv4 address"
send_slowly "$lan_ip"
send "\r"

# Enter subnet mask
expect "Enter the new LAN IPv4 subnet bit count"
send "$lan_netmask\r"

# Enter upstream gateway
expect {
    "Enter IPv4 upstream gateway address" {
        send_slowly "$lan_gateway"
        send "\r"
    }
    "upstream gateway" {
        send_slowly "$lan_gateway"
        send "\r"
    }
}

# Skip IPv6
expect "Configure IPv6"
send "n\r"

# No DHCP server on LAN
expect "Do you want to enable the DHCP server on LAN?"
send "n\r"

# Keep HTTPS for web GUI
expect "Revert to HTTP as the webConfigurator protocol?"
send "n\r"

# Press enter to continue
expect "Press <ENTER> to continue"
send "\r"

# Wait for menu again
expect {
    timeout {
        send_user "ERROR: Timeout waiting for menu after IP config\n"
        exit 1
    }
    "Enter an option:" {
        send_user "IP configuration complete\n"
    }
}

# Enter shell to configure SSH (option 8)
send_user "Entering shell to configure SSH...\n"
send "8\r"
expect {
    timeout {
        send_user "ERROR: Timeout waiting for shell prompt\n"
        exit 1
    }
    "#" {
        send_user "Shell access granted\n"
    }
}

# Enable SSH service
send_user "Enabling SSH service...\n"
send "echo 'sshd_enable=\"YES\"' >> /etc/rc.conf.d/sshd\r"
expect "#"

# Configure SSH for root access and key authentication
send "cat > /usr/local/etc/ssh/sshd_config << 'EOF'\r"
send "Port 22\r"
send "PermitRootLogin yes\r"
send "PubkeyAuthentication yes\r"
send "PasswordAuthentication no\r"
send "ChallengeResponseAuthentication no\r"
send "UsePAM yes\r"
send "Subsystem sftp /usr/libexec/sftp-server\r"
send "EOF\r"
expect "#"

# Create SSH directory and add key
send_user "Adding SSH key...\n"
send "mkdir -p /root/.ssh\r"
expect "#"
send "chmod 700 /root/.ssh\r"
expect "#"

# Add SSH public key
send "cat > /root/.ssh/authorized_keys << 'EOF'\r"
send "$ssh_key\r"
send "EOF\r"
expect "#"

send "chmod 600 /root/.ssh/authorized_keys\r"
expect "#"

# Start SSH service
send_user "Starting SSH service...\n"
send "service sshd start\r"
expect "#"

# Set root password
send_user "Setting root password...\n"
send "passwd\r"
expect "New Password:"
send_slowly "$root_password"
send "\r"
expect "Retype New Password:"
send_slowly "$root_password"
send "\r"
expect "#"

# Ensure changes persist
send "sync\r"
expect "#"

# Exit shell
send_user "Exiting shell...\n"
send "exit\r"
expect "Enter an option:"

# Exit console menu (option 0)
send "0\r"

# Disconnect from terminal
send "\x0f"  ;# Ctrl-O to exit qm terminal

send_user "\n===========================================\n"
send_user "OPNsense configuration complete!\n"
send_user "IP Address: $lan_ip\n"
send_user "SSH should now be available\n"
send_user "===========================================\n"

exit 0