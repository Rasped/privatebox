---
- name: "DynDNS 3: Configure AdGuard"
  hosts: localhost
  connection: local
  gather_facts: no

  vars:
    # Template configuration for Semaphore
    template_config:
      semaphore_environment: "ServicePasswords"
      semaphore_inventory: "localhost"
      semaphore_category: "services"

    # Config file location (from ddns-2b)
    ddns_config_file: "/tmp/ddns-handoff.json"

    # AdGuard configuration
    adguard_ip: "10.10.20.10"
    adguard_port: 3443
    adguard_url: "https://{{ adguard_ip }}:{{ adguard_port }}"
    adguard_username: "admin"
    adguard_password: "{{ SERVICES_PASSWORD | default('changeme') }}"

    # Default services to configure
    default_services:
      - portainer
      - semaphore
      - adguard
      - headplane
      - homer

    enable_debug: true

  tasks:
    # ============================================
    # Phase 1: Read Config File
    # ============================================

    - name: Check if config file exists
      stat:
        path: "{{ ddns_config_file }}"
      register: config_stat

    - name: Fail if config file not found
      fail:
        msg: |
          DynDNS config file not found at {{ ddns_config_file }}
          Please run 'DynDNS 2b: Configure OPNsense' first.
      when: not config_stat.stat.exists

    - name: Read DynDNS config
      slurp:
        src: "{{ ddns_config_file }}"
      register: ddns_config_raw
      no_log: true

    - name: Parse DynDNS config
      set_fact:
        ddns_config: "{{ ddns_config_raw.content | b64decode | from_json }}"
      no_log: true

    - name: Set domain from config
      set_fact:
        ddns_domain: "{{ ddns_config.ddns_domain }}"

    # ============================================
    # Phase 2: Validation
    # ============================================

    - name: Display configuration header
      debug:
        msg:
          - "========================================"
          - "   ADGUARD DNS REWRITES CONFIGURATION"
          - "========================================"
          - "Domain: {{ ddns_domain }}"
          - "AdGuard: {{ adguard_url }}"

    - name: Validate SERVICES_PASSWORD is set
      fail:
        msg: |
          SERVICES_PASSWORD not found in ServicePasswords environment.
          This playbook requires the ServicePasswords environment.
      when: adguard_password == 'changeme'

    # ============================================
    # Phase 3: Check AdGuard API Connectivity
    # ============================================

    - name: Test AdGuard API authentication
      uri:
        url: "{{ adguard_url }}/control/status"
        validate_certs: no
        method: GET
        user: "{{ adguard_username }}"
        password: "{{ adguard_password }}"
        force_basic_auth: true
        status_code: 200
      register: adguard_status

    - name: Display AdGuard status
      debug:
        msg: "✓ AdGuard API authenticated successfully (version {{ adguard_status.json.version }})"
      when: enable_debug | bool

    # ============================================
    # Phase 4: Get Existing DNS Rewrites
    # ============================================

    - name: Get existing DNS rewrites
      uri:
        url: "{{ adguard_url }}/control/rewrite/list"
        validate_certs: no
        method: GET
        user: "{{ adguard_username }}"
        password: "{{ adguard_password }}"
        force_basic_auth: true
        status_code: 200
      register: existing_rewrites

    - name: Display existing rewrites count
      debug:
        msg: "Found {{ existing_rewrites.json | length }} existing DNS rewrites"
      when: enable_debug | bool

    # ============================================
    # Phase 5: Add DNS Rewrites for Custom Domain
    # ============================================

    - name: Display rewrites to add
      debug:
        msg: "Will add {{ default_services | length }} DNS rewrites for {{ ddns_domain }}"
      when: enable_debug | bool

    - name: Add DNS rewrites for custom domain
      uri:
        url: "{{ adguard_url }}/control/rewrite/add"
        validate_certs: no
        method: POST
        user: "{{ adguard_username }}"
        password: "{{ adguard_password }}"
        force_basic_auth: true
        body_format: json
        body:
          domain: "{{ item }}.{{ ddns_domain }}"
          answer: "{{ adguard_ip }}"
        status_code: 200
      register: rewrite_result
      loop: "{{ default_services }}"
      loop_control:
        label: "{{ item }}.{{ ddns_domain }} → {{ adguard_ip }}"
      ignore_errors: true  # Continue if rewrite already exists

    - name: Display rewrite results
      debug:
        msg:
          - "Successfully added {{ rewrite_result.results | selectattr('status', 'equalto', 200) | list | length }} DNS rewrites"
          - "Skipped {{ rewrite_result.results | rejectattr('status', 'equalto', 200) | list | length }} (already exist or failed)"
      when: enable_debug | bool

    # ============================================
    # Phase 6: Verification
    # ============================================

    - name: Get updated DNS rewrites list
      uri:
        url: "{{ adguard_url }}/control/rewrite/list"
        validate_certs: no
        method: GET
        user: "{{ adguard_username }}"
        password: "{{ adguard_password }}"
        force_basic_auth: true
        status_code: 200
      register: updated_rewrites

    - name: Filter custom domain rewrites
      set_fact:
        custom_rewrites: >-
          {{
            updated_rewrites.json |
            selectattr('domain', 'search', ddns_domain) |
            list
          }}

    - name: Display custom domain rewrites
      debug:
        msg:
          - "Custom domain rewrites ({{ custom_rewrites | length }}):"
          - "{{ custom_rewrites | map(attribute='domain') | list }}"
      when: enable_debug | bool

    - name: Verify all expected rewrites exist
      assert:
        that:
          - custom_rewrites | length >= default_services | length
        fail_msg: "Not all expected rewrites were added"
        success_msg: "✓ All expected rewrites verified"

    # ============================================
    # Phase 7: Display Summary
    # ============================================

    - name: Display final summary
      debug:
        msg:
          - "========================================"
          - "   ADGUARD DNS REWRITES - COMPLETE"
          - "========================================"
          - ""
          - "Custom Domain: {{ ddns_domain }}"
          - "DNS Rewrites Added: {{ rewrite_result.results | selectattr('status', 'equalto', 200) | list | length }}"
          - "Total Custom Rewrites: {{ custom_rewrites | length }}"
          - ""
          - "Services Now Accessible Via:"
          - "{% for service in default_services %}  - https://{{ service }}.{{ ddns_domain }}{% endfor %}"
          - ""
          - "Note:"
          - "  • These domains resolve internally to {{ adguard_ip }}"
          - "  • Existing .lan domains remain unchanged"
          - "  • External access requires Tailscale VPN"
          - ""
          - "Next Steps:"
          - "  1. Run 'DynDNS 4: Configure Caddy Let's Encrypt' to get valid certificates"
          - "  2. Services will be accessible with trusted TLS certificates"
          - ""
          - "========================================"
