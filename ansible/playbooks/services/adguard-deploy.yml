---
# Semaphore metadata for template generation
# metadata:
#   description: "Deploy AdGuard Home DNS filtering service"
#   semaphore_environment: "ServicePasswords"

- name: "AdGuard: Deploy Container Service"
  hosts: container-host
  become: true
  gather_facts: true
  
  vars:
    service_name: "AdGuard Home"
    service_description: "Network-wide ads & trackers blocking DNS server"
    service_tag: "adguard"
    
    # AdGuard default configuration - can be overridden by group_vars
    adguard_image: "adguard/adguardhome"
    adguard_version: "latest"
    adguard_web_port: 8080      # Web interface port
    adguard_dns_port: 53        # DNS service port
    adguard_dns_port_udp: 53    # DNS service UDP port
    adguard_setup_port: 3001    # Initial setup port
    adguard_dns_over_tls: 853   # DNS-over-TLS port
    adguard_data_dir: "/opt/privatebox/data/adguard"
    adguard_config_dir: "/opt/privatebox/config/adguard"
    
    # Default values for hands-off deployment (no prompts)
    confirm_deploy: true
    custom_web_port: "{{ adguard_web_port }}"
    
    # AdGuard admin credentials
    adguard_admin_username: "admin"
    # Use SERVICES_PASSWORD from Semaphore environment
    adguard_admin_password: "{{ lookup('env', 'SERVICES_PASSWORD') }}"
    
    # Quadlet configuration
    use_system_quadlet: true
    quadlet_system_path: "/etc/containers/systemd"
    quadlet_user_path: "{{ ansible_env.HOME }}/.config/containers/systemd"
    
    # Container runtime configuration
    container_image_registry: "docker.io"
    volume_mount_options: "Z"
    timezone: "UTC"
    container_security_label_disable: false
    container_no_new_privileges: true
    container_drop_capabilities: []
    # AdGuard needs root to bind to port 53, so we don't use user namespaces
    # container_user_namespace: "keep-id"
    
    # Health check configuration
    health_check_interval: "30s"
    health_check_retries: 3
    health_check_start_period: "60s"
    health_check_timeout: "10s"
    
    # Container management configuration
    container_log_driver: "journald"
    container_pull_policy: "missing"
    container_restart_policy: "always"
    container_restart_sec: 30
    
    # Systemd configuration
    systemd_timeout_start_sec: 900
    systemd_timeout_stop_sec: 90
    

  tasks:
    # Pre-deployment validation
    - name: "{{ service_name }} - Pre-deployment checks"
      when: confirm_deploy | bool
      tags: [adguard, preflight]
      block:
        - name: Check system requirements
          assert:
            that:
              - ansible_distribution == "Ubuntu"
              - ansible_distribution_version is version('22.04', '>=')
            fail_msg: "This playbook requires Ubuntu 22.04 or later"
            
        - name: Check if Podman is installed
          command: which podman
          register: podman_check
          changed_when: false
          failed_when: false
          
        - name: Install Podman if not present
          when: podman_check.rc != 0
          block:
            - name: Update apt cache
              apt:
                update_cache: yes
                cache_valid_time: 3600
                
            - name: Install Podman
              apt:
                name:
                  - podman
                  - podman-compose
                  - containernetworking-plugins
                state: present
                
        - name: Check Podman version
          command: podman --version
          register: podman_version
          changed_when: false
          
        - name: Display Podman version
          debug:
            msg: "Podman version: {{ podman_version.stdout }}"
            
        # Note: systemd-resolved handling moved to activate-adguard-dns.yml
        # This keeps the VM's DNS independent during deployment
        - name: Check for port conflicts
          wait_for:
            port: "{{ item }}"
            state: stopped
            timeout: 1
          loop:
            - "{{ custom_web_port }}"
            - "{{ adguard_dns_port }}"
            - "{{ adguard_setup_port }}"
          ignore_errors: true
          register: port_check
          
        - name: Warn about port conflicts
          debug:
            msg: "WARNING: Port {{ item.item }} appears to be in use. Service may fail to start."
          loop: "{{ port_check.results }}"
          when: item.failed is defined and not item.failed

    # Main deployment
    - name: "{{ service_name }} - Deployment"
      when: confirm_deploy | bool
      tags: [adguard, deploy]
      block:
        - name: Create directory structure
          file:
            path: "{{ item.path }}"
            state: directory
            owner: "{{ item.owner | default(ansible_user) }}"
            group: "{{ item.group | default(ansible_user) }}"
            mode: "{{ item.mode | default('0755') }}"
          loop:
            - { path: "{{ adguard_data_dir }}" }
            - { path: "{{ adguard_config_dir }}" }
            - { path: "{{ quadlet_system_path if use_system_quadlet else quadlet_user_path }}" }
            
        - name: Set SELinux context for data directories
          when: ansible_selinux.status is defined and ansible_selinux.status == "enabled"
          command: |
            chcon -R -t container_file_t {{ item }}
          loop:
            - "{{ adguard_data_dir }}"
            - "{{ adguard_config_dir }}"
          changed_when: true
            
        - name: Deploy Quadlet unit file
          template:
            src: ../../files/quadlet/adguard.container.j2
            dest: "{{ quadlet_system_path if use_system_quadlet else quadlet_user_path }}/adguard.container"
            owner: root
            group: root
            mode: '0644'
          register: quadlet_deployed
          
        - name: Reload systemd daemon
          systemd:
            daemon_reload: true
          when: quadlet_deployed.changed
            
        - name: Enable AdGuard Home service
          systemd:
            name: adguard.service
            enabled: true
            scope: "{{ 'system' if use_system_quadlet else 'user' }}"
            
        - name: Start AdGuard Home service
          systemd:
            name: adguard.service
            state: started
            scope: "{{ 'system' if use_system_quadlet else 'user' }}"
          register: service_start
          
        - name: Wait for AdGuard Home to be ready
          uri:
            url: "http://{{ ansible_default_ipv4.address }}:{{ custom_web_port }}/"
            status_code: [200, 302]  # 302 is expected for initial setup redirect
            follow_redirects: none  # Don't follow to /install.html
            timeout: 10
          register: adguard_ready
          until: adguard_ready.status in [200, 302]
          retries: 6
          delay: 10
          when: service_start.changed

        - name: Configure firewall for AdGuard
          block:
            - name: Check if ufw is installed
              command: which ufw
              register: ufw_check
              changed_when: false
              failed_when: false
              
            - name: Configure ufw firewall rules
              when: ufw_check.rc == 0
              block:
                - name: Allow AdGuard web interface
                  ufw:
                    rule: allow
                    port: "{{ custom_web_port }}"
                    proto: tcp
                    comment: "AdGuard Home Web UI"
                    
                - name: Allow DNS TCP
                  ufw:
                    rule: allow
                    port: "{{ adguard_dns_port }}"
                    proto: tcp
                    comment: "AdGuard DNS TCP"
                    
                - name: Allow DNS UDP
                  ufw:
                    rule: allow
                    port: "{{ adguard_dns_port_udp }}"
                    proto: udp
                    comment: "AdGuard DNS UDP"
                    
                - name: Allow DNS-over-TLS if configured
                  ufw:
                    rule: allow
                    port: "{{ adguard_dns_over_tls }}"
                    proto: tcp
                    comment: "AdGuard DNS-over-TLS"
                  when: adguard_dns_over_tls is defined
                  
                - name: Note firewall configuration
                  debug:
                    msg: "Firewall rules configured for AdGuard Home services"
              rescue:
                - name: Note firewall configuration failure
                  debug:
                    msg: "Warning: Failed to configure firewall rules. Please configure manually if needed."

    # Post-deployment validation
    - name: "{{ service_name }} - Post-deployment validation"
      when: confirm_deploy | bool
      tags: [adguard, validate]
      block:
        - name: Check service status
          systemd:
            name: adguard.service
            scope: "{{ 'system' if use_system_quadlet else 'user' }}"
          register: service_status
          
        - name: Verify service is active
          assert:
            that:
              - service_status.status.ActiveState == "active"
            fail_msg: "AdGuard Home service is not active"
            
        - name: Check container status
          command: podman ps --filter "name=adguard-home" --format json
          register: container_status
          changed_when: false
          
        - name: Parse container info
          set_fact:
            container_info: "{{ container_status.stdout | from_json | first | default({}) }}"
          when: container_status.stdout
          
        - name: Display container status
          debug:
            msg:
              - "Container: {{ container_info.Names | default(['Not found']) | first }}"
              - "Status: {{ container_info.State | default('Unknown') }}"
              - "Image: {{ container_info.Image | default('Unknown') }}"
          when: container_info is defined
          
        - name: Note about DNS configuration
          debug:
            msg: "DNS will be configured automatically after AdGuard setup"
            
    # Display access information
    - name: "{{ service_name }} - Access information"
      when: confirm_deploy | bool
      tags: [adguard, info]
      block:
        - name: Generate service information
          set_fact:
            service_info:
              name: "{{ service_name }}"
              status: "{{ 'Active' if service_status.status.ActiveState == 'active' else 'Inactive' }}"
              web_url: "http://{{ ansible_default_ipv4.address }}:{{ custom_web_port }}"
              dns_server: "{{ ansible_default_ipv4.address }}"
              dns_port: "{{ adguard_dns_port }}"
              
        - name: Display access information
          debug:
            msg:
              - "=========================================="
              - "{{ service_name }} Deployment Complete!"
              - "=========================================="
              - ""
              - "Service Status: {{ service_info.status }}"
              - "DNS Status: Running on port {{ adguard_dns_port }}"
              - "System DNS: Not modified (run activate-adguard-dns.yml to activate)"
              - ""
              - "Web Interface: {{ service_info.web_url }}"
              - "Username: {{ adguard_admin_username }}"
              - "Password: Using SERVICES_PASSWORD from Semaphore"
              - ""
              - "DNS Server: {{ service_info.dns_server }}:{{ service_info.dns_port }}"
              - ""
              - "To use AdGuard as your DNS:"
              - "- Router: Set DNS to {{ service_info.dns_server }}"
              - "- Individual devices: Use {{ service_info.dns_server }}:{{ service_info.dns_port }}"
              - ""
              - "Service Management:"
              - "- Status: sudo systemctl status adguard-container"
              - "- Logs: sudo podman logs adguard-home"
              - "- Restart: sudo systemctl restart adguard-container"
              - "=========================================="
              
        - name: Save deployment info
          copy:
            content: |
              {{ service_name }} Deployment Information
              =====================================
              Deployed: {{ ansible_date_time.iso8601 }}
              Host: {{ inventory_hostname }}
              
              Access URLs:
              - Web Interface: {{ service_info.web_url }}
              - DNS Server: {{ service_info.dns_server }}:{{ service_info.dns_port }}
              
              Service: adguard.service
              Container: adguard-home
              
              Data Directory: {{ adguard_data_dir }}
              Config Directory: {{ adguard_config_dir }}
            dest: "/opt/privatebox/deployment-info-adguard.txt"
            mode: '0644'

    # Automatic AdGuard configuration
    - name: "{{ service_name }} - Automatic configuration"
      when: confirm_deploy | bool
      tags: [adguard, configure]
      block:
        - name: Wait for AdGuard API to be available
          uri:
            url: "http://{{ ansible_default_ipv4.address }}:{{ custom_web_port }}/control/status"
            method: GET
            status_code: [200, 302]
            follow_redirects: none
            timeout: 10
          register: api_status
          until: api_status.status in [200, 302]
          retries: 12
          delay: 5
          
        - name: Check if AdGuard is already configured
          uri:
            url: "http://{{ ansible_default_ipv4.address }}:{{ custom_web_port }}/control/status"
            method: GET
            follow_redirects: none
          register: status_check
          failed_when: false
          
        - name: Configure AdGuard if not already configured
          when: status_check.status == 302 or (status_check.json is defined and not status_check.json.protection_enabled | default(false))
          block:
            - name: Check initial configuration
              uri:
                url: "http://{{ ansible_default_ipv4.address }}:{{ custom_web_port }}/control/install/check_config"
                method: POST
                body_format: json
                body:
                  web:
                    port: 3000
                    ip: "0.0.0.0"
                  dns:
                    port: "{{ adguard_dns_port }}"
                    ip: "0.0.0.0"
                    autofix: false
                  set_static_ip: false
                status_code: 200
              register: config_check
              
            - name: Apply AdGuard configuration
              uri:
                url: "http://{{ ansible_default_ipv4.address }}:{{ custom_web_port }}/control/install/configure"
                method: POST
                body_format: json
                body:
                  web:
                    port: 3000
                    ip: "0.0.0.0"
                  dns:
                    port: "{{ adguard_dns_port }}"
                    ip: "0.0.0.0"
                  username: "{{ adguard_admin_username }}"
                  password: "{{ adguard_admin_password }}"
                status_code: 200
                timeout: 30
              register: configure_result
              
            - name: Wait for AdGuard to restart after configuration
              pause:
                seconds: 20
                
            - name: Verify AdGuard is now configured and running
              uri:
                url: "http://{{ ansible_default_ipv4.address }}:{{ custom_web_port }}/control/status"
                method: GET
                user: "{{ adguard_admin_username }}"
                password: "{{ adguard_admin_password }}"
                force_basic_auth: true
                status_code: 200
              register: final_status
              until: final_status.status == 200
              retries: 5
              delay: 5
              
            - name: Display configuration status
              debug:
                msg: "AdGuard is now configured. DNS port: {{ final_status.json.dns_port }}, Protection enabled: {{ final_status.json.protection_enabled }}"
                
        - name: Configure recommended settings
          when: status_check.status != 302
          block:
            - name: Enable protection if not already enabled
              uri:
                url: "http://{{ ansible_default_ipv4.address }}:{{ custom_web_port }}/control/protection"
                method: POST
                user: "{{ adguard_admin_username }}"
                password: "{{ adguard_admin_password }}"
                force_basic_auth: true
                body_format: json
                body:
                  enabled: true
                status_code: 200
              register: protection_result
              failed_when: false
              
            - name: Configure upstream DNS servers
              uri:
                url: "http://{{ ansible_default_ipv4.address }}:{{ custom_web_port }}/control/dns_config"
                method: POST
                user: "{{ adguard_admin_username }}"
                password: "{{ adguard_admin_password }}"
                force_basic_auth: true
                body_format: json
                body:
                  upstream_dns:
                    - "https://cloudflare-dns.com/dns-query"
                    - "https://dns.quad9.net/dns-query"
                    - "tls://1.1.1.1"
                    - "tls://9.9.9.9"
                  bootstrap_dns:
                    - "1.1.1.1"
                    - "9.9.9.9"
                    - "8.8.8.8"
                status_code: 200
              register: dns_config_result
              failed_when: false
              
        - name: Update system DNS to use AdGuard
          block:
            - name: Test DNS resolution through AdGuard
              command: >
                dig @{{ ansible_default_ipv4.address }} -p {{ adguard_dns_port }} 
                +short +time=2 google.com
              register: dns_test_post_config
              changed_when: false
              failed_when: false
              
            # Note: System DNS configuration moved to activate-adguard-dns.yml
            # This keeps deployment independent of DNS changes

  handlers:
    - name: restart adguard
      systemd:
        name: adguard.service
        state: restarted
        scope: "{{ 'system' if use_system_quadlet else 'user' }}"