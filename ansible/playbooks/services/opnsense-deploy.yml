---
- name: OPNsense: Deploy VM
  hosts: proxmox
  gather_facts: false
  
  vars:
    vm_name: "opnsense"
    opnsense_version: "24.7"
    min_memory_mb: 2048
    min_cpus: 1
    optimal_memory_mb: 4096
    optimal_cpus: 2    
  tasks:
    - name: Load discovery data
      include_vars:
        file: "/opt/privatebox/ansible/host_vars/proxmox/discovered.yml"
        name: discovery
      delegate_to: localhost
      
    - name: Load network plan
      include_vars:
        file: "/opt/privatebox/ansible/group_vars/all/network_plan.yml"
        name: network
      delegate_to: localhost
      
    - name: Allocate VM ID
      include_tasks: ../../tasks/allocate-vmid.yml
      vars:
        preferred_vmid: 100
        vmid_start: 100
        vmid_max: 199
        
    - name: Calculate optimal resources
      set_fact:
        vm_memory: >-
          {{
            [
              [
                (discovery.resources.available_memory_gb | int * 0.25 * 1024) | int,
                optimal_memory_mb
              ] | min,
              min_memory_mb
            ] | max
          }}
        vm_cpus: >-
          {{
            [
              [
                (discovery.resources.available_cpus | int * 0.5) | int,
                optimal_cpus
              ] | min,
              min_cpus
            ] | max
          }}
          
    - name: Check if VM already exists
      shell: qm list | grep -w "{{ allocated_vmid }}" | grep -w "{{ vm_name }}"
      register: vm_exists
      failed_when: false
      changed_when: false
      
    - name: Stop existing VM if running
      shell: qm stop {{ allocated_vmid }} --timeout 30
      when: vm_exists.rc == 0
      failed_when: false
      
    - name: Destroy existing VM
      shell: qm destroy {{ allocated_vmid }} --purge
      when: vm_exists.rc == 0
      
    - name: Verify image exists
      stat:
        path: "/var/lib/vz/template/iso/OPNsense-{{ opnsense_version }}-vm-amd64.qcow2"
      register: image_file
      
    - name: Fail if image missing
      fail:
        msg: "OPNsense image not found. Run opnsense-image.yml first."
      when: not image_file.stat.exists
      
    - name: Create VM using shell commands
      shell: |
        # Create VM with basic settings
        qm create {{ allocated_vmid }} \
          --name {{ vm_name }} \
          --memory {{ vm_memory }} \
          --cores {{ vm_cpus }} \
          --cpu host \
          --ostype l26 \
          --scsihw virtio-scsi-single \
          --boot order=scsi0 \
          --agent 1 \
          --onboot 1 \
          --balloon 0
          
    - name: Import disk image
      shell: |
        # Import the OPNsense disk image
        qm importdisk {{ allocated_vmid }} \
          "/var/lib/vz/template/iso/OPNsense-{{ opnsense_version }}-vm-amd64.qcow2" \
          {{ discovery.storage.preferred }}
      register: disk_import
      
    - name: Extract disk ID from import output
      set_fact:
        imported_disk: >-
          {{
            disk_import.stdout_lines |
            select('match', '.*successfully imported.*') |
            first |
            regex_search('as \'(.*?)\'') |
            regex_replace('as \'(.*?)\'', '\1')
          }}
      when: disk_import.rc == 0
      
    - name: Attach imported disk to VM
      shell: |
        qm set {{ allocated_vmid }} \
          --scsi0 {{ discovery.storage.preferred }}:{{ allocated_vmid }}/{{ imported_disk }},size=16G
      when: imported_disk is defined
      
    - name: Optimize disk configuration
      include_tasks: ../../tasks/optimize-vm-disk.yml
      vars:
        vm_id: "{{ allocated_vmid }}"
        storage_pool: "{{ discovery.storage.preferred }}"
        
    - name: Configure network interfaces with VLANs
      block:
        - name: Check if bridge is VLAN-aware
          shell: |
            bridge -d vlan show dev {{ network.vlan_bridge }} 2>/dev/null | grep -q "filtering" && echo "yes" || echo "no"
          register: bridge_vlan_aware
          
        - name: Make bridge VLAN-aware if needed
          lineinfile:
            path: /etc/network/interfaces
            regexp: "^iface {{ network.vlan_bridge }}"
            line: "iface {{ network.vlan_bridge }} inet manual"
            insertafter: "^iface {{ network.vlan_bridge }}"
            firstmatch: true
          when: bridge_vlan_aware.stdout == "no"
          
        - name: Add VLAN awareness to bridge
          lineinfile:
            path: /etc/network/interfaces
            insertafter: "^iface {{ network.vlan_bridge }}"
            line: "\tbridge-vlan-aware yes"
          when: bridge_vlan_aware.stdout == "no"
          
        - name: Add VLAN range to bridge
          lineinfile:
            path: /etc/network/interfaces
            insertafter: "bridge-vlan-aware yes"
            line: "\tbridge-vids 2-4094"
          when: bridge_vlan_aware.stdout == "no"
          
        - name: Restart networking if changes made
          shell: |
            ifreload -a
          when: bridge_vlan_aware.stdout == "no"
          
        - name: Configure VM network interfaces
          shell: |
            # WAN interface - simple bridge
            qm set {{ allocated_vmid }} \
              --net0 virtio,bridge={{ discovery.network.bridges[0] | default('vmbr0') }},firewall=1
            
            # LAN interface - VLAN trunk
            qm set {{ allocated_vmid }} \
              --net1 virtio,bridge={{ network.vlan_bridge }},firewall=1,trunks={{ network.vlan_ids.values() | join(';') }}
              
        - name: Generate optimal MAC addresses
          set_fact:
            wan_mac: "{{ '52:54:00' | community.general.random_mac(seed=allocated_vmid~'wan') }}"
            lan_mac: "{{ '52:54:00' | community.general.random_mac(seed=allocated_vmid~'lan') }}"
            
        - name: Set predictable MAC addresses
          shell: |
            qm set {{ allocated_vmid }} \
              --net0 virtio,bridge={{ discovery.network.bridges[0] | default('vmbr0') }},firewall=1,macaddr={{ wan_mac }}
            qm set {{ allocated_vmid }} \
              --net1 virtio,bridge={{ network.vlan_bridge }},firewall=1,trunks={{ network.vlan_ids.values() | join(';') }},macaddr={{ lan_mac }}
              
        - name: Configure interface descriptions
          shell: |
            # Add comments to help identify interfaces
            qm set {{ allocated_vmid }} --description "$(qm config {{ allocated_vmid }} | grep ^description | cut -d' ' -f2-)
            
            Network Interfaces:
            - net0: WAN ({{ wan_mac }}) on {{ discovery.network.bridges[0] | default('vmbr0') }}
            - net1: LAN ({{ lan_mac }}) on {{ network.vlan_bridge }} with VLANs {{ network.vlan_ids.values() | join(', ') }}"
            
        - name: Save network configuration
          copy:
            content: |
              # OPNsense Network Configuration
              wan:
                bridge: {{ discovery.network.bridges[0] | default('vmbr0') }}
                mac: {{ wan_mac }}
                type: dhcp
              lan:
                bridge: {{ network.vlan_bridge }}
                mac: {{ lan_mac }}
                type: trunk
                vlans:
              {% for name, id in network.vlan_ids.items() %}
                  - id: {{ id }}
                    name: {{ name }}
                    subnet: {{ network.vlan_networks[name] }}
                    gateway: {{ network.ip_assignments.opnsense[name] }}
              {% endfor %}
            dest: "/etc/pve/nodes/{{ ansible_hostname }}/qemu-server/{{ allocated_vmid }}.network"
            mode: '0644'
            
    - name: Set VM startup order
      shell: |
        qm set {{ allocated_vmid }} --startup order=1,up=30
        
    - name: Create cloud-init drive if supported
      shell: |
        qm set {{ allocated_vmid }} --ide2 {{ discovery.storage.preferred }}:cloudinit
      failed_when: false
      
    - name: Start OPNsense VM
      shell: qm start {{ allocated_vmid }}
      
    - name: Wait for VM to start
      shell: |
        for i in {1..30}; do
          qm status {{ allocated_vmid }} | grep -q "status: running" && exit 0
          sleep 2
        done
        exit 1
        
    - name: Display VM information
      debug:
        msg:
          - "OPNsense VM deployed successfully!"
          - "VM ID: {{ allocated_vmid }}"
          - "VM Name: {{ vm_name }}"
          - "CPU Cores: {{ vm_cpus }}"
          - "Memory: {{ vm_memory }}MB"
          - "Storage: {{ discovery.storage.preferred }}"
          - "WAN Interface: {{ discovery.network.bridges[0] | default('vmbr0') }} (DHCP)"
          - "LAN Interface: {{ network.vlan_bridge }} (VLAN Trunk)"
          - "VLANs: {{ network.vlan_ids | dict2items | map(attribute='key') | join(', ') }}"
          - ""
          - "Next steps:"
          - "1. Console into VM: qm console {{ allocated_vmid }}"
          - "2. Complete initial OPNsense setup wizard"
          - "3. Configure VLAN interfaces in OPNsense"
          - "4. Run ansible playbook for OPNsense configuration"