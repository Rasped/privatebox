---
- name: Manage OPNsense Image
  hosts: proxmox
  gather_facts: false
  
  vars:
    opnsense_version: "24.7"
    image_filename: "OPNsense-{{ opnsense_version }}-vm-amd64.qcow2"
    mirrors:
      - name: "Official EU"
        url: "https://mirror.dns-root.de/opnsense/releases/{{ opnsense_version }}/{{ image_filename }}"
      - name: "Official US"
        url: "https://opnsense.aivian.org/releases/{{ opnsense_version }}/{{ image_filename }}"
      - name: "Mirror EU2"
        url: "https://mirror.terrahost.no/opnsense/releases/{{ opnsense_version }}/{{ image_filename }}"
    checksum_url: "https://opnsense.org/download/"
    image_dir: "/var/lib/vz/template/iso"
    
  tasks:
    - name: Check if discovery data exists
      stat:
        path: "/opt/privatebox/ansible/host_vars/proxmox/discovered.yml"
      delegate_to: localhost
      register: discovery_exists
      
    - name: Load discovery data if available
      include_vars:
        file: "/opt/privatebox/ansible/host_vars/proxmox/discovered.yml"
        name: discovery
      delegate_to: localhost
      when: discovery_exists.stat.exists
      
    - name: Check if image already exists
      stat:
        path: "{{ image_dir }}/{{ image_filename }}"
      register: existing_image
      
    - name: Display existing image info
      debug:
        msg: "Image already exists: {{ existing_image.stat.size | filesizeformat }}"
      when: existing_image.stat.exists
      
    - name: Download OPNsense image
      when: not existing_image.stat.exists
      block:
        - name: Ensure ISO directory exists
          file:
            path: "{{ image_dir }}"
            state: directory
            mode: '0755'
            
        - name: Test mirror speed
          uri:
            url: "{{ item.url }}"
            method: HEAD
            timeout: 5
            follow_redirects: yes
          loop: "{{ mirrors }}"
          register: mirror_tests
          failed_when: false
          changed_when: false
          
        - name: Select fastest mirror
          set_fact:
            fastest_mirror: >-
              {{
                mirror_tests.results |
                selectattr('status', 'defined') |
                selectattr('status', 'equalto', 200) |
                sort(attribute='elapsed') |
                map(attribute='item') |
                first |
                default(mirrors[0])
              }}
              
        - name: Display selected mirror
          debug:
            msg: "Using mirror: {{ fastest_mirror.name }} ({{ fastest_mirror.url }})"
            
        - name: Download image from fastest mirror
          get_url:
            url: "{{ fastest_mirror.url }}"
            dest: "{{ image_dir }}/{{ image_filename }}.tmp"
            mode: '0644'
            timeout: 1800  # 30 minutes timeout
          register: download_result
          
        - name: Move downloaded image to final location
          command: |
            mv "{{ image_dir }}/{{ image_filename }}.tmp" "{{ image_dir }}/{{ image_filename }}"
          when: download_result is succeeded
          
    - name: Verify downloaded image
      block:
        - name: Get image checksum
          stat:
            path: "{{ image_dir }}/{{ image_filename }}"
            checksum_algorithm: sha256
          register: image_checksum
          
        - name: Display image information
          debug:
            msg:
              - "Image: {{ image_filename }}"
              - "Size: {{ image_checksum.stat.size | filesizeformat }}"
              - "SHA256: {{ image_checksum.stat.checksum }}"
              - "Path: {{ image_dir }}/{{ image_filename }}"
              
        - name: Set correct permissions
          file:
            path: "{{ image_dir }}/{{ image_filename }}"
            owner: root
            group: root
            mode: '0644'
            
    - name: Check available disk space
      shell: |
        df -BG {{ image_dir }} | tail -1 | awk '{print $4}' | tr -d 'G'
      register: free_space
      changed_when: false
      
    - name: Warn if low disk space
      debug:
        msg: "WARNING: Only {{ free_space.stdout }}GB free space remaining in {{ image_dir }}"
      when: free_space.stdout | int < 10
      
    - name: Create image metadata file
      copy:
        content: |
          # OPNsense Image Metadata
          version: {{ opnsense_version }}
          filename: {{ image_filename }}
          downloaded: {{ ansible_date_time.iso8601 }}
          size: {{ image_checksum.stat.size | default('unknown') }}
          checksum: {{ image_checksum.stat.checksum | default('unknown') }}
          mirror: {{ fastest_mirror.name | default('unknown') }}
        dest: "{{ image_dir }}/{{ image_filename }}.meta"
        mode: '0644'
      when: existing_image.stat.exists or download_result is succeeded