---
# Task 5.4: Configure VPN Access Rules
# Set up secure remote access with WireGuard VPN
- name: "OPNsense: Configure VPN Rules"
  hosts: container-host
  become: true
  gather_facts: true
  
  vars:
    service_name: "OPNsense VPN Configuration"
    service_description: "Configure WireGuard VPN with appropriate firewall rules and access controls"
    service_tag: "vpn-rules"
    
    # API credentials location
    api_key_file: "/etc/privatebox-opnsense-api-key"
    api_secret_file: "/etc/privatebox-opnsense-api-secret"
    
    # VPN configuration
    vpn_subnet: "10.0.50.0/24"
    vpn_port: "51820"
    vpn_interface: "wg0"
    
    # Secure credential storage paths
    credentials_dir: "/opt/privatebox/credentials"
    backup_dir: "/opt/privatebox/backups"
    
    # Default VPN access policies
    default_vpn_access:
      - name: "vpn_to_lan"
        allow: true
        description: "VPN users can access LAN"
      - name: "vpn_to_services"
        allow: true
        description: "VPN users can access services"
      - name: "vpn_to_management"
        allow: false
        description: "VPN users cannot access management by default"
      - name: "vpn_to_iot"
        allow: false
        description: "VPN users cannot access IoT"      opnsense_host:
        semaphore_type: "string"
        semaphore_required: true
        semaphore_description: "OPNsense IP address or hostname"
      enable_wireguard:
        semaphore_type: "boolean"
        semaphore_required: true
        semaphore_default: true
        semaphore_description: "Enable WireGuard VPN"
      vpn_admin_access:
        semaphore_type: "boolean"
        semaphore_required: true
        semaphore_default: false
        semaphore_description: "Allow VPN users to access Management VLAN"
      confirm_vpn_changes:
        semaphore_type: "boolean"
        semaphore_required: true
        semaphore_default: false
        semaphore_description: "Confirm VPN configuration changes"
  
  tasks:
    - name: Pre-flight checks
      block:
        - name: Verify confirmation
          assert:
            that:
              - confirm_vpn_changes | bool
            fail_msg: "VPN changes not confirmed. Set confirm_vpn_changes=true to proceed."
            
        - name: Check API credential files exist
          stat:
            path: "{{ item }}"
          loop:
            - "{{ api_key_file }}"
            - "{{ api_secret_file }}"
          register: cred_files
          
        - name: Verify all credential files exist
          assert:
            that:
              - item.stat.exists
            fail_msg: "API credential file missing: {{ item.item }}. Run opnsense-enable-api.yml first."
          loop: "{{ cred_files.results }}"
            
        - name: Load API credentials
          set_fact:
            api_key: "{{ lookup('file', api_key_file) | trim }}"
            api_secret: "{{ lookup('file', api_secret_file) | trim }}"
          no_log: true
            
        - name: Test API connectivity
          uri:
            url: "https://{{ opnsense_host }}/api/core/system/status"
            method: GET
            user: "{{ api_key }}"
            password: "{{ api_secret }}"
            force_basic_auth: true
            validate_certs: false
            status_code: 200
          register: api_test
          
        - name: Create secure directories
          file:
            path: "{{ item }}"
            state: directory
            mode: '0700'
            owner: root
            group: root
          loop:
            - "{{ credentials_dir }}"
            - "{{ backup_dir }}"
            - /opt/privatebox/scripts
            - /opt/privatebox/vpn
            - /opt/privatebox/vpn/configs
            
        - name: Create configuration backup
          uri:
            url: "https://{{ opnsense_host }}/api/core/backup/download/this"
            method: GET
            user: "{{ api_key }}"
            password: "{{ api_secret }}"
            force_basic_auth: true
            validate_certs: false
            dest: "{{ backup_dir }}/opnsense-backup-{{ ansible_date_time.epoch }}.xml"
            status_code: 200
          register: backup_result
          
    - name: Install WireGuard plugin
      when: enable_wireguard | bool
      block:
        - name: Check if WireGuard is installed
          uri:
            url: "https://{{ opnsense_host }}/api/core/firmware/info"
            method: GET
            user: "{{ api_key }}"
            password: "{{ api_secret }}"
            force_basic_auth: true
            validate_certs: false
            status_code: 200
          register: firmware_info
          
        - name: Install WireGuard plugin if needed
          uri:
            url: "https://{{ opnsense_host }}/api/core/firmware/install/os-wireguard"
            method: POST
            user: "{{ api_key }}"
            password: "{{ api_secret }}"
            force_basic_auth: true
            validate_certs: false
            body_format: json
            body: {}
            status_code: [200, 201]
          when: "'os-wireguard' not in firmware_info.json.installed_packages | default([])"
          register: wireguard_install
          
        - name: Wait for WireGuard installation
          pause:
            seconds: 30
          when: wireguard_install is changed
          
    - name: Configure VPN subnet alias
      block:
        - name: Create VPN network alias
          uri:
            url: "https://{{ opnsense_host }}/api/firewall/alias/setItem"
            method: POST
            user: "{{ api_key }}"
            password: "{{ api_secret }}"
            force_basic_auth: true
            validate_certs: false
            body_format: json
            body:
              alias:
                name: "VPN_net"
                type: "network"
                content: "{{ vpn_subnet }}"
                description: "WireGuard VPN client network"
                enabled: "1"
            status_code: [200, 201]
            
        - name: Apply alias changes
          uri:
            url: "https://{{ opnsense_host }}/api/firewall/alias/reconfigure"
            method: POST
            user: "{{ api_key }}"
            password: "{{ api_secret }}"
            force_basic_auth: true
            validate_certs: false
            body_format: json
            body: {}
            status_code: 200
            
    - name: Configure WireGuard server
      when: enable_wireguard | bool
      block:
        - name: Generate WireGuard server keys
          block:
            - name: Check if WireGuard private key exists
              stat:
                path: "{{ credentials_dir }}/wg-server-private.key"
              register: wg_key_stat
              
            - name: Generate new WireGuard private key if needed
              shell: |
                wg genkey > {{ credentials_dir }}/wg-server-private.key
                chmod 600 {{ credentials_dir }}/wg-server-private.key
              when: not wg_key_stat.stat.exists
              
            - name: Read WireGuard private key
              slurp:
                src: "{{ credentials_dir }}/wg-server-private.key"
              register: wg_key_data
              
            - name: Set WireGuard private key fact
              set_fact:
                wg_private_key: "{{ wg_key_data.content | b64decode | trim }}"
              no_log: true
            
        - name: Configure WireGuard server settings
          uri:
            url: "https://{{ opnsense_host }}/api/wireguard/server/set"
            method: POST
            user: "{{ api_key }}"
            password: "{{ api_secret }}"
            force_basic_auth: true
            validate_certs: false
            body_format: json
            body:
              server:
                enabled: "1"
                name: "wg0"
                port: "{{ vpn_port }}"
                address: "{{ vpn_subnet | regex_replace('/24', '') | regex_replace('.0$', '.1/24') }}"
                private_key: "{{ wg_private_key }}"
                dns: "10.0.20.21"  # AdGuard DNS
                allowed_ips: "0.0.0.0/0"
                description: "PrivateBox WireGuard VPN"
            status_code: [200, 201]
            
    - name: Configure VPN firewall rules
      block:
        - name: Define VPN firewall rules
          set_fact:
            vpn_rules:
              # Allow WireGuard port inbound
              - sequence: "600"
                action: "pass"
                interface: "WAN"
                source: "any"
                destination: "WAN:address"
                destination_port: "{{ vpn_port }}"
                protocol: "udp"
                description: "Allow WireGuard VPN connections"
                log: "1"
                
              # VPN to LAN access
              - sequence: "610"
                action: "{{ 'pass' if default_vpn_access | selectattr('name', 'equalto', 'vpn_to_lan') | map(attribute='allow') | first else 'block' }}"
                interface: "{{ vpn_interface }}"
                source: "VPN_net"
                destination: "LAN_net"
                protocol: "any"
                description: "VPN to LAN access"
                log: "0"
                
              # VPN to Services access
              - sequence: "611"
                action: "{{ 'pass' if default_vpn_access | selectattr('name', 'equalto', 'vpn_to_services') | map(attribute='allow') | first else 'block' }}"
                interface: "{{ vpn_interface }}"
                source: "VPN_net"
                destination: "SVC_net"
                protocol: "any"
                description: "VPN to Services access"
                log: "0"
                
              # VPN to Management access (conditional)
              - sequence: "612"
                action: "{{ 'pass' if vpn_admin_access | bool else 'block' }}"
                interface: "{{ vpn_interface }}"
                source: "VPN_net"
                destination: "MGMT_net"
                protocol: "any"
                description: "VPN to Management access - {{ 'ALLOWED' if vpn_admin_access | bool else 'BLOCKED' }}"
                log: "1"
                
              # VPN to IoT access (blocked)
              - sequence: "613"
                action: "block"
                interface: "{{ vpn_interface }}"
                source: "VPN_net"
                destination: "IOT_net"
                protocol: "any"
                description: "VPN to IoT access - BLOCKED"
                log: "1"
                
              # VPN to Internet
              - sequence: "614"
                action: "pass"
                interface: "{{ vpn_interface }}"
                source: "VPN_net"
                destination: "!RFC1918"
                protocol: "any"
                description: "VPN to Internet access"
                log: "0"
                
              # VPN client isolation (optional)
              - sequence: "615"
                action: "block"
                interface: "{{ vpn_interface }}"
                source: "VPN_net"
                destination: "VPN_net"
                protocol: "any"
                description: "VPN client isolation - prevent client-to-client"
                log: "1"
                enabled: "0"  # Disabled by default
                
        - name: Add VPN firewall rules
          uri:
            url: "https://{{ opnsense_host }}/api/firewall/filter/addRule"
            method: POST
            user: "{{ api_key }}"
            password: "{{ api_secret }}"
            force_basic_auth: true
            validate_certs: false
            body_format: json
            body:
              rule:
                sequence: "{{ item.sequence }}"
                action: "{{ item.action }}"
                interface: "{{ item.interface }}"
                direction: "in"
                ipprotocol: "inet"
                protocol: "{{ item.protocol }}"
                source: "{{ item.source }}"
                destination: "{{ item.destination }}"
                destination_port: "{{ item.destination_port | default('') }}"
                log: "{{ item.log | default('0') }}"
                description: "{{ item.description }}"
                enabled: "{{ item.enabled | default('1') }}"
            status_code: [200, 201]
          loop: "{{ vpn_rules }}"
          retries: 3
          delay: 5
          register: rule_add_results
      rescue:
        - name: Display error and rollback instructions
          debug:
            msg:
              - "ERROR: Failed to add firewall rules"
              - "To restore from backup:"
              - "1. Access OPNsense web UI"
              - "2. Go to System > Configuration > Backups"
              - "3. Upload backup from {{ backup_dir }}/"
          failed_when: true
          
    - name: Configure VPN NAT rules
      block:
        - name: Add VPN subnet to outbound NAT
          uri:
            url: "https://{{ opnsense_host }}/api/firewall/nat/outbound/addRule"
            method: POST
            user: "{{ api_key }}"
            password: "{{ api_secret }}"
            force_basic_auth: true
            validate_certs: false
            body_format: json
            body:
              rule:
                interface: "WAN"
                source: "{{ vpn_subnet }}"
                destination: "any"
                description: "VPN client outbound NAT"
                nat_type: "interface"
                enabled: "1"
            status_code: [200, 201]
            
        - name: Apply NAT configuration
          uri:
            url: "https://{{ opnsense_host }}/api/firewall/nat/outbound/apply"
            method: POST
            user: "{{ api_key }}"
            password: "{{ api_secret }}"
            force_basic_auth: true
            validate_certs: false
            body_format: json
            body: {}
            status_code: 200
            
    - name: Apply all firewall changes
      uri:
        url: "https://{{ opnsense_host }}/api/firewall/filter/apply"
        method: POST
        user: "{{ api_key }}"
        password: "{{ api_secret }}"
        force_basic_auth: true
        validate_certs: false
        body_format: json
        body: {}
        status_code: 200
      register: apply_result
      
    - name: Create VPN client configuration template
      copy:
        content: |
          # WireGuard Client Configuration Template
          # Generated: {{ ansible_date_time.iso8601 }}
          
          # Copy this template and customize for each VPN user
          # Replace the following placeholders:
          # - CLIENT_PRIVATE_KEY: Generate with: wg genkey
          # - CLIENT_IP: Assign unique IP from {{ vpn_subnet }} (e.g., 10.0.50.2)
          # - SERVER_PUBLIC_KEY: Get from OPNsense WireGuard settings
          
          [Interface]
          PrivateKey = CLIENT_PRIVATE_KEY
          Address = CLIENT_IP/32
          DNS = 10.0.20.21  # AdGuard DNS
          
          [Peer]
          PublicKey = SERVER_PUBLIC_KEY
          Endpoint = {{ opnsense_host }}:{{ vpn_port }}
          AllowedIPs = 0.0.0.0/0
          PersistentKeepalive = 25
          
          # Access permissions for this VPN connection:
          {% if default_vpn_access | selectattr('name', 'equalto', 'vpn_to_lan') | map(attribute='allow') | first %}
          # ✓ LAN access (10.0.30.0/24)
          {% else %}
          # ✗ LAN access blocked
          {% endif %}
          {% if default_vpn_access | selectattr('name', 'equalto', 'vpn_to_services') | map(attribute='allow') | first %}
          # ✓ Services access (10.0.20.0/24)
          {% else %}
          # ✗ Services access blocked
          {% endif %}
          {% if vpn_admin_access | bool %}
          # ✓ Management access (10.0.10.0/24) - ADMIN ONLY
          {% else %}
          # ✗ Management access blocked
          {% endif %}
          # ✗ IoT access blocked (10.0.40.0/24)
          # ✓ Internet access (full)
        dest: /opt/privatebox/vpn/client-template.conf
        mode: '0600'
        
    - name: Create VPN user management script
      copy:
        content: |
          #!/bin/bash
          # WireGuard VPN User Management Script
          # Generated: {{ ansible_date_time.iso8601 }}
          
          # Load credentials from secure files
          API_KEY=$(cat {{ api_key_file }} 2>/dev/null)
          API_SECRET=$(cat {{ api_secret_file }} 2>/dev/null)
          OPNSENSE_HOST="{{ opnsense_host }}"
          VPN_SUBNET="{{ vpn_subnet }}"
          
          function add_vpn_user() {
              local username=$1
              local client_ip=$2
              
              if [ -z "$username" ] || [ -z "$client_ip" ]; then
                  echo "Usage: add_vpn_user <username> <client_ip>"
                  echo "Example: add_vpn_user john 10.0.50.2"
                  return 1
              fi
              
              # Generate client keys in secure location
              local key_dir="{{ credentials_dir }}/vpn-users"
              mkdir -p "$key_dir"
              chmod 700 "$key_dir"
              
              wg genkey > "$key_dir/${username}.key"
              chmod 600 "$key_dir/${username}.key"
              wg pubkey < "$key_dir/${username}.key" > "$key_dir/${username}.pub"
              
              local private_key=$(cat "$key_dir/${username}.key")
              local public_key=$(cat "$key_dir/${username}.pub")
              
              # Add peer to OPNsense
              curl -k -u "$API_KEY:$API_SECRET" \
                  -X POST \
                  -H "Content-Type: application/json" \
                  -d "{
                      \"peer\": {
                          \"enabled\": \"1\",
                          \"name\": \"$username\",
                          \"public_key\": \"$public_key\",
                          \"allowed_ips\": \"${client_ip}/32\",
                          \"description\": \"VPN user: $username\"
                      }
                  }" \
                  "https://$OPNSENSE_HOST/api/wireguard/peer/add"
              
              # Generate client config
              cat > /opt/privatebox/vpn/${username}.conf << EOF
          [Interface]
          PrivateKey = $private_key
          Address = ${client_ip}/32
          DNS = 10.0.20.21
          
          [Peer]
          PublicKey = SERVER_PUBLIC_KEY_HERE
          Endpoint = ${OPNSENSE_HOST}:{{ vpn_port }}
          AllowedIPs = 0.0.0.0/0
          PersistentKeepalive = 25
          EOF
              
              # Keys are kept in secure location for reference
              # Private key is only in the client config file
              
              echo "VPN user $username created"
              echo "Config file: /opt/privatebox/vpn/${username}.conf"
              echo "Remember to add the server public key to the config!"
          }
          
          function list_vpn_users() {
              echo "Current VPN users:"
              curl -sk -u "$API_KEY:$API_SECRET" \
                  "https://$OPNSENSE_HOST/api/wireguard/peer/search" | \
                  jq -r '.rows[] | "\(.name) - \(.allowed_ips)"'
          }
          
          function remove_vpn_user() {
              local username=$1
              
              if [ -z "$username" ]; then
                  echo "Usage: remove_vpn_user <username>"
                  return 1
              fi
              
              # Find peer UUID
              local uuid=$(curl -sk -u "$API_KEY:$API_SECRET" \
                  "https://$OPNSENSE_HOST/api/wireguard/peer/search" | \
                  jq -r ".rows[] | select(.name==\"$username\") | .uuid")
              
              if [ -z "$uuid" ]; then
                  echo "User $username not found"
                  return 1
              fi
              
              # Remove peer
              curl -k -u "$API_KEY:$API_SECRET" \
                  -X POST \
                  "https://$OPNSENSE_HOST/api/wireguard/peer/del/$uuid"
              
              # Remove config file
              rm -f /opt/privatebox/vpn/${username}.conf
              
              echo "VPN user $username removed"
          }
          
          # Main menu
          case "$1" in
              add)
                  add_vpn_user "$2" "$3"
                  ;;
              list)
                  list_vpn_users
                  ;;
              remove)
                  remove_vpn_user "$2"
                  ;;
              *)
                  echo "Usage: $0 {add|list|remove}"
                  echo "  add <username> <ip>    - Add new VPN user"
                  echo "  list                   - List all VPN users"
                  echo "  remove <username>      - Remove VPN user"
                  ;;
          esac
        dest: /opt/privatebox/scripts/vpn-user-manager.sh
        mode: '0755'
        
    - name: Verify VPN directories exist
      file:
        path: "{{ item }}"
        state: directory
        mode: '0700'
        owner: root
        group: root
      loop:
        - /opt/privatebox/vpn
        - /opt/privatebox/vpn/configs
        - "{{ credentials_dir }}/vpn-users"
        
    - name: Display completion information
      debug:
        msg:
          - "=========================================="
          - "VPN Access Rules Configured!"
          - "=========================================="
          - ""
          - "WireGuard VPN: {{ 'ENABLED' if enable_wireguard | bool else 'DISABLED' }}"
          - "VPN Subnet: {{ vpn_subnet }}"
          - "VPN Port: {{ vpn_port }} (UDP)"
          - ""
          - "Access permissions:"
          - "- VPN → LAN: {{ 'ALLOWED' if default_vpn_access | selectattr('name', 'equalto', 'vpn_to_lan') | map(attribute='allow') | first else 'BLOCKED' }}"
          - "- VPN → Services: {{ 'ALLOWED' if default_vpn_access | selectattr('name', 'equalto', 'vpn_to_services') | map(attribute='allow') | first else 'BLOCKED' }}"
          - "- VPN → Management: {{ 'ALLOWED' if vpn_admin_access | bool else 'BLOCKED' }}"
          - "- VPN → IoT: BLOCKED"
          - "- VPN → Internet: ALLOWED"
          - ""
          - "Client configuration template:"
          - "/opt/privatebox/vpn/client-template.conf"
          - ""
          - "VPN user management:"
          - "/opt/privatebox/scripts/vpn-user-manager.sh"
          - ""
          - "To add a VPN user:"
          - "vpn-user-manager.sh add <username> <ip>"
          - "Example: vpn-user-manager.sh add john 10.0.50.2"
          - ""
          - "Security notes:"
          - "- Client isolation can be enabled if needed"
          - "- All VPN connections are logged"
          - "- DNS queries go through AdGuard"
          - ""
          - "Next steps:"
          - "- Get server public key from OPNsense"
          - "- Create VPN users as needed"
          - "- Test VPN connectivity"
          - "- Run configure-security-monitoring.yml"
          - "=========================================="