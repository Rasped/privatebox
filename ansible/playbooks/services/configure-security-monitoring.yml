---
# Task 5.5: Create Security Monitoring Rules
# Implement comprehensive logging, IDS/IPS, and alerting
- name: Configure OPNsense Security Monitoring
  hosts: container-host
  become: true
  gather_facts: true
  
  vars:
    service_name: "OPNsense Security Monitoring"
    service_description: "Configure IDS/IPS, traffic analysis, logging, and security alerts"
    service_tag: "security-monitor"
    
    # API credentials location
    api_key_file: "/etc/privatebox-opnsense-api-key"
    api_secret_file: "/etc/privatebox-opnsense-api-secret"
    
    # Secure paths
    backup_dir: "/opt/privatebox/backups"
    scripts_dir: "/opt/privatebox/scripts"
    logs_dir: "/opt/privatebox/logs/security"
    reports_dir: "/opt/privatebox/reports"
    
    # Monitoring configuration
    log_retention_days: 30
    alert_email: ""  # Set if email alerts desired
    syslog_server: ""  # Set if remote syslog desired
    
    # IDS/IPS settings
    ids_enabled: true
    ips_mode: false  # false = detect only, true = block
    
    # Metadata for Semaphore template generation
    _semaphore_vars_prompt:
      opnsense_host:
        semaphore_type: "string"
        semaphore_required: true
        semaphore_description: "OPNsense IP address or hostname"
      enable_ids:
        semaphore_type: "boolean"
        semaphore_required: true
        semaphore_default: true
        semaphore_description: "Enable Intrusion Detection System"
      enable_ips_blocking:
        semaphore_type: "boolean"
        semaphore_required: true
        semaphore_default: false
        semaphore_description: "Enable IPS blocking mode (can block legitimate traffic)"
      alert_email_address:
        semaphore_type: "string"
        semaphore_required: false
        semaphore_description: "Email address for security alerts (optional)"
      confirm_monitoring:
        semaphore_type: "boolean"
        semaphore_required: true
        semaphore_default: false
        semaphore_description: "Confirm security monitoring configuration"
  
  tasks:
    - name: Pre-flight checks
      block:
        - name: Verify confirmation
          assert:
            that:
              - confirm_monitoring | bool
            fail_msg: "Monitoring configuration not confirmed. Set confirm_monitoring=true to proceed."
            
        - name: Check API credential files exist
          stat:
            path: "{{ item }}"
          loop:
            - "{{ api_key_file }}"
            - "{{ api_secret_file }}"
          register: cred_files
          
        - name: Verify all credential files exist
          assert:
            that:
              - item.stat.exists
            fail_msg: "API credential file missing: {{ item.item }}. Run opnsense-enable-api.yml first."
          loop: "{{ cred_files.results }}"
            
        - name: Load API credentials
          set_fact:
            api_key: "{{ lookup('file', api_key_file) | trim }}"
            api_secret: "{{ lookup('file', api_secret_file) | trim }}"
          no_log: true
            
        - name: Set monitoring variables
          set_fact:
            ids_enabled: "{{ enable_ids | bool }}"
            ips_mode: "{{ enable_ips_blocking | bool }}"
            alert_email: "{{ alert_email_address | default('') }}"
            
        - name: Test API connectivity
          uri:
            url: "https://{{ opnsense_host }}/api/core/system/status"
            method: GET
            user: "{{ api_key }}"
            password: "{{ api_secret }}"
            force_basic_auth: true
            validate_certs: false
            status_code: 200
          register: api_test
          
        - name: Create secure directories
          file:
            path: "{{ item }}"
            state: directory
            mode: '0750'
            owner: root
            group: root
          loop:
            - "{{ backup_dir }}"
            - "{{ scripts_dir }}"
            - "{{ logs_dir }}"
            - "{{ reports_dir }}"
            
        - name: Create configuration backup
          uri:
            url: "https://{{ opnsense_host }}/api/core/backup/download/this"
            method: GET
            user: "{{ api_key }}"
            password: "{{ api_secret }}"
            force_basic_auth: true
            validate_certs: false
            dest: "{{ backup_dir }}/opnsense-backup-{{ ansible_date_time.epoch }}.xml"
            status_code: 200
          register: backup_result
          
    - name: Configure comprehensive logging
      block:
        - name: Set system logging parameters
          uri:
            url: "https://{{ opnsense_host }}/api/diagnostics/log/settings/set"
            method: POST
            user: "{{ api_key }}"
            password: "{{ api_secret }}"
            force_basic_auth: true
            validate_certs: false
            body_format: json
            body:
              settings:
                preserve_logs: "{{ log_retention_days }}"
                log_filter: "1"
                log_firewall_default_blocks: "1"
                nentries: "500"
                format: "rfc5424"
            status_code: [200, 201]
            
        - name: Configure firewall logging rules
          set_fact:
            logging_rules:
              # Log all denied packets with sampling
              - sequence: "900"
                action: "block"
                interface: "any"
                source: "any"
                destination: "any"
                protocol: "any"
                description: "Log denied packets (10% sample rate)"
                log: "1"
                log_sample: "10"
                
              # Log new connections from untrusted zones
              - sequence: "901"
                action: "pass"
                interface: "IOT"
                source: "IOT_net"
                destination: "!IOT_net"
                protocol: "any"
                description: "Log IoT outbound connections"
                log: "1"
                log_sample: "20"
                
              # Log administrative access
              - sequence: "902"
                action: "pass"
                interface: "any"
                destination_port: "443,22"
                protocol: "tcp"
                description: "Log administrative access attempts"
                log: "1"
                
        - name: Add logging rules
          uri:
            url: "https://{{ opnsense_host }}/api/firewall/filter/addRule"
            method: POST
            user: "{{ api_key }}"
            password: "{{ api_secret }}"
            force_basic_auth: true
            validate_certs: false
            body_format: json
            body:
              rule:
                sequence: "{{ item.sequence }}"
                action: "{{ item.action }}"
                interface: "{{ item.interface }}"
                direction: "in"
                ipprotocol: "inet"
                protocol: "{{ item.protocol }}"
                source: "{{ item.source | default('any') }}"
                destination: "{{ item.destination | default('any') }}"
                destination_port: "{{ item.destination_port | default('') }}"
                log: "{{ item.log }}"
                description: "{{ item.description }}"
                enabled: "1"
            status_code: [200, 201]
          loop: "{{ logging_rules }}"
          retries: 3
          delay: 5
          
    - name: Install and configure IDS/IPS
      when: ids_enabled
      block:
        - name: Install Suricata IDS plugin
          uri:
            url: "https://{{ opnsense_host }}/api/core/firmware/install/os-suricata"
            method: POST
            user: "{{ api_key }}"
            password: "{{ api_secret }}"
            force_basic_auth: true
            validate_certs: false
            body_format: json
            body: {}
            status_code: [200, 201]
          register: suricata_install
          
        - name: Wait for Suricata installation
          pause:
            seconds: 60
          when: suricata_install is changed
          
        - name: Configure Suricata settings
          uri:
            url: "https://{{ opnsense_host }}/api/ids/settings/set"
            method: POST
            user: "{{ api_key }}"
            password: "{{ api_secret }}"
            force_basic_auth: true
            validate_certs: false
            body_format: json
            body:
              settings:
                enabled: "1"
                ips: "{{ '1' if ips_mode else '0' }}"
                interfaces: "WAN,LAN,SVC,IOT"
                home_networks: "10.0.0.0/8,172.16.0.0/12,192.168.0.0/16"
                defaultPacketSize: "1514"
                MaxPendingPackets: "1024"
                DetectEngineProfile: "medium"
                PatternMatcher: "hyperscan"
                enableEveLogging: "1"
            status_code: [200, 201]
            
        - name: Enable recommended rulesets
          uri:
            url: "https://{{ opnsense_host }}/api/ids/settings/enableRuleset"
            method: POST
            user: "{{ api_key }}"
            password: "{{ api_secret }}"
            force_basic_auth: true
            validate_certs: false
            body_format: json
            body:
              rulesets:
                - "abuse.ch/SSL Blacklist"
                - "abuse.ch/Feodo Tracker"
                - "ET open/botcc"
                - "ET open/compromised"
                - "ET open/drop"
                - "ET open/dshield"
                - "ET open/exploit"
                - "ET open/malware"
                - "ET open/scan"
                - "ET open/shellcode"
                - "ET open/worm"
            status_code: [200, 201]
            
    - name: Configure traffic analysis
      block:
        - name: Enable NetFlow for traffic analysis
          uri:
            url: "https://{{ opnsense_host }}/api/diagnostics/netflow/settings/set"
            method: POST
            user: "{{ api_key }}"
            password: "{{ api_secret }}"
            force_basic_auth: true
            validate_certs: false
            body_format: json
            body:
              settings:
                enabled: "1"
                interfaces: "WAN,LAN,SVC,IOT"
                templateInterval: "20"
                maxFlows: "2000000"
            status_code: [200, 201]
            
    - name: Configure security alerts
      block:
        - name: Set up alert thresholds
          set_fact:
            alert_rules:
              - name: "failed_ssh_attempts"
                threshold: 5
                window: 300  # 5 minutes
                action: "alert"
                description: "Multiple failed SSH attempts"
                
              - name: "port_scan_detection"
                threshold: 20
                window: 60  # 1 minute
                action: "alert"
                description: "Potential port scanning activity"
                
              - name: "dns_tunneling"
                threshold: 100
                window: 60
                action: "alert"
                description: "Excessive DNS queries (possible tunneling)"
                
              - name: "ddos_detection"
                threshold: 1000
                window: 10
                action: "alert"
                description: "High connection rate (possible DDoS)"
                
        - name: Configure email alerts if provided
          when: alert_email | length > 0
          uri:
            url: "https://{{ opnsense_host }}/api/core/notifications/settings/set"
            method: POST
            user: "{{ api_key }}"
            password: "{{ api_secret }}"
            force_basic_auth: true
            validate_certs: false
            body_format: json
            body:
              settings:
                enabled: "1"
                email: "{{ alert_email }}"
                smtp_host: "localhost"
                smtp_port: "25"
                smtp_auth: "0"
            status_code: [200, 201]
            
    - name: Configure syslog forwarding
      when: syslog_server | length > 0
      block:
        - name: Set up remote syslog
          uri:
            url: "https://{{ opnsense_host }}/api/diagnostics/log/settings/set"
            method: POST
            user: "{{ api_key }}"
            password: "{{ api_secret }}"
            force_basic_auth: true
            validate_certs: false
            body_format: json
            body:
              settings:
                enable_remote_logging: "1"
                remote_syslog_server: "{{ syslog_server }}"
                remote_syslog_protocol: "udp"
                remote_syslog_port: "514"
                remote_syslog_contents: "firewall,system,resolver,dhcp"
            status_code: [200, 201]
            
    - name: Apply all changes
      block:
        - name: Apply firewall changes
          uri:
            url: "https://{{ opnsense_host }}/api/firewall/filter/apply"
            method: POST
            user: "{{ api_key }}"
            password: "{{ api_secret }}"
            force_basic_auth: true
            validate_certs: false
            body_format: json
            body: {}
            status_code: 200
            
        - name: Restart IDS service if enabled
          when: ids_enabled
          uri:
            url: "https://{{ opnsense_host }}/api/ids/service/restart"
            method: POST
            user: "{{ api_key }}"
            password: "{{ api_secret }}"
            force_basic_auth: true
            validate_certs: false
            body_format: json
            body: {}
            status_code: [200, 201]
      rescue:
        - name: Display configuration error
          debug:
            msg:
              - "ERROR: Failed to apply security monitoring configuration"
              - "To restore from backup:"
              - "1. Access OPNsense web UI"
              - "2. Go to System > Configuration > Backups"
              - "3. Upload backup from {{ backup_dir }}/"
          failed_when: true
            
    - name: Create monitoring dashboard script
      copy:
        content: |
          #!/bin/bash
          # OPNsense Security Monitoring Dashboard
          # Generated: {{ ansible_date_time.iso8601 }}
          
          # Load credentials from secure files
          API_KEY=$(cat {{ api_key_file }} 2>/dev/null)
          API_SECRET=$(cat {{ api_secret_file }} 2>/dev/null)
          OPNSENSE_HOST="{{ opnsense_host }}"
          
          function show_dashboard() {
              clear
              echo "====================================="
              echo "OPNsense Security Monitoring Dashboard"
              echo "====================================="
              echo ""
              
              # System status
              echo "System Status:"
              curl -sk -u "$API_KEY:$API_SECRET" \
                  "https://$OPNSENSE_HOST/api/core/system/status" | \
                  jq -r '"Uptime: \(.uptime)"'
              echo ""
              
              # Firewall stats
              echo "Firewall Statistics (last hour):"
              curl -sk -u "$API_KEY:$API_SECRET" \
                  "https://$OPNSENSE_HOST/api/diagnostics/firewall/stats" | \
                  jq -r '"Blocked: \(.blocked) | Passed: \(.passed)"'
              echo ""
              
              # IDS alerts
              {% if ids_enabled %}
              echo "IDS/IPS Status:"
              curl -sk -u "$API_KEY:$API_SECRET" \
                  "https://$OPNSENSE_HOST/api/ids/service/status" | \
                  jq -r '"Status: \(.status)"'
              
              echo "Recent IDS Alerts:"
              curl -sk -u "$API_KEY:$API_SECRET" \
                  "https://$OPNSENSE_HOST/api/ids/log/alerts?limit=5" | \
                  jq -r '.rows[] | "\(.timestamp) - \(.alert) - \(.src_ip)"' 2>/dev/null || echo "No recent alerts"
              {% else %}
              echo "IDS/IPS: Disabled"
              {% endif %}
              echo ""
              
              # Top blocked IPs
              echo "Top Blocked Source IPs:"
              curl -sk -u "$API_KEY:$API_SECRET" \
                  "https://$OPNSENSE_HOST/api/diagnostics/firewall/log/blocked?limit=100" | \
                  jq -r '.rows[].src_ip' | sort | uniq -c | sort -nr | head -5
              echo ""
              
              # Active connections
              echo "Active Connection Summary:"
              curl -sk -u "$API_KEY:$API_SECRET" \
                  "https://$OPNSENSE_HOST/api/diagnostics/firewall/states" | \
                  jq -r '"Total states: \(.total)"'
          }
          
          function show_alerts() {
              echo "Security Alerts (last 24 hours):"
              echo "================================"
              
              # Check for port scans
              local port_scans=$(curl -sk -u "$API_KEY:$API_SECRET" \
                  "https://$OPNSENSE_HOST/api/diagnostics/firewall/log/blocked?hours=24" | \
                  jq -r '.rows[] | select(.dst_port != null) | .src_ip' | \
                  sort | uniq -c | awk '$1 > 20 {print $2}')
              
              if [ -n "$port_scans" ]; then
                  echo "⚠️  Potential port scanning from:"
                  echo "$port_scans"
              fi
              
              # Check for failed auth attempts
              local failed_auth=$(curl -sk -u "$API_KEY:$API_SECRET" \
                  "https://$OPNSENSE_HOST/api/core/system/log?severity=warning&hours=24" | \
                  grep -i "authentication failed" | wc -l)
              
              if [ "$failed_auth" -gt 5 ]; then
                  echo "⚠️  High number of failed authentication attempts: $failed_auth"
              fi
              
              # Check for IDS alerts
              {% if ids_enabled %}
              local ids_alerts=$(curl -sk -u "$API_KEY:$API_SECRET" \
                  "https://$OPNSENSE_HOST/api/ids/log/alerts?hours=24" | \
                  jq -r '.total // 0')
              
              if [ "$ids_alerts" -gt 0 ]; then
                  echo "⚠️  IDS alerts in last 24 hours: $ids_alerts"
              fi
              {% endif %}
          }
          
          function export_logs() {
              local output_dir="/opt/privatebox/logs/security/$(date +%Y%m%d_%H%M%S)"
              mkdir -p "$output_dir"
              
              echo "Exporting security logs to $output_dir..."
              
              # Firewall logs
              curl -sk -u "$API_KEY:$API_SECRET" \
                  "https://$OPNSENSE_HOST/api/diagnostics/firewall/log/all?limit=10000" \
                  > "$output_dir/firewall.json"
              
              # System logs
              curl -sk -u "$API_KEY:$API_SECRET" \
                  "https://$OPNSENSE_HOST/api/core/system/log?limit=10000" \
                  > "$output_dir/system.json"
              
              {% if ids_enabled %}
              # IDS logs
              curl -sk -u "$API_KEY:$API_SECRET" \
                  "https://$OPNSENSE_HOST/api/ids/log/alerts?limit=10000" \
                  > "$output_dir/ids_alerts.json"
              {% endif %}
              
              # Create summary report
              cat > "$output_dir/summary.txt" << EOF
          Security Log Export Summary
          Generated: $(date)
          
          Files exported:
          - firewall.json: Firewall activity logs
          - system.json: System event logs
          {% if ids_enabled %}
          - ids_alerts.json: IDS/IPS alerts
          {% endif %}
          
          Analysis commands:
          # Count blocked IPs
          jq -r '.rows[].src_ip' firewall.json | sort | uniq -c | sort -nr
          
          # Find top blocked ports
          jq -r '.rows[].dst_port' firewall.json | sort | uniq -c | sort -nr
          
          {% if ids_enabled %}
          # IDS alert categories
          jq -r '.rows[].category' ids_alerts.json | sort | uniq -c | sort -nr
          {% endif %}
          EOF
              
              echo "Export complete: $output_dir"
          }
          
          # Main menu
          case "$1" in
              dashboard)
                  show_dashboard
                  ;;
              alerts)
                  show_alerts
                  ;;
              export)
                  export_logs
                  ;;
              monitor)
                  # Continuous monitoring mode
                  while true; do
                      show_dashboard
                      echo ""
                      echo "Press Ctrl+C to exit. Refreshing in 30 seconds..."
                      sleep 30
                  done
                  ;;
              *)
                  echo "Usage: $0 {dashboard|alerts|export|monitor}"
                  echo "  dashboard - Show current security status"
                  echo "  alerts    - Show security alerts"
                  echo "  export    - Export logs for analysis"
                  echo "  monitor   - Continuous monitoring mode"
                  ;;
          esac
        dest: "{{ scripts_dir }}/security-monitor.sh"
        mode: '0755'
        
    - name: Create log analysis script
      copy:
        content: |
          #!/bin/bash
          # Security Log Analysis Script
          # Generated: {{ ansible_date_time.iso8601 }}
          
          LOG_DIR="{{ logs_dir }}"
          
          function analyze_threats() {
              echo "Analyzing security threats..."
              echo "============================"
              
              # Find most blocked IPs
              echo "Top 10 Blocked IP Addresses:"
              find $LOG_DIR -name "firewall.json" -mtime -7 | \
                  xargs jq -r '.rows[] | select(.action=="block") | .src_ip' | \
                  sort | uniq -c | sort -nr | head -10
              
              echo ""
              echo "Top Targeted Ports:"
              find $LOG_DIR -name "firewall.json" -mtime -7 | \
                  xargs jq -r '.rows[] | select(.action=="block") | .dst_port' | \
                  sort | uniq -c | sort -nr | head -10
              
              echo ""
              echo "Blocked Traffic by Hour:"
              find $LOG_DIR -name "firewall.json" -mtime -1 | \
                  xargs jq -r '.rows[] | select(.action=="block") | .timestamp' | \
                  cut -d'T' -f2 | cut -d':' -f1 | sort | uniq -c
          }
          
          function generate_report() {
              local report_file="$LOG_DIR/weekly_report_$(date +%Y%m%d).html"
              
              cat > "$report_file" << 'EOF'
          <!DOCTYPE html>
          <html>
          <head>
              <title>PrivateBox Security Report</title>
              <style>
                  body { font-family: Arial, sans-serif; margin: 20px; }
                  table { border-collapse: collapse; width: 100%; }
                  th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }
                  th { background-color: #4CAF50; color: white; }
                  .alert { color: red; font-weight: bold; }
                  .ok { color: green; }
              </style>
          </head>
          <body>
              <h1>PrivateBox Security Report</h1>
              <p>Generated: $(date)</p>
              
              <h2>Executive Summary</h2>
              <ul>
                  <li>Reporting Period: Last 7 days</li>
                  <li>Total Blocked Attempts: $(find $LOG_DIR -name "firewall.json" -mtime -7 | xargs jq -r '.rows[] | select(.action=="block")' | wc -l)</li>
                  <li>Unique Source IPs Blocked: $(find $LOG_DIR -name "firewall.json" -mtime -7 | xargs jq -r '.rows[] | select(.action=="block") | .src_ip' | sort -u | wc -l)</li>
              </ul>
              
              <h2>Top Threats</h2>
              <table>
                  <tr><th>IP Address</th><th>Block Count</th><th>Location</th></tr>
          EOF
              
              # Add top blocked IPs to report
              find $LOG_DIR -name "firewall.json" -mtime -7 | \
                  xargs jq -r '.rows[] | select(.action=="block") | .src_ip' | \
                  sort | uniq -c | sort -nr | head -10 | \
                  while read count ip; do
                      echo "<tr><td>$ip</td><td>$count</td><td>-</td></tr>" >> "$report_file"
                  done
              
              cat >> "$report_file" << 'EOF'
              </table>
              
              <h2>Recommendations</h2>
              <ul>
                  <li>Review and block persistent threat IPs at ISP level if possible</li>
                  <li>Ensure all systems are patched and up to date</li>
                  <li>Monitor for unusual patterns in allowed traffic</li>
              </ul>
          </body>
          </html>
          EOF
              
              echo "Report generated: $report_file"
          }
          
          case "$1" in
              analyze)
                  analyze_threats
                  ;;
              report)
                  generate_report
                  ;;
              *)
                  echo "Usage: $0 {analyze|report}"
                  ;;
          esac
        dest: "{{ scripts_dir }}/security-analyzer.sh"
        mode: '0755'
        
    - name: Verify log directories exist
      file:
        path: "{{ item }}"
        state: directory
        mode: '0750'
        owner: root
        group: root
      loop:
        - "{{ logs_dir }}"
        - "{{ reports_dir }}"
        
    - name: Display completion information
      debug:
        msg:
          - "=========================================="
          - "Security Monitoring Configuration Complete!"
          - "=========================================="
          - ""
          - "Monitoring Features Enabled:"
          - "- Comprehensive firewall logging"
          - "- Log retention: {{ log_retention_days }} days"
          - "- IDS/IPS: {{ 'ENABLED' if ids_enabled else 'DISABLED' }}"
          - "- IPS Mode: {{ 'BLOCKING' if ips_mode else 'DETECT ONLY' }}"
          - "- Email alerts: {{ 'CONFIGURED' if alert_email else 'NOT CONFIGURED' }}"
          - "- Remote syslog: {{ 'CONFIGURED' if syslog_server else 'NOT CONFIGURED' }}"
          - ""
          - "Logging Rules:"
          - "- All denied packets (10% sample)"
          - "- IoT outbound connections"
          - "- Administrative access attempts"
          - "- New connections from untrusted zones"
          - ""
          - "IDS/IPS Rulesets:"
          - "{% if ids_enabled %}"
          - "- Malware detection"
          - "- Exploit detection"
          - "- Botnet C&C detection"
          - "- Port scan detection"
          - "- SSL blacklist"
          - "{% else %}"
          - "- IDS/IPS not enabled"
          - "{% endif %}"
          - ""
          - "Monitoring Tools:"
          - "- Dashboard: {{ scripts_dir }}/security-monitor.sh"
          - "- Analyzer: {{ scripts_dir }}/security-analyzer.sh"
          - ""
          - "Usage:"
          - "security-monitor.sh dashboard    - View current status"
          - "security-monitor.sh alerts       - Check security alerts"
          - "security-monitor.sh export       - Export logs"
          - "security-monitor.sh monitor      - Live monitoring"
          - ""
          - "security-analyzer.sh analyze     - Analyze threats"
          - "security-analyzer.sh report      - Generate HTML report"
          - ""
          - "Log locations:"
          - "- {{ logs_dir }}/"
          - "- {{ reports_dir }}/"
          - ""
          - "Configuration backup saved:"
          - "{{ backup_dir }}/opnsense-backup-{{ ansible_date_time.epoch }}.xml"
          - ""
          - "Next steps:"
          - "- Test monitoring dashboards"
          - "- Set up regular log analysis"
          - "- Configure alert thresholds"
          - "- Schedule weekly reports"
          - "=========================================="