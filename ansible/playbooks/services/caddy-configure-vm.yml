---
# Configure Caddy on Alpine Linux VM
# This playbook configures Caddy after the VM has been created
#
# Usage:
#   ansible-playbook -i inventory.yml caddy-configure-vm.yml
#
# Prerequisites:
#   - Alpine VM created with caddy-deploy-vm.yml
#   - VM accessible via SSH

- name: "Caddy VM: Configure Caddy Service"
  hosts: caddy-vm
  become: true
  gather_facts: true
  
  vars:
    service_name: "Caddy Alpine VM"
    
    # Caddy directories
    caddy_config_dir: "/etc/caddy"
    caddy_data_dir: "/var/lib/caddy"
    caddy_log_dir: "/var/log/caddy"
    
    # Target host for services (container-host VM)
    target_host: "{{ hostvars['container-host']['ansible_default_ipv4']['address'] | default('192.168.1.22') }}"
    
    # Services to proxy
    privatebox_services:
      - name: adguard
        port: 8080
        domain: adguard.lan
        host: "{{ target_host }}"
        description: "AdGuard Home DNS Filter"
      - name: semaphore
        port: 3000
        domain: semaphore.lan
        host: "{{ target_host }}"
        description: "Semaphore Ansible UI"
      - name: portainer
        port: 9000
        domain: portainer.lan
        host: "{{ target_host }}"
        description: "Portainer Container Management"
    
  tasks:
    # System preparation
    - name: "{{ service_name }} - System preparation"
      tags: [caddy-vm, prepare]
      block:
        - name: Update Alpine packages
          apk:
            update_cache: yes
            
        - name: Ensure required packages are installed
          apk:
            name:
              - caddy
              - caddy-openrc
              - nss-tools
              - ca-certificates
              - curl
              - nano
            state: present
            
        - name: Ensure Caddy user exists
          user:
            name: caddy
            system: yes
            shell: /sbin/nologin
            home: "{{ caddy_data_dir }}"
            create_home: no

    # Caddy configuration
    - name: "{{ service_name }} - Caddy configuration"
      tags: [caddy-vm, configure]
      block:
        - name: Create Caddy directories
          file:
            path: "{{ item }}"
            state: directory
            owner: caddy
            group: caddy
            mode: '0755'
          loop:
            - "{{ caddy_config_dir }}"
            - "{{ caddy_data_dir }}"
            - "{{ caddy_log_dir }}"
            - "{{ caddy_data_dir }}/pki"
            
        - name: Deploy Caddyfile for Alpine
          copy:
            dest: "{{ caddy_config_dir }}/Caddyfile"
            owner: caddy
            group: caddy
            mode: '0644'
            content: |
              # Caddy Configuration for PrivateBox Services
              # Running on Alpine Linux VM for proper certificate trust
              
              # Global options
              {
                  # Use internal CA for .lan domains
                  local_certs
                  
                  # Admin API endpoint (internal only)
                  admin localhost:2019
                  
                  # Log settings
                  log {
                      output file {{ caddy_log_dir }}/caddy.log
                      level INFO
                  }
              }
              
              # Health check endpoint
              :80 {
                  handle /health {
                      respond "OK" 200
                  }
                  
                  # Redirect all other HTTP to HTTPS
                  handle {
                      redir https://{host}{uri} permanent
                  }
              }
              
              # HTTPS Services with proper certificate handling
              {% for service in privatebox_services %}
              # {{ service.description | default(service.name) }}
              {{ service.domain }} {
                  # Use internal certificates for .lan domains
                  tls internal
              
                  # Reverse proxy to service
                  reverse_proxy {{ service.host }}:{{ service.port }} {
                      # Add common headers
                      header_up Host {host}
                      header_up X-Real-IP {remote}
                      header_up X-Forwarded-For {remote}
                      header_up X-Forwarded-Proto {scheme}
                      
                      # Health check for backend
                      health_uri /
                      health_interval 30s
                      health_timeout 5s
                      health_status 200 302 307
                  }
              
                  # Security headers
                  header {
                      # Disable FLoC tracking
                      Permissions-Policy interest-cohort=()
                      
                      # Enable HSTS for HTTPS
                      Strict-Transport-Security "max-age=31536000; includeSubDomains"
                      
                      # Prevent clickjacking
                      X-Frame-Options DENY
                      
                      # Prevent content type sniffing
                      X-Content-Type-Options nosniff
                      
                      # Basic XSS protection
                      X-XSS-Protection "1; mode=block"
                      
                      # Remove server header
                      -Server
                  }
              
                  # Logging
                  log {
                      output file {{ caddy_log_dir }}/{{ service.name }}.log {
                          roll_size 10mb
                          roll_keep 5
                          roll_keep_for 720h
                      }
                      format console
                      level INFO
                  }
              }
              
              {% endfor %}
              # Catch-all for undefined services
              https://*.lan {
                  tls internal
                  respond "Service not configured" 404
              }
              
              # Direct IP access redirects to first service
              https://{{ ansible_default_ipv4.address }} {
                  tls internal
                  redir https://{{ privatebox_services[0].domain }}{uri} permanent
              }
          notify: restart caddy
          
        - name: Create OpenRC service configuration
          copy:
            dest: /etc/conf.d/caddy
            content: |
              # Caddy configuration for OpenRC
              CADDY_OPTS="--config {{ caddy_config_dir }}/Caddyfile --adapter caddyfile"
            owner: root
            group: root
            mode: '0644'

    # Certificate trust setup
    - name: "{{ service_name }} - Certificate trust"
      tags: [caddy-vm, trust]
      block:
        - name: Start Caddy service
          service:
            name: caddy
            state: started
            enabled: yes
            
        - name: Wait for Caddy to generate certificates
          wait_for:
            path: "{{ caddy_data_dir }}/pki/authorities/local/root.crt"
            state: present
            timeout: 30
            
        - name: Trust Caddy root certificate
          command: caddy trust
          register: trust_result
          failed_when: false
          changed_when: "'successfully installed' in trust_result.stdout"
          
        - name: Verify certificate installation
          command: |
            certutil -L -d sql:$HOME/.pki/nssdb | grep -i caddy
          register: cert_check
          failed_when: false
          changed_when: false
          
        - name: Display trust status
          debug:
            msg: "{{ 'Certificate is trusted' if cert_check.rc == 0 else 'Certificate trust needs manual installation' }}"

    # Service validation
    - name: "{{ service_name }} - Service validation"
      tags: [caddy-vm, validate]
      block:
        - name: Validate Caddy configuration
          command: caddy validate --config {{ caddy_config_dir }}/Caddyfile
          become_user: caddy
          changed_when: false
          
        - name: Reload Caddy with new configuration
          service:
            name: caddy
            state: reloaded
            
        - name: Check Caddy service status
          command: rc-service caddy status
          register: service_status
          changed_when: false
          
        - name: Test HTTPS endpoints
          uri:
            url: "https://{{ item.domain }}"
            validate_certs: no
            status_code: [200, 302, 502]
            timeout: 5
          loop: "{{ privatebox_services }}"
          delegate_to: localhost
          failed_when: false
          register: endpoint_tests
          
        - name: Display test results
          debug:
            msg: "{{ item.item.name }}: {{ 'Available' if item.status in [200, 302] else 'Backend not ready (status: ' + (item.status|string) + ')' }}"
          loop: "{{ endpoint_tests.results }}"

    # Certificate export
    - name: "{{ service_name }} - Certificate export"
      tags: [caddy-vm, export]
      block:
        - name: Read root certificate
          slurp:
            src: "{{ caddy_data_dir }}/pki/authorities/local/root.crt"
          register: root_cert_content
          
        - name: Save root certificate locally
          copy:
            content: "{{ root_cert_content.content | b64decode }}"
            dest: "/tmp/caddy-root-ca.crt"
          delegate_to: localhost
          
        - name: Display certificate information
          debug:
            msg:
              - "=========================================="
              - "Caddy VM Configuration Complete!"
              - "=========================================="
              - ""
              - "Services available at:"
              - "{% for svc in privatebox_services %}"
              - "  - https://{{ svc.domain }} - {{ svc.description }}"
              - "{% endfor %}"
              - ""
              - "Direct access:"
              - "  - https://{{ ansible_default_ipv4.address }}"
              - ""
              - "Certificate Trust:"
              - "  Root CA exported to: /tmp/caddy-root-ca.crt"
              - "  Install this certificate on client devices to trust all services"
              - ""
              - "On macOS:"
              - "  sudo security add-trusted-cert -d -r trustRoot -k /Library/Keychains/System.keychain /tmp/caddy-root-ca.crt"
              - ""
              - "On Linux:"
              - "  sudo cp /tmp/caddy-root-ca.crt /usr/local/share/ca-certificates/"
              - "  sudo update-ca-certificates"
              - ""
              - "On Windows:"
              - "  Import via Certificate Manager (certmgr.msc) > Trusted Root CAs"
              - "=========================================="

  handlers:
    - name: restart caddy
      service:
        name: caddy
        state: restarted
        
    - name: reload caddy
      service:
        name: caddy
        state: reloaded