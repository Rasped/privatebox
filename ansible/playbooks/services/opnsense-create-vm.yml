---
# TODO: Add OPNsense VM as inventory in Semaphore after creation
# TODO: Add SSH key to Semaphore for OPNsense access
- name: "OPNsense: Deploy VM on Proxmox"
  hosts: proxmox
  become: false  # Running as root on Proxmox
  gather_facts: true
  
  vars:
    service_name: "OPNsense Firewall"
    service_description: "Secure firewall and routing platform for PrivateBox"
    service_tag: "opnsense"
    
    # VM Configuration - can be overridden
    opnsense_vm_id: 8000
    opnsense_vm_name: "opnsense"
    opnsense_memory: 2048
    opnsense_cores: 2
    opnsense_cpu: "host"
    opnsense_disk_size: "16G"
    opnsense_storage: "local-lvm"
    opnsense_onboot: true
    opnsense_qemu_agent: true
    
    # Network Configuration
    # OPNsense expects net0=LAN, net1=WAN by default
    opnsense_net0_bridge: "vmbr0"  # LAN interface (management network)
    opnsense_net1_bridge: "vmbr1"  # WAN interface (isolated)
    opnsense_lan_ip: "192.168.1.69"  # LAN IP address
    opnsense_lan_netmask: "24"
    opnsense_lan_gateway: "192.168.1.3"
    
    # OPNsense Image Configuration
    opnsense_version: "25.7"
    opnsense_base_url: "https://pkg.opnsense.org/releases"
    opnsense_image_name: "OPNsense-{{ opnsense_version }}-vga-amd64.img.bz2"
    opnsense_image_url: "{{ opnsense_base_url }}/{{ opnsense_version }}/{{ opnsense_image_name }}"
    opnsense_checksum_url: "{{ opnsense_base_url }}/{{ opnsense_version }}/OPNsense-{{ opnsense_version }}-checksums-amd64.sha256"
    
    # Local paths
    template_dir: "/var/lib/vz/template/qemu"
    compressed_image_path: "{{ template_dir }}/{{ opnsense_image_name }}"
    image_path: "{{ template_dir }}/OPNsense-{{ opnsense_version }}-vga-amd64.img"
    checksum_path: "{{ template_dir }}/{{ opnsense_image_name }}.sha256"
    
    # Default values for prompts
    confirm_deploy: true

  tasks:
    # Pre-deployment validation
    - name: "{{ service_name }} - Pre-deployment checks"
      when: confirm_deploy | bool
      tags: [opnsense, preflight]
      block:
        - name: Check if Proxmox VE
          assert:
            that:
              - ansible_distribution == "Debian"
              - "'pve' in ansible_kernel"
            fail_msg: "This playbook must run on a Proxmox VE host"
            
        - name: Check if required tools exist
          command: which {{ item }}
          loop:
            - qemu-nbd
            - kpartx
          register: tool_check
          failed_when: false
          changed_when: false
          
        - name: Install kpartx if missing
          apt:
            name: kpartx
            state: present
          when: tool_check.results[1].rc != 0
            
        - name: Check if VM ID already exists
          shell: qm status {{ opnsense_vm_id }}
          register: vm_exists
          failed_when: false
          changed_when: false
          
        - name: Fail if VM already exists
          fail:
            msg: "VM with ID {{ opnsense_vm_id }} already exists. Please remove it first or use a different ID."
          when: vm_exists.rc == 0
          
        - name: Check if vmbr1 exists
          command: ip link show vmbr1
          register: vmbr1_exists
          failed_when: false
          changed_when: false
          
        - name: Create vmbr1 bridge for OPNsense WAN
          when: vmbr1_exists.rc != 0
          block:
            - name: Create vmbr1 configuration
              copy:
                content: |
                  auto vmbr1
                  iface vmbr1 inet manual
                      bridge-ports none
                      bridge-stp off
                      bridge-fd 0
                      # Isolated bridge for OPNsense WAN
                dest: /etc/network/interfaces.d/vmbr1
                mode: '0644'
              
            - name: Bring up vmbr1
              command: ifup vmbr1
              
            - name: Verify vmbr1 is up
              command: ip link show vmbr1
              changed_when: false
          
        - name: Ensure template directory exists
          file:
            path: "{{ template_dir }}"
            state: directory
            mode: '0755'
            
        - name: Check available storage
          command: pvesm status
          register: storage_status
          changed_when: false
          
        - name: Display available storage
          debug:
            msg: "Available storage pools: {{ storage_status.stdout }}"

    # Download and verify OPNsense image
    - name: "{{ service_name }} - Download and verify image"
      when: confirm_deploy | bool
      tags: [opnsense, download]
      block:
        - name: Check if decompressed image already exists
          stat:
            path: "{{ image_path }}"
          register: image_exists
          
        - name: Check if compressed image already exists
          stat:
            path: "{{ compressed_image_path }}"
          register: compressed_exists
          when: not image_exists.stat.exists
          
        - name: Download OPNsense checksum file
          get_url:
            url: "{{ opnsense_checksum_url }}"
            dest: "{{ checksum_path }}.full"
            mode: '0644'
          when: not image_exists.stat.exists
          
        - name: Extract relevant checksum
          shell: |
            grep "{{ opnsense_image_name }}" "{{ checksum_path }}.full" | awk -F' = ' '{print $2}' > "{{ checksum_path }}"
          when: not image_exists.stat.exists
          
        - name: Read checksum
          slurp:
            src: "{{ checksum_path }}"
          register: checksum_content
          when: not image_exists.stat.exists
          
        - name: Set checksum fact
          set_fact:
            opnsense_sha256: "{{ checksum_content.content | b64decode | trim }}"
          when: not image_exists.stat.exists
          
        - name: Download OPNsense compressed image
          get_url:
            url: "{{ opnsense_image_url }}"
            dest: "{{ compressed_image_path }}"
            checksum: "sha256:{{ opnsense_sha256 }}"
            mode: '0644'
          when: not image_exists.stat.exists and not (compressed_exists.stat.exists | default(false))
          register: download_result
          
        - name: Decompress OPNsense image
          command: bunzip2 "{{ compressed_image_path }}"
          args:
            creates: "{{ image_path }}"
          when: not image_exists.stat.exists
          
        - name: Verify downloaded image
          stat:
            path: "{{ image_path }}"
          register: downloaded_image
          
        - name: Display image info
          debug:
            msg:
              - "Image downloaded: {{ downloaded_image.stat.exists }}"
              - "Image size: {{ (downloaded_image.stat.size / 1024 / 1024) | round(2) }} MB"
              - "Image path: {{ image_path }}"

    # Create VM
    - name: "{{ service_name }} - Create VM"
      when: confirm_deploy | bool
      tags: [opnsense, create]
      block:
        - name: Create VM with basic configuration
          command: |
            qm create {{ opnsense_vm_id }} \
              --name {{ opnsense_vm_name }} \
              --memory {{ opnsense_memory }} \
              --cores {{ opnsense_cores }} \
              --cpu {{ opnsense_cpu }} \
              --ostype l26 \
              --agent {{ opnsense_qemu_agent | int }} \
              --onboot {{ opnsense_onboot | int }}
          register: vm_create
          
        - name: Check if vmbr1 exists
          command: ip link show vmbr1
          register: vmbr1_check
          failed_when: false
          changed_when: false
          
        - name: Configure network interfaces (dual NIC)
          command: |
            qm set {{ opnsense_vm_id }} \
              --net0 virtio,bridge={{ opnsense_net0_bridge }} \
              --net1 virtio,bridge={{ opnsense_net1_bridge }}
          when: vm_create.changed and vmbr1_check.rc == 0
          
        - name: Configure network interfaces (single NIC)
          command: |
            qm set {{ opnsense_vm_id }} \
              --net0 virtio,bridge={{ opnsense_net0_bridge }}
          when: vm_create.changed and vmbr1_check.rc != 0
          
        - name: Warn about single NIC configuration
          debug:
            msg: "WARNING: vmbr1 not found. Configured with single NIC on vmbr0 only."
          when: vmbr1_check.rc != 0
          
        - name: Import disk image
          command: |
            qm importdisk {{ opnsense_vm_id }} {{ image_path }} {{ opnsense_storage }}
          register: import_disk
          when: vm_create.changed
          
        - name: Get imported disk name
          shell: |
            qm config {{ opnsense_vm_id }} | grep -E '^unused[0-9]+:' | head -1 | cut -d' ' -f2
          register: imported_disk
          when: import_disk.changed
          
        - name: Attach imported disk
          command: |
            qm set {{ opnsense_vm_id }} --scsi0 {{ imported_disk.stdout }},size={{ opnsense_disk_size }}
          when: imported_disk.stdout is defined and imported_disk.stdout
          
        - name: Set boot device
          command: |
            qm set {{ opnsense_vm_id }} --boot c --bootdisk scsi0
          when: vm_create.changed
          
        - name: Add serial console
          command: |
            qm set {{ opnsense_vm_id }} --serial0 socket --vga serial0
          when: vm_create.changed

    # Configure OPNsense before first boot
    - name: "{{ service_name }} - Pre-boot configuration"
      when: confirm_deploy | bool
      tags: [opnsense, configure]
      block:
        - name: Generate SSH key for OPNsense access
          openssh_keypair:
            path: "/root/.ssh/opnsense_key"
            type: rsa
            size: 4096
            comment: "ansible@{{ inventory_hostname }}"
          register: ssh_key
          
        - name: Load NBD kernel module
          modprobe:
            name: nbd
            params: "max_part=63"
            
        - name: Connect VM disk with qemu-nbd
          command: qemu-nbd -c /dev/nbd0 -f raw /dev/pve/vm-{{ opnsense_vm_id }}-disk-0
          
        - name: Create partition mappings
          command: kpartx -av /dev/nbd0
          register: kpartx_output
          
        - name: Wait for device mappings
          wait_for:
            path: /dev/nbd0p2
            state: present
            timeout: 10
            
        - name: Create mount point
          file:
            path: /mnt/opnsense
            state: directory
            
        - name: Clean up any existing mount
          mount:
            path: /mnt/opnsense
            state: unmounted
          failed_when: false
            
        - name: Try to find OPNsense partition
          shell: |
            for part in /dev/nbd0p*; do
              if file -s $part | grep -q "Unix Fast File system"; then
                echo $part
                exit 0
              fi
            done
            exit 1
          register: opnsense_partition
          
        - name: Mount OPNsense partition
          command: mount -t ufs -o ufstype=ufs2 {{ opnsense_partition.stdout }} /mnt/opnsense
          
        - name: Check if conf directory exists
          stat:
            path: /mnt/opnsense/conf
          register: conf_dir
          
        - name: Create config.xml from template
          copy:
            content: |
              <?xml version="1.0"?>
              <opnsense>
                <version>25.7</version>
                <theme>opnsense</theme>
                <sysctl>
                  <item>
                    <descr>Increase UFS read-ahead speeds to match the state of hard drives 2014 and lower CPU overhead</descr>
                    <tunable>vfs.read_max</tunable>
                    <value>default</value>
                  </item>
                </sysctl>
                <system>
                  <hostname>{{ opnsense_hostname | default('opnsense') }}</hostname>
                  <domain>{{ opnsense_domain | default('privatebox.local') }}</domain>
                  <timezone>UTC</timezone>
                  <timeservers>0.opnsense.pool.ntp.org 1.opnsense.pool.ntp.org</timeservers>
                  <webgui>
                    <protocol>https</protocol>
                  </webgui>
                  <ssh>
                    <enabled>enabled</enabled>
                    <permitrootlogin>1</permitrootlogin>
                    <passwordauth>0</passwordauth>
                    <group>admins</group>
                  </ssh>
                  <user>
                    <name>root</name>
                    <descr>System Administrator</descr>
                    <scope>system</scope>
                    <groupname>admins</groupname>
                    <password>$2y$10$YRVoF4SgskIsrXOvOQjGieB9XqHPRra9R7d80B3BZdbY/j21TwBfS</password>
                    <uid>0</uid>
                    <priv>user-shell-access</priv>
                    <authorizedkeys>{{ ssh_key.public_key | b64encode }}</authorizedkeys>
                  </user>
                  <group>
                    <name>admins</name>
                    <descr>System Administrators</descr>
                    <scope>system</scope>
                    <gid>1999</gid>
                    <member>0</member>
                    <priv>user-shell-access</priv>
                  </group>
                </system>
                <interfaces>
                  <lan>
                    <enable>1</enable>
                    <if>vtnet0</if>
                    <ipaddr>{{ opnsense_lan_ip }}</ipaddr>
                    <subnet>{{ opnsense_lan_netmask }}</subnet>
                  </lan>
                  <wan>
                    <enable>1</enable>
                    <if>vtnet1</if>
                    <ipaddr>dhcp</ipaddr>
                  </wan>
                </interfaces>
                <dhcpd>
                  <lan>
                    <enable>0</enable>
                  </lan>
                </dhcpd>
                <filter>
                  <rule>
                    <type>pass</type>
                    <ipprotocol>inet</ipprotocol>
                    <descr>Default allow LAN to any rule</descr>
                    <interface>lan</interface>
                    <source>
                      <network>lan</network>
                    </source>
                    <destination>
                      <any/>
                    </destination>
                  </rule>
                  <rule>
                    <type>pass</type>
                    <ipprotocol>inet6</ipprotocol>
                    <descr>Default allow LAN IPv6 to any rule</descr>
                    <interface>lan</interface>
                    <source>
                      <network>lan</network>
                    </source>
                    <destination>
                      <any/>
                    </destination>
                  </rule>
                </filter>
              </opnsense>
            dest: /mnt/opnsense/conf/config.xml
            backup: yes
            
        - name: Create SSH directory for root
          file:
            path: /mnt/opnsense/root/.ssh
            state: directory
            mode: '0700'
            
        - name: Add SSH public key
          copy:
            content: "{{ ssh_key.public_key }}"
            dest: /mnt/opnsense/root/.ssh/authorized_keys
            mode: '0600'
            
        - name: Unmount filesystem
          mount:
            path: /mnt/opnsense
            state: unmounted
            
        - name: Remove partition mappings
          command: kpartx -dv /dev/nbd0
          
        - name: Disconnect NBD device
          command: qemu-nbd -d /dev/nbd0
          
        - name: Clean up mount point
          file:
            path: /mnt/opnsense
            state: absent

    # Start VM and wait for it to be accessible
    - name: "{{ service_name }} - Start VM"
      when: confirm_deploy | bool
      tags: [opnsense, start]
      block:
        - name: Start VM
          command: qm start {{ opnsense_vm_id }}
          register: vm_start
          failed_when: false
          
        - name: Check if VM started successfully
          fail:
            msg: "VM failed to start: {{ vm_start.stderr | default('Unknown error') }}"
          when: vm_start.rc != 0
          
        - name: Wait for VM to boot
          pause:
            seconds: 60
          when: vm_start.rc == 0
          
        - name: Get VM status
          command: qm status {{ opnsense_vm_id }}
          register: vm_status
          changed_when: false
          
        - name: Display VM status
          debug:
            msg: "VM Status: {{ vm_status.stdout }}"
            
        - name: Get VM configuration
          command: qm config {{ opnsense_vm_id }}
          register: vm_config
          changed_when: false
          
        - name: Note about initial configuration
          debug:
            msg:
              - "=========================================="
              - "OPNsense VM Deployment Complete!"
              - "=========================================="
              - ""
              - "VM ID: {{ opnsense_vm_id }}"
              - "VM Name: {{ opnsense_vm_name }}"
              - "Status: {{ vm_status.stdout }}"
              - ""
              - "Network Configuration:"
              - "- LAN (net0): {{ opnsense_net0_bridge }} (management)"
              - "- WAN (net1): {{ opnsense_net1_bridge }} (isolated)"
              - ""
              - "Initial Access:"
              - "1. SSH: ssh -i /root/.ssh/opnsense_key root@{{ opnsense_lan_ip }}"
              - "2. Web UI: https://{{ opnsense_lan_ip }}"
              - "3. Console: qm terminal {{ opnsense_vm_id }}"
              - ""
              - "Configured Settings:"
              - "- LAN IP: {{ opnsense_lan_ip }}/{{ opnsense_lan_netmask }}"
              - "- Gateway: {{ opnsense_lan_gateway }}"
              - "- SSH enabled with key authentication only"
              - ""
              - "Next Steps:"
              - "1. Complete initial setup via console"
              - "2. Run opnsense-configure-initial.yml"
              - "=========================================="

    # Post-deployment validation
    - name: "{{ service_name }} - Post-deployment validation"
      when: confirm_deploy | bool
      tags: [opnsense, validate]
      block:
        - name: Verify VM is running
          command: qm status {{ opnsense_vm_id }}
          register: final_status
          failed_when: "'running' not in final_status.stdout"
          changed_when: false
          
        - name: Check QEMU guest agent
          command: qm agent {{ opnsense_vm_id }} ping
          register: agent_ping
          failed_when: false
          changed_when: false
          
        - name: Display agent status
          debug:
            msg: "QEMU Guest Agent: {{ 'Available' if agent_ping.rc == 0 else 'Not ready (this is normal for initial boot)' }}"
            
        - name: Save deployment info
          copy:
            content: |
              {{ service_name }} VM Deployment Information
              =========================================
              Deployed: {{ ansible_date_time.iso8601 }}
              Host: {{ inventory_hostname }}
              
              VM Configuration:
              - VM ID: {{ opnsense_vm_id }}
              - VM Name: {{ opnsense_vm_name }}
              - Memory: {{ opnsense_memory }} MB
              - Cores: {{ opnsense_cores }}
              - Disk: {{ opnsense_disk_size }}
              - Storage: {{ opnsense_storage }}
              
              Network:
              - WAN: {{ opnsense_net0_bridge }}
              - LAN: {{ opnsense_net1_bridge }}
              
              Image: {{ opnsense_image_name }}
              Version: {{ opnsense_version }}
            dest: "/opt/privatebox/deployment-info-opnsense-vm.txt"
            mode: '0644'
          delegate_to: localhost
          become: false

  handlers:
    - name: restart vm
      command: qm reset {{ opnsense_vm_id }}