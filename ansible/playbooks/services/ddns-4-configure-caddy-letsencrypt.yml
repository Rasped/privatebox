---
- name: "DynDNS 4: Configure Caddy Let's Encrypt"
  hosts: container-host
  become: true
  gather_facts: true

  vars:
    # Template configuration for Semaphore
    template_config:
      semaphore_environment: "DynamicDNS+ServicePasswords"
      semaphore_inventory: "privatebox"
      semaphore_category: "services"

    # Caddy configuration
    caddy_config_dir: "/opt/caddy"
    caddy_data_dir: "/opt/caddy/data"
    management_vm_ip: "{{ ansible_default_ipv4.address }}"
    quadlet_system_path: "/etc/containers/systemd"

    # Load from DynamicDNS environment
    dns_provider: "{{ DNS_PROVIDER | default('') }}"
    ddns_domain: "{{ DDNS_DOMAIN | default('') }}"
    letsencrypt_email: "{{ LETSENCRYPT_EMAIL | default('') }}"
    dns_api_token: "{{ DNS_API_TOKEN | default('') }}"
    cloudflare_zone_id: "{{ CLOUDFLARE_ZONE_ID | default('') }}"

    # Services to configure
    default_services:
      - name: portainer
        port: 1443
        protocol: https
      - name: semaphore
        port: 2443
        protocol: https
      - name: adguard
        port: 3443
        protocol: https
      - name: headplane
        port: 8080
        protocol: http
      - name: homer
        port: 8081
        protocol: http

    # DNS provider Caddy module mapping
    dns_provider_modules:
      desec: "desec"
      dynu: "dynu"
      cloudflare: "cloudflare"
      duckdns: "duckdns"

    # Environment variable names per provider
    dns_env_var_names:
      desec: "DESEC_TOKEN"
      dynu: "DYNU_API_KEY"
      cloudflare: "CLOUDFLARE_API_TOKEN"
      duckdns: "DUCKDNS_TOKEN"

    enable_debug: true

  tasks:
    # ============================================
    # Phase 1: Validation
    # ============================================

    - name: Display configuration header
      debug:
        msg:
          - "========================================"
          - "   CADDY LET'S ENCRYPT CONFIGURATION"
          - "========================================"
          - "Provider: {{ dns_provider }}"
          - "Domain: {{ ddns_domain }}"
          - "Email: {{ letsencrypt_email }}"

    - name: Validate required variables
      assert:
        that:
          - dns_provider | length > 0
          - ddns_domain | length > 0
          - letsencrypt_email | length > 0
          - dns_api_token | length > 0
        fail_msg: |
          Missing required variables from DynamicDNS environment.
          Please run 'DynDNS 1: Setup Environment' first.

    - name: Validate DNS provider is supported
      assert:
        that:
          - dns_provider in dns_provider_modules.keys()
        fail_msg: "Unsupported DNS provider: {{ dns_provider }}"

    - name: Set DNS module and env var name
      set_fact:
        caddy_dns_module: "{{ dns_provider_modules[dns_provider] }}"
        dns_token_env_var: "{{ dns_env_var_names[dns_provider] }}"

    # ============================================
    # Phase 2: Write DNS Credentials to Env File
    # ============================================

    - name: Ensure /etc/privatebox directory exists
      file:
        path: /etc/privatebox
        state: directory
        mode: '0755'
        owner: root
        group: root

    - name: Write DNS credentials to environment file
      copy:
        content: |
          # DNS Provider Configuration for Let's Encrypt
          # Generated by ddns-4-configure-caddy-letsencrypt.yml
          # DO NOT EDIT MANUALLY

          DNS_PROVIDER={{ dns_provider }}
          DDNS_DOMAIN={{ ddns_domain }}
          LETSENCRYPT_EMAIL={{ letsencrypt_email }}
          {{ dns_token_env_var }}={{ dns_api_token }}
          {% if dns_provider == 'cloudflare' and cloudflare_zone_id | length > 0 %}
          CLOUDFLARE_ZONE_ID={{ cloudflare_zone_id }}
          {% endif %}
        dest: /etc/privatebox/ddns-config.env
        mode: '0600'
        owner: root
        group: root
      no_log: true  # Don't log secrets

    - name: Display environment file status
      debug:
        msg: "✓ DNS credentials written to /etc/privatebox/ddns-config.env"

    # ============================================
    # Phase 3: Create Custom Domains Configuration
    # ============================================

    - name: Generate custom domains Caddyfile snippet
      copy:
        content: |
          # Custom domain configuration for {{ ddns_domain }}
          # Generated by ddns-4-configure-caddy-letsencrypt.yml
          # This file is imported by the main Caddyfile

          # Wildcard certificate for custom domain
          *.{{ ddns_domain }} {
              # Let's Encrypt via DNS-01 challenge
              tls {
                  dns {{ caddy_dns_module }} {env.{{ dns_token_env_var }}}
                  email {env.LETSENCRYPT_EMAIL}
              }

          {% for service in default_services %}
              # {{ service.name | capitalize }}
              @{{ service.name }} host {{ service.name }}.{{ ddns_domain }}
              handle @{{ service.name }} {
          {% if service.protocol == 'https' %}
                  reverse_proxy https://{{ management_vm_ip }}:{{ service.port }} {
                      header_up Host {upstream_hostport}
                      header_up X-Real-IP {remote_host}
                      header_up X-Forwarded-For {remote_host}
                      header_up X-Forwarded-Proto {scheme}

                      transport http {
                          tls_insecure_skip_verify
                      }
                  }
          {% else %}
                  reverse_proxy http://{{ management_vm_ip }}:{{ service.port }} {
                      header_up Host {upstream_hostport}
                      header_up X-Real-IP {remote_host}
                      header_up X-Forwarded-For {remote_host}
                      header_up X-Forwarded-Proto {scheme}
                  }
          {% endif %}
              }

          {% endfor %}
              # Security headers
              header {
                  -Server
                  X-Content-Type-Options nosniff
                  X-Frame-Options DENY
              }

              # Catch-all for undefined services
              handle {
                  respond "Service not configured" 404
              }
          }
        dest: "{{ caddy_config_dir }}/custom-domains.conf"
        mode: '0644'
        owner: root
        group: root
      register: custom_domains_created

    - name: Display custom domains config status
      debug:
        msg: "✓ Custom domains configuration created at {{ caddy_config_dir }}/custom-domains.conf"

    # ============================================
    # Phase 4: Update Main Caddyfile with Import
    # ============================================

    - name: Check if import already exists in Caddyfile
      command: grep -q "import.*custom-domains.conf" {{ caddy_config_dir }}/Caddyfile
      register: import_check
      failed_when: false
      changed_when: false

    - name: Add import directive to Caddyfile
      when: import_check.rc != 0
      lineinfile:
        path: "{{ caddy_config_dir }}/Caddyfile"
        line: "\n# Import custom domain configuration\nimport {{ caddy_config_dir }}/custom-domains.conf"
        insertafter: EOF
      register: caddyfile_updated

    - name: Display Caddyfile update status
      debug:
        msg: >-
          {{ 'Added import directive to Caddyfile' if import_check.rc != 0
          else 'Import directive already present in Caddyfile' }}

    # ============================================
    # Phase 5: Update Caddy Quadlet with Env File
    # ============================================

    - name: Check if EnvironmentFile already exists in Quadlet
      command: grep -q "EnvironmentFile=/etc/privatebox/ddns-config.env" {{ quadlet_system_path }}/caddy.container
      register: envfile_check
      failed_when: false
      changed_when: false

    - name: Add EnvironmentFile directive to Caddy Quadlet
      when: envfile_check.rc != 0
      lineinfile:
        path: "{{ quadlet_system_path }}/caddy.container"
        line: "EnvironmentFile=/etc/privatebox/ddns-config.env"
        insertafter: "^Environment="
        regexp: "^EnvironmentFile=/etc/privatebox/ddns-config.env"
      register: quadlet_updated

    - name: Display Quadlet update status
      debug:
        msg: >-
          {{ 'Added EnvironmentFile to Caddy Quadlet' if envfile_check.rc != 0
          else 'EnvironmentFile already present in Caddy Quadlet' }}

    # ============================================
    # Phase 6: Reload Systemd and Restart Caddy
    # ============================================

    - name: Reload systemd daemon
      when: quadlet_updated is changed
      systemd:
        daemon_reload: true

    - name: Restart Caddy service to apply changes
      systemd:
        name: caddy.service
        state: restarted
      register: caddy_restarted

    - name: Wait for Caddy to start
      wait_for:
        timeout: 10
      when: caddy_restarted is changed

    - name: Check Caddy service status
      systemd:
        name: caddy.service
      register: caddy_status

    - name: Display Caddy status
      debug:
        msg: "Caddy service: {{ caddy_status.status.ActiveState }} ({{ caddy_status.status.SubState }})"

    - name: Fail if Caddy is not running
      fail:
        msg: |
          Caddy service failed to start. Check logs with:
          journalctl -u caddy.service -n 50
      when: caddy_status.status.ActiveState != "active"

    # ============================================
    # Phase 7: Wait for Certificate Issuance
    # ============================================

    - name: Display certificate issuance wait message
      debug:
        msg:
          - "Waiting for Let's Encrypt certificate issuance..."
          - "This may take up to 60 seconds for DNS propagation and ACME challenge"

    - name: Wait for certificate issuance
      pause:
        seconds: 60

    # ============================================
    # Phase 8: Verify Certificate
    # ============================================

    - name: Check for certificate files
      find:
        paths: "{{ caddy_data_dir }}/caddy/certificates/acme-v02.api.letsencrypt.org-directory"
        patterns: "*.{{ ddns_domain }}/*.crt"
        recurse: yes
      register: cert_files

    - name: Display certificate files found
      debug:
        msg: "Found {{ cert_files.matched }} certificate file(s)"
      when: enable_debug | bool

    - name: Verify certificate was issued
      assert:
        that:
          - cert_files.matched > 0
        fail_msg: |
          No certificates found. Certificate issuance may have failed.
          Check Caddy logs: journalctl -u caddy.service -n 100
        success_msg: "✓ Let's Encrypt certificate issued successfully"

    - name: Get certificate details
      when: cert_files.matched > 0
      command: >
        openssl x509 -in {{ cert_files.files[0].path }}
        -noout -issuer -subject -dates
      register: cert_details
      changed_when: false

    - name: Display certificate details
      debug:
        msg: "{{ cert_details.stdout_lines }}"
      when: cert_files.matched > 0

    # ============================================
    # Phase 9: Test HTTPS Access
    # ============================================

    - name: Test HTTPS access to first service
      uri:
        url: "https://portainer.{{ ddns_domain }}"
        method: GET
        validate_certs: no
        follow_redirects: yes
        status_code: [200, 302, 401]
        timeout: 10
      register: https_test
      failed_when: false

    - name: Display HTTPS test result
      debug:
        msg: >-
          HTTPS test: portainer.{{ ddns_domain }} → HTTP {{ https_test.status | default('FAILED') }}
          ({{ 'PASS' if https_test.status is defined and https_test.status in [200, 302, 401] else 'FAIL - check DNS and Caddy logs' }})

    # ============================================
    # Phase 10: Display Summary
    # ============================================

    - name: Display final summary
      debug:
        msg:
          - "========================================"
          - "   LET'S ENCRYPT SETUP - COMPLETE"
          - "========================================"
          - ""
          - "Custom Domain: {{ ddns_domain }}"
          - "DNS Provider: {{ dns_provider }}"
          - "Certificate Email: {{ letsencrypt_email }}"
          - ""
          - "Services Now Accessible Via HTTPS:"
          - "{% for service in default_services %}  - https://{{ service.name }}.{{ ddns_domain }}{% endfor %}"
          - ""
          - "Certificate Details:"
          - "  • Issuer: Let's Encrypt"
          - "  • Type: Wildcard (*.{{ ddns_domain }})"
          - "  • Challenge: DNS-01"
          - "  • Auto-renewal: Enabled (Caddy manages automatically)"
          - ""
          - "Configuration Files:"
          - "  • Main Caddyfile: {{ caddy_config_dir }}/Caddyfile"
          - "  • Custom domains: {{ caddy_config_dir }}/custom-domains.conf"
          - "  • DNS credentials: /etc/privatebox/ddns-config.env"
          - "  • Certificates: {{ caddy_data_dir }}/caddy/certificates/"
          - ""
          - "Next Steps:"
          - "  1. Test access: https://portainer.{{ ddns_domain }}"
          - "  2. Verify no certificate warnings in browser"
          - "  3. Both .lan and custom domains should work"
          - ""
          - "Troubleshooting:"
          - "  • Caddy logs: journalctl -u caddy.service -f"
          - "  • Certificate status: ls -lh {{ caddy_data_dir }}/caddy/certificates/"
          - "  • DNS resolution: dig @10.10.20.10 portainer.{{ ddns_domain }}"
          - ""
          - "========================================"
