---
# Task 6.1: Pre-Migration Validation
# Ensure environment ready for migration to VLAN network

- name: Migration: Pre-Check Validation
  hosts: all
  gather_facts: yes
  vars_prompt:
    - name: continue_on_warning
      prompt: "Continue migration if warnings are found? (yes/no)"
      default: "no"
      private: no
      semaphore_type: "yes_no"
      semaphore_display_name: "Continue on Warnings"
      semaphore_description: "Allow migration to proceed with non-critical warnings"

  vars:
    validation_results_path: "/var/log/privatebox/pre-migration-validation.log"
    rollback_script_path: "/opt/privatebox/migration/rollback-flat-network.sh"
    critical_services:
      - docker.service
      - systemd-networkd.service
      - systemd-resolved.service
    required_files:
      - /etc/privatebox-proxmox-host
      - /opt/privatebox/ansible/inventories/development/hosts.yml
    
  pre_tasks:
    # Validate required host groups exist
    - name: Check if proxmox-host group is defined
      assert:
        that:
          - groups['proxmox-host'] is defined
          - groups['proxmox-host'] | length > 0
        fail_msg: |
          ERROR: The 'proxmox-host' group is not defined in the inventory.
          
          This playbook requires a Proxmox host to be defined in your inventory.
          Please add a proxmox-host group to your inventory file:
          
          [proxmox-host]
          your-proxmox-server ansible_host=192.168.1.X ansible_user=root
          
          The host should have SSH access configured with appropriate credentials.
        success_msg: "✓ Found {{ groups['proxmox-host'] | length }} Proxmox host(s) in inventory"

  tasks:
    # Create directories for logs and rollback scripts
    - name: Create migration directories
      file:
        path: "{{ item }}"
        state: directory
        mode: '0755'
      loop:
        - /var/log/privatebox
        - /opt/privatebox/migration
      become: yes

    # Initialize validation log
    - name: Initialize validation log
      copy:
        content: |
          Pre-Migration Validation Report
          ===============================
          Date: {{ ansible_date_time.iso8601 }}
          Hostname: {{ ansible_hostname }}
          OS: {{ ansible_distribution }} {{ ansible_distribution_version }}
          
        dest: "{{ validation_results_path }}"
        mode: '0644'
      become: yes

    # Check critical services status
    - name: Check critical services
      systemd:
        name: "{{ item }}"
      register: service_status
      loop: "{{ critical_services }}"
      failed_when: false
      become: yes

    - name: Log service status
      lineinfile:
        path: "{{ validation_results_path }}"
        line: "Service {{ item.item }}: {{ 'RUNNING' if item.status.ActiveState == 'active' else 'FAILED - ' + item.status.ActiveState }}"
      loop: "{{ service_status.results }}"
      become: yes

    - name: Fail if critical services not running
      fail:
        msg: "Critical service {{ item.item }} is not active: {{ item.status.ActiveState }}"
      when: item.status.ActiveState != 'active'
      loop: "{{ service_status.results }}"

    # Check required files exist
    - name: Check required files
      stat:
        path: "{{ item }}"
      register: file_checks
      loop: "{{ required_files }}"
      become: yes

    - name: Log file status
      lineinfile:
        path: "{{ validation_results_path }}"
        line: "File {{ item.item }}: {{ 'EXISTS' if item.stat.exists else 'MISSING' }}"
      loop: "{{ file_checks.results }}"
      become: yes

    - name: Fail if required files missing
      fail:
        msg: "Required file {{ item.item }} is missing"
      when: not item.stat.exists
      loop: "{{ file_checks.results }}"

    # Check network connectivity
    - name: Check network interfaces
      command: ip -br link show
      register: network_interfaces
      changed_when: false
      become: yes

    - name: Log network interfaces
      lineinfile:
        path: "{{ validation_results_path }}"
        line: "Network Interfaces:\n{{ network_interfaces.stdout }}"
      become: yes

    # Check disk space
    - name: Check disk space
      shell: df -h / /var /opt | grep -v Filesystem
      register: disk_space
      changed_when: false
      become: yes

    - name: Log disk space
      lineinfile:
        path: "{{ validation_results_path }}"
        line: "Disk Space:\n{{ disk_space.stdout }}"
      become: yes

    - name: Check for low disk space
      shell: |
        df / /var /opt --output=pcent | tail -n +2 | sed 's/%//' | 
        while read usage; do
          if [ $usage -gt 85 ]; then
            echo "WARNING"
            exit 1
          fi
        done
      register: disk_warning
      failed_when: false
      changed_when: false
      become: yes

    - name: Warn on low disk space
      debug:
        msg: "WARNING: Low disk space detected. Migration may fail."
      when: disk_warning.rc != 0

    # Check if AdGuard is running
    - name: Check AdGuard container status
      shell: systemctl is-active container-adguard.service || echo "not-found"
      register: adguard_status
      changed_when: false
      become: yes

    - name: Log AdGuard status
      lineinfile:
        path: "{{ validation_results_path }}"
        line: "AdGuard Service: {{ adguard_status.stdout }}"
      become: yes

    # Check Proxmox host connectivity
    - name: Read Proxmox host IP
      slurp:
        src: /etc/privatebox-proxmox-host
      register: proxmox_host_content
      become: yes
      when: "'/etc/privatebox-proxmox-host' in required_files"

    - name: Extract Proxmox IP
      set_fact:
        proxmox_ip: "{{ (proxmox_host_content.content | b64decode).strip() }}"
      when: proxmox_host_content is defined

    - name: Test Proxmox connectivity
      wait_for:
        host: "{{ proxmox_ip }}"
        port: 22
        timeout: 10
      register: proxmox_connectivity
      failed_when: false
      when: proxmox_ip is defined

    - name: Log Proxmox connectivity
      lineinfile:
        path: "{{ validation_results_path }}"
        line: "Proxmox Host ({{ proxmox_ip }}): {{ 'REACHABLE' if proxmox_connectivity is succeeded else 'UNREACHABLE' }}"
      when: proxmox_ip is defined
      become: yes

    # Create rollback script
    - name: Create rollback script
      copy:
        content: |
          #!/bin/bash
          # Rollback script for flat network migration
          # Generated: {{ ansible_date_time.iso8601 }}
          
          set -e
          
          echo "Starting rollback to flat network configuration..."
          
          # Stop OPNsense VM if exists
          if command -v qm &> /dev/null; then
              VM_ID=$(qm list | grep -i opnsense | awk '{print $1}' || true)
              if [ -n "$VM_ID" ]; then
                  echo "Stopping OPNsense VM (ID: $VM_ID)..."
                  qm stop $VM_ID || true
              fi
          fi
          
          # Restore network configuration
          echo "Restoring network configuration..."
          cp /etc/netplan/*.yaml.pre-migration /etc/netplan/ 2>/dev/null || true
          netplan apply || true
          
          # Restart critical services
          echo "Restarting services..."
          systemctl restart systemd-networkd
          systemctl restart docker
          
          # Restore service configurations
          if [ -d "/opt/privatebox/backup/pre-migration" ]; then
              echo "Restoring service configurations..."
              cp -r /opt/privatebox/backup/pre-migration/* / 2>/dev/null || true
          fi
          
          echo "Rollback complete. Please verify network connectivity."
        dest: "{{ rollback_script_path }}"
        mode: '0755'
      become: yes

    # Create backup of current configuration
    - name: Create pre-migration backup directory
      file:
        path: /opt/privatebox/backup/pre-migration
        state: directory
        mode: '0755'
      become: yes

    - name: Backup network configuration
      shell: |
        cp /etc/netplan/*.yaml /etc/netplan/*.yaml.pre-migration 2>/dev/null || true
        cp -r /etc/netplan /opt/privatebox/backup/pre-migration/ 2>/dev/null || true
      become: yes

    # Summary and decision
    - name: Count warnings and errors
      shell: |
        grep -c "WARNING\|FAILED\|MISSING\|UNREACHABLE" {{ validation_results_path }} || echo 0
      register: issue_count
      changed_when: false
      become: yes

    - name: Generate summary
      lineinfile:
        path: "{{ validation_results_path }}"
        line: |+
          
          Summary
          -------
          Total Issues Found: {{ issue_count.stdout }}
          Rollback Script: {{ rollback_script_path }}
          Continue on Warning: {{ continue_on_warning }}
          
      become: yes

    - name: Display validation results
      debug:
        msg: |
          Pre-Migration Validation Complete
          Issues Found: {{ issue_count.stdout }}
          Log File: {{ validation_results_path }}
          Rollback Script: {{ rollback_script_path }}

    - name: Fail if issues found and not continuing
      fail:
        msg: |
          Validation found {{ issue_count.stdout }} issue(s).
          Review the log at {{ validation_results_path }}
          To proceed anyway, set continue_on_warning=yes
      when:
        - issue_count.stdout|int > 0
        - continue_on_warning|lower != 'yes'

    - name: Final validation status
      debug:
        msg: "✓ Pre-migration validation passed. Environment is ready for VLAN migration."
      when: issue_count.stdout|int == 0