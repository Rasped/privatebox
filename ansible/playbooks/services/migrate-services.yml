---
# Task 6.4: Migrate Services to VLANs
# Move existing services to appropriate VLANs

- name: Migrate Services to VLAN Network
  hosts: container-host
  gather_facts: yes
  vars_prompt:
    - name: migration_mode
      prompt: "Migration mode (test/production)"
      default: "test"
      private: no
      semaphore_type: "choice"
      semaphore_choices: ["test", "production"]
      semaphore_display_name: "Migration Mode"
      semaphore_description: "Test mode simulates changes, production applies them"
    
    - name: service_downtime_ok
      prompt: "Allow brief service downtime? (yes/no)"
      default: "no"
      private: no
      semaphore_type: "yes_no"
      semaphore_display_name: "Allow Downtime"
      semaphore_description: "Services may be briefly unavailable during migration"

  pre_tasks:
    # Validate required host groups exist
    - name: Check if container-host group is defined
      assert:
        that:
          - groups['container-host'] is defined
          - groups['container-host'] | length > 0
        fail_msg: |
          ERROR: The 'container-host' group is not defined in the inventory.
          
          This playbook requires a container host to be defined in your inventory.
          Please ensure your inventory includes the container-host group.
        success_msg: "✓ Found {{ groups['container-host'] | length }} container host(s) in inventory"

  vars:
    # Service to VLAN mapping
    service_vlan_map:
      adguard:
        service: "container-adguard.service"
        vlan: "101"  # Infrastructure VLAN
        ip: "10.101.0.10"
        description: "DNS filtering service"
      portainer:
        service: "docker.service"
        vlan: "100"  # Management VLAN
        ip: "10.100.0.20"
        description: "Container management"
      semaphore:
        service: "docker.service"
        vlan: "100"  # Management VLAN  
        ip: "10.100.0.21"
        description: "Ansible automation UI"
    
    # Network configuration paths
    netplan_dir: "/etc/netplan"
    netplan_config: "50-cloud-init.yaml"
    
  tasks:
    # Discover network interface dynamically
    - name: Discover primary network interface
      set_fact:
        primary_interface: "{{ ansible_default_ipv4.interface }}"
      when: ansible_default_ipv4.interface is defined

    - name: Validate primary interface
      assert:
        that:
          - primary_interface is defined
          - primary_interface != ""
        fail_msg: "Could not determine primary network interface"
        success_msg: "✓ Primary interface detected: {{ primary_interface }}"

    # Discover running container services
    - name: Discover container services
      shell: |
        # Find all systemd services for containers
        systemctl list-units --type=service --state=running | grep -E "container-.*\.service|podman-.*\.service|docker\.service" | awk '{print $1}' | sort
      register: discovered_services
      changed_when: false
      become: yes

    - name: Parse discovered services
      set_fact:
        running_containers: |
          {% set services = [] %}
          {% for line in discovered_services.stdout_lines %}
            {% if 'container-' in line %}
              {% set name = line.replace('container-', '').replace('.service', '') %}
              {% set _ = services.append({'name': name, 'service': line, 'type': 'podman'}) %}
            {% elif line == 'docker.service' %}
              {% set _ = services.append({'name': 'docker', 'service': line, 'type': 'docker'}) %}
            {% endif %}
          {% endfor %}
          {{ services }}

    - name: Display discovered services
      debug:
        msg: |
          Discovered Container Services:
          {{ running_containers | to_nice_yaml }}

    # Pre-migration checks
    - name: Check current network configuration
      command: ip addr show
      register: current_network
      changed_when: false

    - name: Check service status
      systemd:
        name: "{{ item.value.service }}"
      register: service_status
      loop: "{{ service_vlan_map | dict2items }}"
      loop_control:
        label: "{{ item.key }}"
      failed_when: false

    - name: Create migration status report
      copy:
        content: |
          Service Migration Status Report
          ==============================
          Date: {{ ansible_date_time.iso8601 }}
          Mode: {{ migration_mode }}
          
          Current Network:
          {{ current_network.stdout }}
          
          Services to Migrate:
          {% for name, config in service_vlan_map.items() %}
          - {{ name }}: {{ config.description }}
            Target VLAN: {{ config.vlan }}
            Target IP: {{ config.ip }}
            Service: {{ config.service }}
          {% endfor %}
        dest: /var/log/service-migration-{{ ansible_date_time.epoch }}.log
      become: yes

    # Create VLAN network configuration
    - name: Read current netplan configuration
      slurp:
        src: "{{ netplan_dir }}/{{ netplan_config }}"
      register: current_netplan
      become: yes

    - name: Parse current netplan
      set_fact:
        netplan_data: "{{ current_netplan.content | b64decode | from_yaml }}"

    - name: Create VLAN netplan configuration
      set_fact:
        vlan_netplan:
          network:
            version: 2
            ethernets:
              {{ primary_interface }}:  # Primary interface
                dhcp4: false
                dhcp6: false
            vlans:
              vlan100:
                id: 100
                link: {{ primary_interface }}
                addresses: ["10.100.0.2/24"]
                routes:
                  - to: default
                    via: 10.100.0.1
                nameservers:
                  addresses: ["10.101.0.10", "1.1.1.1"]
              vlan101:
                id: 101
                link: {{ primary_interface }}
                addresses: ["10.101.0.2/24"]

    - name: Show planned network configuration
      debug:
        msg: |
          Planned VLAN Configuration:
          {{ vlan_netplan | to_nice_yaml }}
      when: migration_mode == "test"

    # Test mode - simulate changes
    - name: Test mode - Simulate service migrations
      debug:
        msg: |
          TEST MODE - Would migrate {{ item.key }}:
          - Stop service: {{ item.value.service }}
          - Update network to VLAN {{ item.value.vlan }}
          - Assign IP: {{ item.value.ip }}
          - Restart service
      loop: "{{ service_vlan_map | dict2items }}"
      when: migration_mode == "test"

    # Production mode - apply changes
    - block:
        # Backup current configuration
        - name: Backup current netplan
          copy:
            src: "{{ netplan_dir }}/{{ netplan_config }}"
            dest: "{{ netplan_dir }}/{{ netplan_config }}.pre-vlan-{{ ansible_date_time.epoch }}"
            remote_src: yes
          become: yes

        # Update container configurations for new network
        - name: Find container configuration files
          find:
            paths:
              - /etc/containers/systemd/
              - /etc/systemd/system/
            patterns:
              - "*.container"
              - "container-*.service"
            recurse: no
          register: container_configs
          become: yes

        - name: Update container network bindings
          block:
            - name: Check if service has configuration
              stat:
                path: "{{ item }}"
              register: config_stat
              loop: "{{ container_configs.files | map(attribute='path') | list }}"
              become: yes

            - name: Update AdGuard container network binding
              replace:
                path: /etc/containers/systemd/adguard.container
                regexp: 'PublishPort=\d+\.\d+\.\d+\.\d+:(\d+):(\d+)'
                replace: 'PublishPort={{ service_vlan_map.adguard.ip }}:\1:\2'
              become: yes
              when:
                - "'adguard' in service_vlan_map"
                - "'/etc/containers/systemd/adguard.container' in (container_configs.files | map(attribute='path') | list)"

        # Apply network configuration
        - name: Write new netplan configuration
          copy:
            content: "{{ vlan_netplan | to_nice_yaml }}"
            dest: "{{ netplan_dir }}/60-vlan-config.yaml"
            backup: yes
          become: yes
          register: netplan_written

        - name: Apply netplan configuration
          command: netplan apply
          become: yes
          when: netplan_written.changed
          register: netplan_apply

        # Restart services with new network
        - name: Reload systemd for container changes
          systemd:
            daemon_reload: yes
          become: yes

        - name: Restart migrated services
          systemd:
            name: "{{ item.value.service }}"
            state: restarted
          loop: "{{ service_vlan_map | dict2items }}"
          loop_control:
            label: "{{ item.key }}"
          become: yes
          when: service_downtime_ok|bool

      when: migration_mode == "production"

    # Verify migration
    - name: Wait for network to stabilize
      pause:
        seconds: 10
      when: migration_mode == "production"

    - name: Check VLAN interfaces
      command: ip addr show {{ item }}
      register: vlan_check
      loop:
        - vlan100
        - vlan101
      failed_when: false
      changed_when: false
      when: migration_mode == "production"

    - name: Test service connectivity
      wait_for:
        host: "{{ item.value.ip }}"
        port: "{{ 3000 if item.key == 'adguard' else 9000 if item.key == 'portainer' else 3000 }}"
        timeout: 30
      loop: "{{ service_vlan_map | dict2items }}"
      loop_control:
        label: "{{ item.key }} at {{ item.value.ip }}"
      when:
        - migration_mode == "production"
        - service_downtime_ok|bool
      register: connectivity_test
      failed_when: false

    # Create migration rollback script
    - name: Create rollback script
      copy:
        content: |
          #!/bin/bash
          # Service migration rollback script
          # Generated: {{ ansible_date_time.iso8601 }}
          
          echo "Rolling back service migration..."
          
          # Restore network configuration
          if [ -f "{{ netplan_dir }}/{{ netplan_config }}.pre-vlan-*" ]; then
              BACKUP=$(ls -t {{ netplan_dir }}/{{ netplan_config }}.pre-vlan-* | head -1)
              cp "$BACKUP" "{{ netplan_dir }}/{{ netplan_config }}"
              rm -f {{ netplan_dir }}/60-vlan-config.yaml
              netplan apply
              echo "✓ Network configuration restored"
          fi
          
          # Restart services
          {% for service in running_containers %}
          systemctl restart {{ service.service }} || true
          {% endfor %}
          
          echo "Rollback complete. Services should be accessible on original IPs."
        dest: /opt/privatebox/scripts/rollback-service-migration.sh
        mode: '0755'
      become: yes
      when: migration_mode == "production"

    # Create migration summary
    - name: Generate migration summary
      copy:
        content: |
          Service Migration Summary
          ========================
          Date: {{ ansible_date_time.iso8601 }}
          Mode: {{ migration_mode }}
          
          {% if migration_mode == "production" %}
          Migration Results:
          {% for result in connectivity_test.results %}
          - {{ result.item.key }}: {{ 'SUCCESS' if result is not failed else 'FAILED' }}
            IP: {{ result.item.value.ip }}
            VLAN: {{ result.item.value.vlan }}
          {% endfor %}
          
          Network Status:
          {% for vlan in vlan_check.results %}
          {{ vlan.item }}: {{ 'UP' if vlan.rc == 0 else 'DOWN' }}
          {% endfor %}
          {% else %}
          TEST MODE - No changes applied
          {% endif %}
          
          Next Steps:
          1. Update DNS records for new IPs
          2. Update firewall rules for VLAN access
          3. Test all service functionality
          4. Update monitoring for new network
        dest: /opt/privatebox/migration-summary-{{ ansible_date_time.epoch }}.txt
      become: yes

    - name: Display migration status
      debug:
        msg: |
          {% if migration_mode == "test" %}
          ℹ TEST MODE COMPLETE - No changes applied
          Review the plan above and run in production mode when ready.
          {% else %}
          ✓ Service migration to VLANs complete!
          
          Services migrated:
          {% for name, config in service_vlan_map.items() %}
          - {{ name }}: {{ config.ip }} (VLAN {{ config.vlan }})
          {% endfor %}
          
          Important: Update DNS and firewall rules immediately!
          Summary saved to: /opt/privatebox/migration-summary-{{ ansible_date_time.epoch }}.txt
          {% endif %}