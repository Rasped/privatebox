---
# Task 3.2: Create OPNsense VM
# This playbook creates the OPNsense VM with proper specifications
# and attaches network interfaces according to the network plan

- name: Create OPNsense VM
  hosts: proxmox
  gather_facts: true
  
  vars:
    vm_id: 100
    vm_name: "opnsense"
    vm_cores: 2
    vm_memory: 4096
    vm_disk_size: "32G"
    iso_storage: "local"
    vm_storage: "local-lvm"
    opnsense_version: "24.7"
    opnsense_iso: "OPNsense-{{ opnsense_version }}-dvd-amd64.iso"
    
  tasks:
    - name: Check if VM already exists
      shell: |
        qm status {{ vm_id }} 2>&1 | grep -q "does not exist" && echo "absent" || echo "present"
      register: vm_status
      changed_when: false
      failed_when: false
      
    - name: Stop existing VM if running
      shell: |
        qm stop {{ vm_id }} --timeout 30
      when: vm_status.stdout == "present"
      failed_when: false
      register: stop_result
      
    - name: Wait for VM to stop
      shell: |
        timeout 30 bash -c 'while qm status {{ vm_id }} 2>/dev/null | grep -q "running"; do sleep 1; done'
      when: 
        - vm_status.stdout == "present"
        - stop_result is defined
      failed_when: false
      
    - name: Destroy existing VM
      shell: |
        qm destroy {{ vm_id }} --purge
      when: vm_status.stdout == "present"
      
    - name: Create OPNsense VM
      shell: |
        qm create {{ vm_id }} \
          --name {{ vm_name }} \
          --memory {{ vm_memory }} \
          --cores {{ vm_cores }} \
          --cpu host \
          --ostype l26 \
          --scsihw virtio-scsi-pci \
          --onboot 1 \
          --startup order=1,up=30
      register: vm_create
      
    - name: Create and attach primary disk
      shell: |
        # Create disk
        qm set {{ vm_id }} --scsi0 {{ vm_storage }}:{{ vm_disk_size }},cache=writeback,discard=on
        
        # Set boot order
        qm set {{ vm_id }} --boot order=scsi0
      when: vm_create is succeeded
      
    - name: Attach OPNsense ISO
      shell: |
        qm set {{ vm_id }} --ide2 {{ iso_storage }}:iso/{{ opnsense_iso }},media=cdrom
        
        # Temporarily boot from CD for installation
        qm set {{ vm_id }} --boot order=ide2
      when: vm_create is succeeded
      
    - name: Configure network interfaces
      block:
        - name: Check available bridges
          shell: |
            ip link show type bridge | grep -E '^[0-9]+:' | awk '{print $2}' | tr -d ':'
          register: available_bridges
          
        - name: Validate required bridges exist
          assert:
            that:
              - "'vmbr0' in available_bridges.stdout_lines"
            fail_msg: "Required bridge vmbr0 not found. Available bridges: {{ available_bridges.stdout_lines | join(', ') }}"
            
        - name: Configure WAN interface (net0)
          shell: |
            qm set {{ vm_id }} --net0 virtio,bridge=vmbr0,firewall=1
            
        - name: Check if vmbr1 exists for VLANs
          set_fact:
            vlan_bridge: "{{ 'vmbr1' if 'vmbr1' in available_bridges.stdout_lines else 'vmbr0' }}"
            
        - name: Configure LAN/VLAN trunk interface (net1)
          shell: |
            # If using vmbr0 for VLANs, ensure it's VLAN-aware
            {% if vlan_bridge == 'vmbr0' %}
            # Check if vmbr0 is VLAN-aware
            if ! grep -q "bridge-vlan-aware yes" /etc/network/interfaces; then
              echo "WARNING: vmbr0 may need to be configured as VLAN-aware"
            fi
            {% endif %}
            
            # Add interface with VLAN trunk support
            qm set {{ vm_id }} --net1 virtio,bridge={{ vlan_bridge }},firewall=1
            
        - name: Configure additional VLAN interfaces
          shell: |
            # Management VLAN (10)
            qm set {{ vm_id }} --net2 virtio,bridge={{ vlan_bridge }},tag=10,firewall=1
            
            # Services VLAN (20) 
            qm set {{ vm_id }} --net3 virtio,bridge={{ vlan_bridge }},tag=20,firewall=1
            
            # LAN VLAN (30)
            qm set {{ vm_id }} --net4 virtio,bridge={{ vlan_bridge }},tag=30,firewall=1
            
            # IoT VLAN (40)
            qm set {{ vm_id }} --net5 virtio,bridge={{ vlan_bridge }},tag=40,firewall=1
          when: vlan_bridge == 'vmbr1'
          
    - name: Configure VM hardware optimizations
      shell: |
        # Enable QEMU agent
        qm set {{ vm_id }} --agent enabled=1
        
        # Disable memory ballooning for stability
        qm set {{ vm_id }} --balloon 0
        
        # Enable NUMA if host supports it
        if [ $(lscpu | grep -c "NUMA node(s):" | awk '{if($3>1) print "1"; else print "0"}') -eq 1 ]; then
          qm set {{ vm_id }} --numa 1
        fi
        
    - name: Add VM description
      shell: |
        qm set {{ vm_id }} --description "OPNsense Firewall/Router
        
        Network Configuration:
        - net0: WAN (vmbr0) - DHCP Client
        - net1: LAN/VLAN Trunk ({{ vlan_bridge }})
        {% if vlan_bridge == 'vmbr1' %}
        - net2: Management VLAN 10
        - net3: Services VLAN 20  
        - net4: LAN VLAN 30
        - net5: IoT VLAN 40
        {% endif %}
        
        Default Credentials:
        - Console: root/opnsense
        - Web: https://[LAN_IP]
        
        Initial Setup:
        1. Boot from ISO
        2. Install to disk
        3. Remove ISO and reboot
        4. Configure interfaces via console"
        
    - name: Display VM creation summary
      debug:
        msg:
          - "OPNsense VM created successfully!"
          - "VM ID: {{ vm_id }}"
          - "VM Name: {{ vm_name }}"
          - "CPU Cores: {{ vm_cores }}"
          - "Memory: {{ vm_memory }}MB"
          - "Disk: {{ vm_disk_size }} on {{ vm_storage }}"
          - "ISO: {{ opnsense_iso }}"
          - "Network:"
          - "  - WAN: vmbr0"
          - "  - LAN/VLANs: {{ vlan_bridge }}"
          - ""
          - "Next steps:"
          - "1. Start VM: qm start {{ vm_id }}"
          - "2. Open console: qm console {{ vm_id }}"
          - "3. Complete OPNsense installation"
          - "4. Run configure-opnsense-boot.yml after installation"
          
    - name: Save VM configuration metadata
      copy:
        content: |
          # OPNsense VM Configuration
          vm_id: {{ vm_id }}
          vm_name: {{ vm_name }}
          created: {{ ansible_date_time.iso8601 }}
          specs:
            cores: {{ vm_cores }}
            memory: {{ vm_memory }}
            disk: {{ vm_disk_size }}
          network:
            wan_bridge: vmbr0
            vlan_bridge: {{ vlan_bridge }}
            vlans:
              - { id: 10, name: "Management", network: "10.0.10.0/24" }
              - { id: 20, name: "Services", network: "10.0.20.0/24" }
              - { id: 30, name: "LAN", network: "10.0.30.0/24" }
              - { id: 40, name: "IoT", network: "10.0.40.0/24" }
        dest: "/etc/pve/nodes/{{ ansible_hostname }}/qemu-server/{{ vm_id }}.metadata"
        mode: '0644'