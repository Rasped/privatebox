---
- name: "OPNsense: Inject SSH Keys"
  hosts: container-host
  become: true
  gather_facts: true
  
  vars:
    service_name: "OPNsense SSH Key Injection"
    service_description: "Inject SSH keys into OPNsense configuration for passwordless access"
    service_tag: "opnsense-ssh"
    
    # SSH key location
    ssh_key_path: "/root/.ssh/id_rsa.pub"
    ssh_private_key_path: "/root/.ssh/id_rsa"
    
    # OPNsense configuration path (on Proxmox host)
    opnsense_config_path: "/tmp/opnsense-config.xml"      opnsense_vm_id:
        semaphore_type: "integer"
        semaphore_required: true
        semaphore_description: "OPNsense VM ID"
      proxmox_host:
        semaphore_type: "string"
        semaphore_required: true
        semaphore_description: "Proxmox host IP address"
  
  tasks:
    - name: Pre-flight checks
      block:
        - name: Check if SSH key exists
          stat:
            path: "{{ ssh_key_path }}"
          register: ssh_key_stat
          
        - name: Generate SSH key if not exists
          command: >
            ssh-keygen -t rsa -b 4096 -f {{ ssh_private_key_path }} 
            -N "" -C "privatebox@{{ ansible_hostname }}"
          when: not ssh_key_stat.stat.exists
          
        - name: Read SSH public key
          slurp:
            src: "{{ ssh_key_path }}"
          register: ssh_public_key
          
        - name: Set SSH key fact
          set_fact:
            ssh_authorized_keys: "{{ ssh_public_key.content | b64decode | trim }}"
            
    - name: Check OPNsense VM status on Proxmox
      delegate_to: "{{ proxmox_host }}"
      command: qm status {{ opnsense_vm_id }}
      register: vm_status
      failed_when: false
      changed_when: false
      
    - name: Verify VM exists
      assert:
        that:
          - vm_status.rc == 0
        fail_msg: "OPNsense VM {{ opnsense_vm_id }} not found on Proxmox host"
        
    - name: Inject SSH keys
      block:
        - name: Check if VM is running
          set_fact:
            vm_is_running: "{{ 'running' in vm_status.stdout }}"
            
        - name: Stop VM if running
          delegate_to: "{{ proxmox_host }}"
          command: qm stop {{ opnsense_vm_id }} --timeout 60
          when: vm_is_running
          register: stop_result
          
        - name: Wait for VM to stop
          delegate_to: "{{ proxmox_host }}"
          command: qm status {{ opnsense_vm_id }}
          register: stop_check
          until: "'stopped' in stop_check.stdout"
          retries: 12
          delay: 5
          when: vm_is_running
          
        - name: Mount VM disk
          delegate_to: "{{ proxmox_host }}"
          block:
            - name: Create mount directory
              file:
                path: /mnt/opnsense-{{ opnsense_vm_id }}
                state: directory
                mode: '0700'
                
            - name: Find VM disk path
              shell: |
                pvesm path $(qm config {{ opnsense_vm_id }} | grep 'virtio0:' | cut -d' ' -f2 | cut -d',' -f1)
              register: disk_path
              
            - name: Enable NBD module
              modprobe:
                name: nbd
                params: max_part=8
                
            - name: Connect disk to NBD
              command: qemu-nbd --connect=/dev/nbd0 {{ disk_path.stdout }}
              
            - name: Mount OPNsense partition
              mount:
                src: /dev/nbd0p3  # OPNsense root partition is typically p3
                path: /mnt/opnsense-{{ opnsense_vm_id }}
                fstype: ufs
                opts: ro,ufstype=ufs2
                state: mounted
              register: mount_result
              failed_when: false
              
            - name: Try alternative mount if UFS fails
              when: mount_result is failed
              block:
                - name: Install UFS tools if missing
                  apt:
                    name:
                      - ufsutils
                      - kpartx
                    state: present
                    update_cache: yes
                    
                - name: Map partitions
                  command: kpartx -av /dev/nbd0
                  
                - name: Mount with UFS tools
                  command: mount -t ufs -o ro,ufstype=ufs2 /dev/mapper/nbd0p3 /mnt/opnsense-{{ opnsense_vm_id }}
                  
        - name: Inject SSH key into config
          delegate_to: "{{ proxmox_host }}"
          block:
            - name: Check if config.xml exists
              stat:
                path: /mnt/opnsense-{{ opnsense_vm_id }}/conf/config.xml
              register: config_stat
              
            - name: Backup original config
              copy:
                src: /mnt/opnsense-{{ opnsense_vm_id }}/conf/config.xml
                dest: /mnt/opnsense-{{ opnsense_vm_id }}/conf/config.xml.bak.{{ ansible_date_time.epoch }}
                remote_src: yes
              when: config_stat.stat.exists
              
            - name: Read current config
              slurp:
                src: /mnt/opnsense-{{ opnsense_vm_id }}/conf/config.xml
              register: current_config
              when: config_stat.stat.exists
              
            - name: Update config with SSH key
              when: config_stat.stat.exists
              block:
                - name: Parse XML config
                  set_fact:
                    config_content: "{{ current_config.content | b64decode }}"
                    
                - name: Insert SSH key into config
                  xml:
                    path: /mnt/opnsense-{{ opnsense_vm_id }}/conf/config.xml
                    xpath: /opnsense/system/ssh/authorizedkeys
                    value: "{{ ssh_authorized_keys | b64encode }}"
                    pretty_print: yes
                  when: config_stat.stat.exists
                  
                - name: Enable SSH in config
                  xml:
                    path: /mnt/opnsense-{{ opnsense_vm_id }}/conf/config.xml
                    xpath: /opnsense/system/ssh/enabled
                    value: "enabled"
                    
                - name: Disable password auth
                  xml:
                    path: /mnt/opnsense-{{ opnsense_vm_id }}/conf/config.xml
                    xpath: /opnsense/system/ssh/passwordauth
                    value: "0"
                    
        - name: Create authorized_keys file directly
          delegate_to: "{{ proxmox_host }}"
          block:
            - name: Create .ssh directory
              file:
                path: /mnt/opnsense-{{ opnsense_vm_id }}/root/.ssh
                state: directory
                mode: '0700'
                
            - name: Install SSH key
              copy:
                content: "{{ ssh_authorized_keys }}\n"
                dest: /mnt/opnsense-{{ opnsense_vm_id }}/root/.ssh/authorized_keys
                mode: '0600'
                
      always:
        - name: Cleanup
          delegate_to: "{{ proxmox_host }}"
          block:
            - name: Unmount filesystem
              mount:
                path: /mnt/opnsense-{{ opnsense_vm_id }}
                state: unmounted
              failed_when: false
              
            - name: Disconnect NBD
              command: qemu-nbd --disconnect /dev/nbd0
              failed_when: false
              
            - name: Remove mount directory
              file:
                path: /mnt/opnsense-{{ opnsense_vm_id }}
                state: absent
                
            - name: Start VM if it was running
              command: qm start {{ opnsense_vm_id }}
              when: vm_is_running | default(false)
              
    - name: Display completion message
      debug:
        msg:
          - "SSH key injection completed!"
          - "SSH public key: {{ ssh_authorized_keys }}"
          - "You can now SSH to OPNsense as root without password"
          - ""
          - "Next steps:"
          - "1. Start the VM if not already running"
          - "2. SSH to OPNsense: ssh root@<opnsense-ip>"
          - "3. Run the API enablement playbook"