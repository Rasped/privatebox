---
# Task 3.1: Download OPNsense ISO
# This playbook downloads the latest OPNsense ISO to Proxmox storage
# and verifies the checksum

- name: "OPNsense: Download ISO"
  hosts: proxmox
  gather_facts: false
  
  vars:
    opnsense_version: "24.7"
    opnsense_iso: "OPNsense-{{ opnsense_version }}-dvd-amd64.iso"
    iso_storage_path: "/var/lib/vz/template/iso"
    download_url: "https://mirror.dns-root.de/opnsense/releases/{{ opnsense_version }}/{{ opnsense_iso }}"
    checksum_url: "https://mirror.dns-root.de/opnsense/releases/{{ opnsense_version }}/{{ opnsense_iso }}.sha256"    
  tasks:
    - name: Ensure ISO storage directory exists
      file:
        path: "{{ iso_storage_path }}"
        state: directory
        mode: '0755'
        
    - name: Check if ISO already exists
      stat:
        path: "{{ iso_storage_path }}/{{ opnsense_iso }}"
      register: iso_exists
      
    - name: Download checksum file
      get_url:
        url: "{{ checksum_url }}"
        dest: "/tmp/{{ opnsense_iso }}.sha256"
        timeout: 30
      when: not iso_exists.stat.exists
      
    - name: Read expected checksum
      shell: |
        cat /tmp/{{ opnsense_iso }}.sha256 | awk '{print $1}'
      register: expected_checksum
      when: not iso_exists.stat.exists
      changed_when: false
      
    - name: Download OPNsense ISO
      get_url:
        url: "{{ download_url }}"
        dest: "{{ iso_storage_path }}/{{ opnsense_iso }}"
        checksum: "sha256:{{ expected_checksum.stdout }}"
        timeout: 1800  # 30 minutes
        mode: '0644'
      when: not iso_exists.stat.exists
      
    - name: Verify existing ISO checksum
      when: iso_exists.stat.exists
      block:
        - name: Calculate existing ISO checksum
          stat:
            path: "{{ iso_storage_path }}/{{ opnsense_iso }}"
            checksum_algorithm: sha256
          register: existing_checksum
          
        - name: Download current checksum for comparison
          get_url:
            url: "{{ checksum_url }}"
            dest: "/tmp/{{ opnsense_iso }}.sha256.current"
            timeout: 30
            
        - name: Read current expected checksum
          shell: |
            cat /tmp/{{ opnsense_iso }}.sha256.current | awk '{print $1}'
          register: current_expected_checksum
          changed_when: false
          
        - name: Compare checksums
          debug:
            msg: 
              - "Existing ISO checksum: {{ existing_checksum.stat.checksum }}"
              - "Expected checksum: {{ current_expected_checksum.stdout }}"
              - "Checksum match: {{ existing_checksum.stat.checksum == current_expected_checksum.stdout }}"
              
        - name: Warn if checksum mismatch
          debug:
            msg: "WARNING: Existing ISO checksum does not match expected. Consider re-downloading."
          when: existing_checksum.stat.checksum != current_expected_checksum.stdout
          
    - name: List available ISOs in storage
      shell: |
        ls -la {{ iso_storage_path }}/*.iso 2>/dev/null || echo "No ISOs found"
      register: iso_list
      changed_when: false
      
    - name: Display ISO information
      debug:
        msg:
          - "ISO Storage Path: {{ iso_storage_path }}"
          - "OPNsense ISO: {{ opnsense_iso }}"
          - "Download status: {{ 'Downloaded' if not iso_exists.stat.exists else 'Already exists' }}"
          - "Available ISOs:"
          - "{{ iso_list.stdout_lines }}"
          
    - name: Clean up old OPNsense ISOs
      shell: |
        # Remove old OPNsense ISOs, keeping only the current version
        find {{ iso_storage_path }} -name "OPNsense-*.iso" ! -name "{{ opnsense_iso }}" -type f -delete
      register: cleanup_result
      changed_when: cleanup_result.stdout != ""
      
    - name: Clean up temporary files
      file:
        path: "{{ item }}"
        state: absent
      loop:
        - "/tmp/{{ opnsense_iso }}.sha256"
        - "/tmp/{{ opnsense_iso }}.sha256.current"
      when: not ansible_check_mode