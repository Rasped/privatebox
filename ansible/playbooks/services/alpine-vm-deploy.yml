---
# Deploy Alpine Linux VM with Cloud-Init
# This playbook creates an Alpine Linux VM using cloud-init for automated setup
#
# Usage:
#   ansible-playbook -i inventory.yml alpine-vm-deploy.yml
#
# Variables:
#   vm_id: ID for the new VM (default: 102)
#   vm_name: Name for the new VM (default: alpine-vm)
#   vm_ip: Static IP address (optional, uses DHCP if not set)

- name: "Alpine Linux VM: Deploy with Cloud-Init"
  hosts: proxmox
  become: false
  gather_facts: true

  vars:
    # Template configuration for Semaphore
    template_config:
      semaphore_environment: "SemaphoreAPI"
    
    # Alpine cloud image URL
    alpine_version: "3.22.1"
    alpine_image_url: "https://dl-cdn.alpinelinux.org/alpine/v3.22/releases/cloud/nocloud_alpine-{{ alpine_version }}-x86_64-bios-tiny-r0.qcow2"
    
    # VM Configuration
    vm_id: 102
    vm_name: "alpine-vm"
    vm_memory: 1024
    vm_cores: 1
    vm_storage: "local-lvm"
    vm_disk_size: "10G"
    
    # Network Configuration
    vm_bridge: "vmbr0"
    vm_ip: ""  # Leave empty for DHCP, or set like "192.168.1.30"
    vm_gateway: "{{ ansible_default_ipv4.gateway | default('192.168.1.1') }}"
    vm_dns: "8.8.8.8"
    
    # User Configuration
    vm_username: "alpineadmin"
    vm_password: "changeme123"  # Temporary password - will be updated by alpine-vm-password-update.yml
    
    # Working directories
    work_dir: "/tmp/alpine-deploy"
    snippets_dir: "/var/lib/vz/snippets"
    
    # Options
    start_vm: true
    wait_for_cloud_init: true
    register_with_semaphore: true
    install_caddy: true
    
    # Ubuntu VM for backend services
    ubuntu_vm_ip: "192.168.1.20"
    
    # Semaphore configuration from environment
    semaphore_url: "{{ SEMAPHORE_URL }}"
    semaphore_api_token: "{{ SEMAPHORE_API_TOKEN }}"

  tasks:
    # Check and cleanup existing VM
    - name: "Alpine VM - Check existing VM"
      tags: [alpine, check]
      block:
        - name: Check if VM exists
          command: qm status {{ vm_id }}
          register: vm_exists
          failed_when: false
          changed_when: false

        - name: Stop existing VM if running
          command: qm stop {{ vm_id }}
          when: vm_exists.rc == 0
          failed_when: false
          register: stop_result

        - name: Wait for VM to stop
          pause:
            seconds: 5
          when: 
            - vm_exists.rc == 0
            - stop_result is not skipped

        - name: Destroy existing VM
          command: qm destroy {{ vm_id }}
          when: vm_exists.rc == 0

    # Create working directories
    - name: "Alpine VM - Create directories"
      tags: [alpine, dirs]
      block:
        - name: Create working directory
          file:
            path: "{{ work_dir }}"
            state: directory
            mode: "0755"

        - name: Ensure snippets directory exists
          file:
            path: "{{ snippets_dir }}"
            state: directory
            mode: "0755"

    # Download Alpine cloud image
    - name: "Alpine VM - Download cloud image"
      tags: [alpine, download]
      block:
        - name: Check if image already downloaded
          stat:
            path: "{{ work_dir }}/alpine-cloud.qcow2"
          register: image_exists

        - name: Download Alpine cloud image
          get_url:
            url: "{{ alpine_image_url }}"
            dest: "{{ work_dir }}/alpine-cloud.qcow2"
            mode: "0644"
            timeout: 300
          when: not image_exists.stat.exists

    # Generate cloud-init configuration
    - name: "Alpine VM - Configure cloud-init"
      tags: [alpine, cloudinit]
      block:
        - name: Get SSH public key from Proxmox host
          slurp:
            src: /root/.ssh/id_rsa.pub
          register: ssh_public_key

        - name: Generate cloud-init user-data
          copy:
            dest: "{{ snippets_dir }}/user-data-{{ vm_id }}.yaml"
            mode: "0644"
            content: |
              #cloud-config
              hostname: {{ vm_name }}
              manage_etc_hosts: true
              
              users:
                - name: {{ vm_username }}
                  groups: wheel
                  sudo: ALL=(ALL) NOPASSWD:ALL
                  shell: /bin/ash
                  plain_text_passwd: "{{ vm_password }}"
                  lock_passwd: false
                  ssh_authorized_keys:
                    - {{ ssh_public_key.content | b64decode | trim }}
                - name: alpine
                  ssh_authorized_keys:
                    - {{ ssh_public_key.content | b64decode | trim }}
              
              # Ensure password doesn't expire
              chpasswd:
                expire: false
              
              {% if vm_ip %}
              # Static network configuration
              write_files:
                - path: /etc/network/interfaces
                  content: |
                    auto lo
                    iface lo inet loopback
                    
                    auto eth0
                    iface eth0 inet static
                      address {{ vm_ip }}/24
                      gateway {{ vm_gateway }}
                      dns-nameservers {{ vm_dns }}
              {% endif %}
              
              # Package installation
              packages:
                - openssh
                - sudo
                - bash
                - curl
                - wget
                - ca-certificates
                - python3
                - py3-pip
              
              # Enable and start SSH
              runcmd:
                - rc-update add sshd default
                - rc-service sshd start
                {% if vm_ip %}
                - rc-service networking restart
                {% endif %}
                # Fix sudo configuration for Alpine
                - echo '%wheel ALL=(ALL) NOPASSWD:ALL' > /etc/sudoers.d/wheel
                - chmod 440 /etc/sudoers.d/wheel
                - adduser {{ vm_username }} wheel
                # Generate SSH key for this VM
                - mkdir -p /home/{{ vm_username }}/.ssh
                - ssh-keygen -t ed25519 -f /home/{{ vm_username }}/.ssh/id_ed25519 -N '' -C '{{ vm_name }}@{{ vm_ip | default("dhcp") }}'
                - chown -R {{ vm_username }}:{{ vm_username }} /home/{{ vm_username }}/.ssh
                - chmod 700 /home/{{ vm_username }}/.ssh
                - chmod 600 /home/{{ vm_username }}/.ssh/id_ed25519
                - chmod 644 /home/{{ vm_username }}/.ssh/id_ed25519.pub
                # Also generate host SSH key for root
                - ssh-keygen -t ed25519 -f /root/.ssh/id_ed25519 -N '' -C 'root@{{ vm_name }}'
                - chmod 700 /root/.ssh
                - chmod 600 /root/.ssh/id_ed25519
                - chmod 644 /root/.ssh/id_ed25519.pub
                - echo "Cloud-init completed at $(date)" > /etc/cloud-init-done
              
              # Final message
              final_message: "Alpine Linux VM ready after $UPTIME seconds"

    # Create and configure VM
    - name: "Alpine VM - Create VM"
      tags: [alpine, create]
      block:
        - name: Create VM
          command: |
            qm create {{ vm_id }} \
              --name {{ vm_name }} \
              --memory {{ vm_memory }} \
              --cores {{ vm_cores }} \
              --cpu host \
              --ostype l26 \
              --net0 virtio,bridge={{ vm_bridge }} \
              --scsihw virtio-scsi-pci \
              --onboot 0

        - name: Import disk image
          command: |
            qm importdisk {{ vm_id }} {{ work_dir }}/alpine-cloud.qcow2 {{ vm_storage }}
          register: import_result

        - name: Configure imported disk
          command: |
            qm set {{ vm_id }} \
              --scsi0 {{ vm_storage }}:vm-{{ vm_id }}-disk-0 \
              --boot order=scsi0

        - name: Resize disk
          command: |
            qm resize {{ vm_id }} scsi0 {{ vm_disk_size }}

        - name: Add cloud-init drive
          command: |
            qm set {{ vm_id }} --ide2 {{ vm_storage }}:cloudinit

        - name: Configure cloud-init
          command: |
            qm set {{ vm_id }} \
              --serial0 socket --vga serial0 \
              {% if vm_ip %}
              --ipconfig0 ip={{ vm_ip }}/24,gw={{ vm_gateway }} \
              {% else %}
              --ipconfig0 ip=dhcp \
              {% endif %}
              --cicustom "user=local:snippets/user-data-{{ vm_id }}.yaml"

    # Start VM
    - name: "Alpine VM - Start VM"
      tags: [alpine, start]
      command: qm start {{ vm_id }}
      when: start_vm | bool

    # Wait for cloud-init to complete
    - name: "Alpine VM - Wait for cloud-init"
      tags: [alpine, wait]
      when: 
        - start_vm | bool
        - wait_for_cloud_init | bool
      block:
        - name: Wait for VM to get IP address
          pause:
            seconds: 30

        - name: Get VM IP address (static)
          shell: echo "{{ vm_ip }}"
          when: vm_ip | length > 0
          register: vm_ip_result

        - name: Get VM IP address (DHCP)
          shell: >
            MAC=$(qm config {{ vm_id }} | grep net0 | grep -oE 'virtio=[A-F0-9:]+' | cut -d= -f2) &&
            nmap -sn 192.168.1.0/24 | grep -B2 "$MAC" | grep "Nmap scan report" | awk '{print $5}' | head -1
          when: vm_ip | length == 0
          register: vm_ip_result
          retries: 6
          delay: 10
          until: vm_ip_result.stdout | length > 0

        - name: Set VM IP address fact
          set_fact:
            alpine_vm_ip: "{{ vm_ip_result.stdout | trim }}"

        - name: Wait for SSH to be available
          wait_for:
            host: "{{ alpine_vm_ip }}"
            port: 22
            delay: 10
            timeout: 300

        - name: Wait for cloud-init to complete
          command: |
            ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null \
                {{ vm_username }}@{{ alpine_vm_ip }} \
                "test -f /etc/cloud-init-done"
          register: cloud_init_check
          retries: 30
          delay: 10
          until: cloud_init_check.rc == 0

    # Register with Semaphore
    - name: "Alpine VM - Register with Semaphore"
      tags: [alpine, semaphore]
      when: 
        - register_with_semaphore | bool
        - wait_for_cloud_init | bool
        - alpine_vm_ip is defined
      block:
        - name: Retrieve SSH public key from VM
          command: |
            ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null \
                {{ vm_username }}@{{ alpine_vm_ip }} \
                "cat /home/{{ vm_username }}/.ssh/id_ed25519.pub"
          register: vm_ssh_public_key

        - name: Retrieve SSH private key from VM
          command: |
            ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null \
                {{ vm_username }}@{{ alpine_vm_ip }} \
                "cat /home/{{ vm_username }}/.ssh/id_ed25519"
          register: vm_ssh_private_key
          no_log: true

        # No login needed - using API token directly

        - name: Create SSH key in Semaphore
          uri:
            url: "{{ semaphore_url }}/api/project/1/keys"
            method: POST
            headers:
              Authorization: "Bearer {{ semaphore_api_token }}"
            body_format: json
            body:
              name: "{{ vm_name }}-key"
              type: "ssh"
              project_id: 1
              ssh:
                login: "{{ vm_username }}"
                private_key: "{{ vm_ssh_private_key.stdout }}"
            status_code: [200, 201]
          register: ssh_key_result

        - name: Debug SSH key result
          debug:
            var: ssh_key_result.json

        - name: Debug inventory payload
          debug:
            msg:
              - "Creating inventory with:"
              - "  Name: {{ vm_name }}"
              - "  Project ID: 1"
              - "  SSH Key ID: {{ ssh_key_result.json.id | int }}"
              - "  VM IP: {{ alpine_vm_ip }}"
              - "  Username: {{ vm_username }}"
              - "  Full inventory string:"
              - "{{ 'all:\\n  hosts:\\n    ' + vm_name + ':\\n      ansible_host: ' + alpine_vm_ip + '\\n      ansible_user: ' + vm_username + '\\n      ansible_become: true\\n      ansible_become_method: sudo\\n      ansible_python_interpreter: /usr/bin/python3' }}"

        - name: Debug final inventory body JSON
          debug:
            msg: "Creating inventory with properly formatted YAML structure"

        - name: Create inventory for Alpine VM
          uri:
            url: "{{ semaphore_url }}/api/project/1/inventory"
            method: POST
            headers:
              Authorization: "Bearer {{ semaphore_api_token }}"
              Content-Type: "application/json"
            body_format: raw
            body: >-
              {
                "name": "{{ vm_name }}",
                "project_id": 1,
                "inventory": "all:\\n  hosts:\\n    {{ vm_name }}:\\n      ansible_host: {{ alpine_vm_ip }}\\n      ansible_user: {{ vm_username }}\\n      ansible_become: true\\n      ansible_become_method: sudo\\n      ansible_python_interpreter: /usr/bin/python3",
                "type": "static",
                "ssh_key_id": {{ ssh_key_result.json.id | int }}
              }
            status_code: [200, 201]
          register: inventory_result

        - name: Debug inventory creation error
          debug:
            var: inventory_result
          when: inventory_result.failed | default(false)

        - name: Display Semaphore registration results
          debug:
            msg:
              - "VM registered with Semaphore:"
              - "  SSH Key ID: {{ ssh_key_result.json.id }}"
              - "  Inventory ID: {{ inventory_result.json.id | default('Failed to create') }}"
          when: not (inventory_result.failed | default(false))

    # Install and configure Caddy
    - name: "Alpine VM - Install Caddy Reverse Proxy"
      tags: [alpine, caddy]
      when: 
        - alpine_vm_ip is defined
        - install_caddy | default(true) | bool
      block:
        - name: Install Caddy on Alpine VM
          command: |
            ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null \
                {{ vm_username }}@{{ alpine_vm_ip }} \
                "sudo apk update && sudo apk add caddy curl"
          register: caddy_install
          
        - name: Create Caddy directories
          command: |
            ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null \
                {{ vm_username }}@{{ alpine_vm_ip }} \
                "sudo mkdir -p /etc/caddy /var/lib/caddy /var/log/caddy && \
                 sudo chown caddy:caddy /etc/caddy /var/lib/caddy /var/log/caddy"
                 
        - name: Check if services registry exists
          delegate_to: localhost
          stat:
            path: "{{ playbook_dir }}/../../group_vars/all/services.yml"
          register: services_file
          
        - name: Load services configuration
          when: services_file.stat.exists
          include_vars:
            file: "{{ playbook_dir }}/../../group_vars/all/services.yml"
            
        - name: Set default services if not defined
          when: not services_file.stat.exists or privatebox_services is not defined
          set_fact:
            privatebox_services:
              - name: adguard
                backend_host: "{{ ubuntu_vm_ip }}"
                backend_port: 8080
                domain: adguard.lan
                description: "AdGuard Home - DNS-level ad blocking"
              - name: semaphore
                backend_host: "{{ ubuntu_vm_ip }}"
                backend_port: 3000
                domain: semaphore.lan
                description: "Semaphore - Ansible UI"
              - name: portainer
                backend_host: "{{ ubuntu_vm_ip }}"
                backend_port: 9000
                domain: portainer.lan
                description: "Portainer - Container Management"
        
        - name: Generate Caddyfile from template
          template:
            src: ../../files/caddy/Caddyfile.j2
            dest: "{{ work_dir }}/Caddyfile"
            mode: "0644"
          vars:
            backend_host: "{{ ubuntu_vm_ip | default('192.168.1.20') }}"
            
        - name: Copy Caddyfile to Alpine VM
          command: |
            scp -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null \
                {{ work_dir }}/Caddyfile \
                {{ vm_username }}@{{ alpine_vm_ip }}:/tmp/Caddyfile
                
        - name: Install Caddyfile and validate
          command: |
            ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null \
                {{ vm_username }}@{{ alpine_vm_ip }} \
                "sudo mv /tmp/Caddyfile /etc/caddy/Caddyfile && \
                 sudo chown caddy:caddy /etc/caddy/Caddyfile && \
                 sudo -u caddy caddy validate --config /etc/caddy/Caddyfile"
                 
        - name: Enable Caddy service at boot
          command: |
            ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null \
                {{ vm_username }}@{{ alpine_vm_ip }} \
                "sudo rc-update add caddy default"
                
        - name: Ensure log files have correct permissions
          command: |
            ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null \
                {{ vm_username }}@{{ alpine_vm_ip }} \
                "sudo rm -f /var/log/caddy/*.log && \
                 sudo chown -R caddy:caddy /var/log/caddy"
                
        - name: Start Caddy service
          command: |
            ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null \
                {{ vm_username }}@{{ alpine_vm_ip }} \
                "sudo rc-service caddy start"
                 
        - name: Wait for Caddy to fully start
          pause:
            seconds: 3
                 
        - name: Configure firewall for Caddy
          command: |
            ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null \
                {{ vm_username }}@{{ alpine_vm_ip }} \
                "sudo apk add iptables && \
                 sudo iptables -I INPUT -p tcp --dport 80 -j ACCEPT && \
                 sudo iptables -I INPUT -p tcp --dport 443 -j ACCEPT && \
                 sudo rc-service iptables save || true"
          failed_when: false
          
        - name: Test Caddy health endpoint
          uri:
            url: "http://{{ alpine_vm_ip }}/health"
            status_code: 200
            timeout: 10
          register: caddy_health
          retries: 3
          delay: 5
          until: caddy_health.status == 200
          failed_when: false
          
        - name: Note Caddy installation status
          set_fact:
            caddy_installed: "{{ caddy_health.status | default(0) == 200 }}"

    # Clean up temporary files
    - name: "Alpine VM - Cleanup"
      tags: [alpine, cleanup]
      file:
        path: "{{ work_dir }}"
        state: absent
      when: false  # Keep files for debugging, set to true to clean

    # Display summary
    - name: "Alpine VM - Display summary"
      tags: [alpine, summary]
      debug:
        msg:
          - "========================================"
          - "Alpine Linux VM Deployed Successfully!"
          - "========================================"
          - ""
          - "VM ID: {{ vm_id }}"
          - "VM Name: {{ vm_name }}"
          - "Memory: {{ vm_memory }}MB"
          - "Cores: {{ vm_cores }}"
          - "Disk: {{ vm_disk_size }}"
          - ""
          - "Network Configuration:"
          - "  Bridge: {{ vm_bridge }}"
          - "  IP: {{ alpine_vm_ip | default(vm_ip) | default('DHCP') }}"
          - ""
          - "Access Information:"
          - "  Username: {{ vm_username }}"
          - "  Password: changeme123"
          - "  SSH: ssh {{ vm_username }}@{{ alpine_vm_ip | default(vm_ip) | default('<dhcp-ip>') }}"
          - ""
          - "Semaphore Registration:"
          - "  {% if register_with_semaphore and ssh_key_result is defined %}✓ Registered with Semaphore{% else %}✗ Not registered{% endif %}"
          - "  {% if ssh_key_result is defined and ssh_key_result.json is defined %}SSH Key ID: {{ ssh_key_result.json.id }}{% endif %}"
          - "  {% if inventory_result is defined and inventory_result.json is defined %}Inventory ID: {{ inventory_result.json.id }}{% endif %}"
          - ""
          - "Caddy Reverse Proxy:"
          - "  {% if caddy_installed | default(false) %}✓ Installed and running{% else %}✗ Not installed{% endif %}"
          - "  {% if caddy_installed | default(false) %}HTTPS endpoint: https://{{ alpine_vm_ip | default(vm_ip) | default('<dhcp-ip>') }}{% endif %}"
          - "  {% if caddy_installed | default(false) %}Backend host: {{ ubuntu_vm_ip }}{% endif %}"
          - ""
          - "Notes:"
          - "  - Cloud-init will configure the VM on first boot"
          - "  - SSH keys from Proxmox host are automatically added"
          - "  - Default alpine user also has SSH access"
          - "  {% if caddy_installed | default(false) %}- Caddy is configured to proxy PrivateBox services{% endif %}"
          - "========================================"