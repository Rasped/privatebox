---
- name: "OPNsense: Configure Services"
  hosts: container-host
  gather_facts: false
  
  vars:
    service_name: "OPNsense Services Configuration"
    service_description: "Configure DNS, DHCP, and NAT services"
    
    # API configuration
    opnsense_host: "{{ opnsense_wan_ip | default('192.168.1.100') }}"
    opnsense_api_key: "{{ lookup('file', '/etc/privatebox-opnsense-api-key', errors='ignore') | default('') }}"
    opnsense_api_secret: "{{ lookup('file', '/etc/privatebox-opnsense-api-secret', errors='ignore') | default('') }}"
    
    # DNS Configuration
    dns_servers_primary: "{{ opnsense_dns_primary | default('1.1.1.1') }}"
    dns_servers_secondary: "{{ opnsense_dns_secondary | default('9.9.9.9') }}"
    dns_servers_tertiary: "{{ opnsense_dns_tertiary | default('8.8.8.8') }}"
    dns_allow_override: "{{ opnsense_dns_allow_override | default(true) }}"
    dns_domain: "{{ opnsense_domain | default('privatebox.local') }}"
    
    # DHCP Configuration
    dhcp_enabled: "{{ opnsense_dhcp_enabled | default(true) }}"
    dhcp_interface: "lan"
    dhcp_range_start: "{{ opnsense_dhcp_start | default('192.168.2.100') }}"
    dhcp_range_end: "{{ opnsense_dhcp_end | default('192.168.2.200') }}"
    dhcp_default_lease_time: "{{ opnsense_dhcp_lease_time | default(7200) }}"
    dhcp_max_lease_time: "{{ opnsense_dhcp_max_lease | default(86400) }}"
    dhcp_domain: "{{ dns_domain }}"
    dhcp_dns_servers: "{{ opnsense_dhcp_dns | default(['192.168.2.1']) }}"
    dhcp_gateway: "{{ opnsense_lan_ip | default('192.168.2.1') }}"
    
    # NAT Configuration
    nat_outbound_mode: "{{ opnsense_nat_mode | default('automatic') }}"
    nat_reflection_mode: "{{ opnsense_nat_reflection | default('purenat') }}"

  tasks:
    - name: Display service information
      debug:
        msg:
          - "{{ service_name }}"
          - "{{ service_description }}"
          - "Target: {{ opnsense_host }}"

    - name: Check for API credentials
      fail:
        msg: "OPNsense API credentials not found. Please run deploy-opnsense.yml first."
      when: opnsense_api_key == '' or opnsense_api_secret == ''

    - name: Configure DNS servers
      ansibleguy.opnsense.unbound_general:
        target: "{{ opnsense_host }}"
        api_key: "{{ opnsense_api_key }}"
        api_secret: "{{ opnsense_api_secret }}"
        ssl_verify: false
        enabled: true
        port: 53
        dns_servers:
          - "{{ dns_servers_primary }}"
          - "{{ dns_servers_secondary }}"
          - "{{ dns_servers_tertiary }}"
        local_zone_type: "transparent"
        dhcp_link: "{{ dns_allow_override | string | lower }}"
        apply: true
      register: dns_config

    - name: Configure system DNS settings
      ansibleguy.opnsense.system:
        target: "{{ opnsense_host }}"
        api_key: "{{ opnsense_api_key }}"
        api_secret: "{{ opnsense_api_secret }}"
        ssl_verify: false
        domain: "{{ dns_domain }}"
        dns_servers:
          - "{{ dns_servers_primary }}"
          - "{{ dns_servers_secondary }}"
        dns_allow_override: "{{ dns_allow_override }}"
        apply: true
      register: system_dns

    - name: Configure DHCP server on LAN
      ansibleguy.opnsense.dhcp_reservation:
        target: "{{ opnsense_host }}"
        api_key: "{{ opnsense_api_key }}"
        api_secret: "{{ opnsense_api_secret }}"
        ssl_verify: false
        interface: "{{ dhcp_interface }}"
        enabled: "{{ dhcp_enabled }}"
        range_from: "{{ dhcp_range_start }}"
        range_to: "{{ dhcp_range_end }}"
        default_lease_time: "{{ dhcp_default_lease_time }}"
        max_lease_time: "{{ dhcp_max_lease_time }}"
        domain: "{{ dhcp_domain }}"
        dns: "{{ dhcp_dns_servers | join(',') }}"
        gateway: "{{ dhcp_gateway }}"
        apply: true
      register: dhcp_config

    - name: Configure outbound NAT mode
      ansibleguy.opnsense.firewall_settings:
        target: "{{ opnsense_host }}"
        api_key: "{{ opnsense_api_key }}"
        api_secret: "{{ opnsense_api_secret }}"
        ssl_verify: false
        nat_outbound_mode: "{{ nat_outbound_mode }}"
        nat_reflection: "{{ nat_reflection_mode }}"
        apply: true
      register: nat_config

    - name: Create automatic outbound NAT rule for LAN
      ansibleguy.opnsense.nat_outbound:
        target: "{{ opnsense_host }}"
        api_key: "{{ opnsense_api_key }}"
        api_secret: "{{ opnsense_api_secret }}"
        ssl_verify: false
        description: "LAN to WAN NAT"
        interface: "wan"
        source_net: "{{ opnsense_lan_network | default('192.168.2.0/24') }}"
        destination: "any"
        nat_address: "interface"
        enabled: true
        apply: true
      when: nat_outbound_mode == 'hybrid' or nat_outbound_mode == 'manual'
      register: nat_rule

    - name: Apply all configuration changes
      ansibleguy.opnsense.reload:
        target: "{{ opnsense_host }}"
        api_key: "{{ opnsense_api_key }}"
        api_secret: "{{ opnsense_api_secret }}"
        ssl_verify: false
        service: "all"

    - name: Display configuration results
      debug:
        msg:
          - "DNS Configuration: {{ 'Updated' if dns_config.changed or system_dns.changed else 'No changes' }}"
          - "  Primary DNS: {{ dns_servers_primary }}"
          - "  Secondary DNS: {{ dns_servers_secondary }}"
          - "  Domain: {{ dns_domain }}"
          - ""
          - "DHCP Configuration: {{ 'Updated' if dhcp_config.changed else 'No changes' }}"
          - "  Range: {{ dhcp_range_start }} - {{ dhcp_range_end }}"
          - "  DNS Servers: {{ dhcp_dns_servers | join(', ') }}"
          - "  Gateway: {{ dhcp_gateway }}"
          - ""
          - "NAT Configuration: {{ 'Updated' if nat_config.changed else 'No changes' }}"
          - "  Mode: {{ nat_outbound_mode }}"
          - "  Reflection: {{ nat_reflection_mode }}"
          - ""
          - "Services configuration complete!"