---
# OPNsense 100% Hands-Off Deployment via ISO Remastering
# 
# This playbook creates a custom OPNsense ISO with embedded configuration
# and deploys it on Proxmox. All operations execute on the Proxmox host.
#
# No manual console interaction required - the VM boots directly into
# the configured state with static IP, SSH access, and web UI ready.
#
# Usage:
#   ansible-playbook -i inventory.yml opnsense-deploy-iso.yml \
#     -e "opnsense_ssh_key='ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQC...'"
#
# Optional overrides:
#   -e "opnsense_vm_id=8001"
#   -e "opnsense_lan_ip=192.168.1.100"
#   -e "opnsense_root_password=YourPassword"

- name: "OPNsense: Deploy via Custom ISO (100% Hands-Off)"
  hosts: proxmox
  become: false  # Already root on Proxmox
  gather_facts: true
  
  vars:
    # Service metadata
    service_name: "OPNsense Firewall"
    service_description: "Secure firewall with custom ISO deployment"
    
    # VM Configuration
    opnsense_vm_id: 8000
    opnsense_vm_name: "opnsense"
    opnsense_memory: 2048
    opnsense_cores: 2
    opnsense_cpu: "host"
    opnsense_disk_size: "16"  # Size in GB without 'G' suffix
    opnsense_storage: "local-lvm"
    opnsense_onboot: true
    
    # Network Configuration
    opnsense_net0_bridge: "vmbr0"  # LAN
    opnsense_net1_bridge: "vmbr1"  # WAN
    opnsense_lan_ip: "192.168.1.69"
    opnsense_lan_netmask: "24"
    opnsense_lan_gateway: "192.168.1.3"
    
    # Authentication
    # Pass SSH key via -e "opnsense_ssh_key='ssh-rsa AAAA...'"
    opnsense_root_password: "PrivateBox2024!"
    opnsense_ssh_key: "{{ opnsense_ssh_key | mandatory }}"  # Required - pass as extra var
    
    # ISO Configuration
    opnsense_version: "25.7"
    opnsense_iso_url: "https://mirror.dns-root.de/opnsense/releases/{{ opnsense_version }}/OPNsense-{{ opnsense_version }}-OpenSSL-dvd-amd64.iso.bz2"
    iso_storage_path: "/var/lib/vz/template/iso"
    work_dir: "/tmp/opnsense-remaster"
    
  tasks:
    # Prerequisites check
    - name: "{{ service_name }} - Check prerequisites"
      tags: [opnsense, prereq]
      block:
        - name: Ensure required tools are installed
          package:
            name:
              - xorriso
              - bzip2
              - libxml2-utils  # for xmllint
            state: present
            
        - name: Check if VM already exists
          command: qm status {{ opnsense_vm_id }}
          register: vm_exists
          failed_when: false
          changed_when: false
          
        - name: Fail if VM already exists
          fail:
            msg: "VM {{ opnsense_vm_id }} already exists. Remove it first or use different ID."
          when: vm_exists.rc == 0
          
        - name: Check if vmbr1 exists
          command: ip link show {{ opnsense_net1_bridge }}
          register: vmbr1_exists
          failed_when: false
          changed_when: false
          
        - name: Warn if vmbr1 missing
          debug:
            msg: "WARNING: {{ opnsense_net1_bridge }} not found. Will configure single NIC only."
          when: vmbr1_exists.rc != 0
    
    # ISO Download and preparation
    - name: "{{ service_name }} - Prepare ISO"
      tags: [opnsense, iso]
      block:
        - name: Create working directory
          file:
            path: "{{ work_dir }}"
            state: directory
            mode: '0755'
            
        - name: Check if custom ISO already exists
          stat:
            path: "{{ iso_storage_path }}/OPNsense-{{ opnsense_version }}-custom.iso"
          register: custom_iso_exists
          
        - name: Download OPNsense ISO (if needed)
          when: not custom_iso_exists.stat.exists
          block:
            - name: Check if original ISO exists
              stat:
                path: "{{ work_dir }}/opnsense.iso"
              register: orig_iso_exists
              
            - name: Download compressed ISO
              get_url:
                url: "{{ opnsense_iso_url }}"
                dest: "{{ work_dir }}/opnsense.iso.bz2"
                mode: '0644'
              register: download_result
              when: not orig_iso_exists.stat.exists
              
            - name: Extract ISO
              command: bzip2 -d "{{ work_dir }}/opnsense.iso.bz2"
              args:
                creates: "{{ work_dir }}/opnsense.iso"
              when: not orig_iso_exists.stat.exists
    
    # ISO Remastering (only if custom ISO doesn't exist)
    - name: "{{ service_name }} - Remaster ISO"
      when: not custom_iso_exists.stat.exists
      tags: [opnsense, remaster]
      block:
        # Configuration preparation (inside remaster block)
        - name: Generate bcrypt password hash
          set_fact:
            password_hash: "{{ opnsense_root_password | password_hash('bcrypt', rounds=10) | regex_replace('\\$2y\\$', '\\$2b\\$') }}"
            
        - name: Create config.xml from template
          template:
            src: ../../templates/opnsense-config.xml.j2
            dest: "{{ work_dir }}/config.xml"
            mode: '0644'
          vars:
            root_password_hash: "{{ password_hash }}"
            ssh_key: "{{ opnsense_ssh_key }}"
            lan_ip: "{{ opnsense_lan_ip }}"
            lan_netmask: "{{ opnsense_lan_netmask }}"
            gateway_ip: "{{ opnsense_lan_gateway }}"
            timestamp_epoch: "{{ lookup('pipe', 'date +%s') }}"
            
        - name: Validate XML syntax
          command: xmllint --noout "{{ work_dir }}/config.xml"
          changed_when: false
          
        # Mount and remaster
        - name: Create mount point
          file:
            path: "{{ work_dir }}/mnt"
            state: directory
            
        - name: Mount original ISO
          command: mount -o loop,ro "{{ work_dir }}/opnsense.iso" "{{ work_dir }}/mnt"
          
        - name: Create ISO contents directory
          file:
            path: "{{ work_dir }}/iso-contents"
            state: directory
            
        - name: Copy ISO contents
          command: rsync -a "{{ work_dir }}/mnt/" "{{ work_dir }}/iso-contents/"
          
        - name: Ensure config directory exists
          file:
            path: "{{ work_dir }}/iso-contents/usr/local/etc"
            state: directory
            
        - name: Inject custom config
          copy:
            src: "{{ work_dir }}/config.xml"
            dest: "{{ work_dir }}/iso-contents/usr/local/etc/config.xml"
            mode: '0644'
            remote_src: true
            
        - name: Create custom ISO
          command: |
            xorriso -as mkisofs \
              -R -J -joliet-long \
              -b boot/cdboot \
              -c boot.catalog \
              -no-emul-boot \
              -boot-load-size 4 \
              -boot-info-table \
              -o "{{ iso_storage_path }}/OPNsense-{{ opnsense_version }}-custom.iso" \
              "{{ work_dir }}/iso-contents"
          args:
            creates: "{{ iso_storage_path }}/OPNsense-{{ opnsense_version }}-custom.iso"
            
        - name: Unmount original ISO
          command: umount "{{ work_dir }}/mnt"
          ignore_errors: true
          
        - name: Clean up working directory
          file:
            path: "{{ work_dir }}"
            state: absent
          ignore_errors: true
      
      # Error handling for remaster block
      rescue:
        - name: Emergency cleanup - unmount
          command: umount "{{ work_dir }}/mnt"
          ignore_errors: true
          
        - name: Emergency cleanup - remove work dir
          file:
            path: "{{ work_dir }}"
            state: absent
          ignore_errors: true
          
        - name: Fail with error message
          fail:
            msg: "ISO remastering failed. Check error messages above."
    
    # VM Creation and deployment
    - name: "{{ service_name }} - Create and deploy VM"
      tags: [opnsense, deploy]
      block:
        - name: Create VM
          command: |
            qm create {{ opnsense_vm_id }} \
              --name {{ opnsense_vm_name }} \
              --memory {{ opnsense_memory }} \
              --cores {{ opnsense_cores }} \
              --cpu {{ opnsense_cpu }} \
              --ostype l26 \
              --onboot {{ opnsense_onboot | int }}
              
        - name: Configure network interfaces (dual NIC)
          command: |
            qm set {{ opnsense_vm_id }} \
              --net0 virtio,bridge={{ opnsense_net0_bridge }} \
              --net1 virtio,bridge={{ opnsense_net1_bridge }}
          when: vmbr1_exists.rc == 0
          
        - name: Configure network interfaces (single NIC)
          command: |
            qm set {{ opnsense_vm_id }} \
              --net0 virtio,bridge={{ opnsense_net0_bridge }}
          when: vmbr1_exists.rc != 0
              
        - name: Add custom ISO as boot device
          command: |
            qm set {{ opnsense_vm_id }} \
              --ide2 local:iso/OPNsense-{{ opnsense_version }}-custom.iso,media=cdrom
              
        - name: Create and attach disk
          command: |
            qm set {{ opnsense_vm_id }} \
              --scsi0 {{ opnsense_storage }}:{{ opnsense_disk_size }} \
              --scsihw virtio-scsi-pci \
              --boot order=scsi0
              
        - name: Start VM
          command: qm start {{ opnsense_vm_id }}
          
        - name: Wait for OPNsense to boot and configure
          pause:
            seconds: 180
            prompt: "Waiting for OPNsense to complete initial configuration..."
    
    # Verification
    - name: "{{ service_name }} - Verify deployment"
      tags: [opnsense, verify]
      block:
        - name: Wait for HTTPS interface
          wait_for:
            host: "{{ opnsense_lan_ip }}"
            port: 443
            delay: 10
            timeout: 300
            
        - name: Test HTTPS connectivity
          uri:
            url: "https://{{ opnsense_lan_ip }}"
            method: GET
            validate_certs: false
            status_code: [200, 302, 401]
          register: https_test
          
        - name: Display deployment summary
          debug:
            msg:
              - "=========================================="
              - "OPNsense ISO Deployment Complete!"
              - "=========================================="
              - ""
              - "VM ID: {{ opnsense_vm_id }}"
              - "VM Name: {{ opnsense_vm_name }}"
              - ""
              - "Access Information:"
              - "- Web UI: https://{{ opnsense_lan_ip }}"
              - "  Username: root"
              - "  Password: {{ opnsense_root_password }}"
              - ""
              - "- SSH: ssh -i ~/.ssh/your_key root@{{ opnsense_lan_ip }}"
              - ""
              - "Network Configuration:"
              - "- LAN IP: {{ opnsense_lan_ip }}/{{ opnsense_lan_netmask }}"
              - "- Gateway: {{ opnsense_lan_gateway }}"
              - ""
              - "The system is 100% configured and ready!"
              - "=========================================="