---
# OPNsense IMG Deployment with USB Config Drive
# 
# This playbook deploys OPNsense using the VGA IMG file which contains
# a pre-installed system. Configuration is provided via USB disk image.
#
# The IMG approach bypasses all installation prompts. We just:
# 1. Download and extract the pre-installed disk image
# 2. Import it as a VM disk
# 3. Create USB disk image with config.xml
# 4. Create VM and attach both disks
# 5. Automate config import process
#
# Usage:
#   ansible-playbook -i inventory.yml opnsense-deploy-img.yml \
#     -e "opnsense_ssh_key='ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQC...'"
#
# Optional overrides:
#   -e "opnsense_vm_id=8001"
#   -e "opnsense_lan_ip=192.168.1.100"
#   -e "opnsense_root_password=YourPassword"

- name: "OPNsense: Deploy via Pre-installed IMG"
  hosts: proxmox
  become: false  # Already root on Proxmox
  gather_facts: true
  
  vars:
    # Service metadata
    service_name: "OPNsense Firewall (IMG)"
    service_description: "Secure firewall via pre-installed disk image with USB config"
    
    # VM Configuration
    opnsense_vm_id: 8001
    opnsense_vm_name: "opnsense-img"
    opnsense_memory: 2048
    opnsense_cores: 2
    opnsense_cpu: "host"
    opnsense_disk_size: "16"  # Minimum size in GB
    opnsense_storage: "local-lvm"
    opnsense_onboot: true
    
    # Network Configuration
    opnsense_net0_bridge: "vmbr0"  # LAN
    opnsense_net1_bridge: "vmbr1"  # WAN
    opnsense_lan_ip: "192.168.1.69"
    opnsense_lan_netmask: "24"
    opnsense_lan_gateway: "192.168.1.3"
    
    # Authentication
    # Pass SSH key via -e "opnsense_ssh_key='ssh-rsa AAAA...'"
    opnsense_root_password: "PrivateBox2024!"
    opnsense_ssh_key: "{{ opnsense_ssh_key | mandatory }}"  # Required - pass as extra var
    
    # IMG Configuration
    opnsense_version: "25.1"
    opnsense_img_url: "https://pkg.opnsense.org/releases/{{ opnsense_version }}/OPNsense-{{ opnsense_version }}-serial-amd64.img.bz2"
    work_dir: "/tmp/opnsense-img"
    # USB config disk will be stored in a permanent location
    usb_config_path: "/var/lib/vz/images/opnsense-config-{{ opnsense_vm_id }}.img"
    # Serial console monitoring script
    console_script: "/tmp/opnsense-console-monitor-{{ opnsense_vm_id }}.sh"
    
  tasks:
    # Prerequisites check
    - name: "{{ service_name }} - Check prerequisites"
      tags: [opnsense, prereq]
      block:
        - name: Ensure required tools are installed
          package:
            name:
              - bzip2
              - dosfstools    # For mkfs.vfat
              - libxml2-utils  # for xmllint
              - apache2-utils  # for htpasswd
              - expect        # for console automation
            state: present
            
        - name: Check if VM already exists
          command: qm status {{ opnsense_vm_id }}
          register: vm_exists
          failed_when: false
          changed_when: false
          
        - name: Fail if VM already exists
          fail:
            msg: "VM {{ opnsense_vm_id }} already exists. Remove it first or use different ID."
          when: vm_exists.rc == 0
          
        - name: Check if vmbr1 exists
          command: ip link show {{ opnsense_net1_bridge }}
          register: vmbr1_exists
          failed_when: false
          changed_when: false
          
        - name: Warn if vmbr1 missing
          debug:
            msg: "WARNING: {{ opnsense_net1_bridge }} not found. Will configure single NIC only."
          when: vmbr1_exists.rc != 0
    
    # IMG Download and preparation
    - name: "{{ service_name }} - Download and prepare IMG"
      tags: [opnsense, img]
      block:
        - name: Create working directory
          file:
            path: "{{ work_dir }}"
            state: directory
            mode: '0755'
            
        - name: Check if IMG already extracted
          stat:
            path: "{{ work_dir }}/opnsense.img"
          register: img_exists
          
        - name: Download compressed IMG
          get_url:
            url: "{{ opnsense_img_url }}"
            dest: "{{ work_dir }}/opnsense.img.bz2"
            mode: '0644'
          when: not img_exists.stat.exists
          
        - name: Extract IMG
          command: bzip2 -d -k "{{ work_dir }}/opnsense.img.bz2"
          args:
            creates: "{{ work_dir }}/opnsense.img"
          when: not img_exists.stat.exists
    
    # USB Configuration disk creation
    - name: "{{ service_name }} - Create USB configuration disk"
      tags: [opnsense, config]
      block:
        # Generate password hash
        - name: Generate bcrypt password hash
          shell: |
            echo -n "{{ opnsense_root_password }}" | htpasswd -bnBC 10 "" | tr -d ':\n' | sed 's/$2y/$2b/'
          register: password_hash_result
          
        - name: Set password hash fact
          set_fact:
            password_hash: "{{ password_hash_result.stdout }}"
            
        # Create config.xml
        - name: Create config.xml from template
          template:
            src: ../../templates/opnsense-config.xml.j2
            dest: "{{ work_dir }}/config.xml"
            mode: '0644'
          vars:
            root_password_hash: "{{ password_hash }}"
            ssh_key: "{{ opnsense_ssh_key }}"
            lan_ip: "{{ opnsense_lan_ip }}"
            lan_netmask: "{{ opnsense_lan_netmask }}"
            gateway_ip: "{{ opnsense_lan_gateway }}"
            timestamp_epoch: "{{ lookup('pipe', 'date +%s') }}"
            
        - name: Validate XML syntax
          command: xmllint --noout "{{ work_dir }}/config.xml"
          changed_when: false
          
        # Create USB disk image
        - name: Check if USB config disk exists
          stat:
            path: "{{ usb_config_path }}"
          register: usb_exists
          
        - name: Create 10MB USB disk image
          command: dd if=/dev/zero of="{{ usb_config_path }}" bs=1M count=10
          when: not usb_exists.stat.exists
            
        - name: Format USB disk as FAT32
          command: mkfs.vfat -F 32 "{{ usb_config_path }}"
          when: not usb_exists.stat.exists
          
        - name: Create mount point for USB disk
          file:
            path: "{{ work_dir }}/usb-mount"
            state: directory
            mode: '0755'
            
        - name: Mount USB disk image
          command: mount -o loop "{{ usb_config_path }}" "{{ work_dir }}/usb-mount"
          
        - name: Create conf directory on USB disk
          file:
            path: "{{ work_dir }}/usb-mount/conf"
            state: directory
            mode: '0755'
            
        - name: Copy config.xml to USB disk
          copy:
            src: "{{ work_dir }}/config.xml"
            dest: "{{ work_dir }}/usb-mount/conf/config.xml"
            mode: '0644'
            remote_src: true
            
        - name: Unmount USB disk
          command: umount "{{ work_dir }}/usb-mount"
          
        - name: Remove mount point
          file:
            path: "{{ work_dir }}/usb-mount"
            state: absent
    
    # VM Creation and IMG import
    - name: "{{ service_name }} - Create VM and import disk"
      tags: [opnsense, deploy]
      block:
        - name: Create VM
          command: |
            qm create {{ opnsense_vm_id }} \
              --name {{ opnsense_vm_name }} \
              --memory {{ opnsense_memory }} \
              --cores {{ opnsense_cores }} \
              --cpu {{ opnsense_cpu }} \
              --ostype l26 \
              --scsihw virtio-scsi-pci \
              --serial0 socket \
              --onboot {{ opnsense_onboot | int }}
              
        - name: Configure network interfaces (dual NIC)
          command: |
            qm set {{ opnsense_vm_id }} \
              --net0 virtio,bridge={{ opnsense_net0_bridge }} \
              --net1 virtio,bridge={{ opnsense_net1_bridge }}
          when: vmbr1_exists.rc == 0
          
        - name: Configure network interfaces (single NIC)
          command: |
            qm set {{ opnsense_vm_id }} \
              --net0 virtio,bridge={{ opnsense_net0_bridge }}
          when: vmbr1_exists.rc != 0
              
        - name: Import disk image to VM
          command: |
            qm importdisk {{ opnsense_vm_id }} "{{ work_dir }}/opnsense.img" {{ opnsense_storage }}
          register: import_result
          
        - name: Attach imported disk as scsi0
          command: |
            qm set {{ opnsense_vm_id }} \
              --scsi0 {{ opnsense_storage }}:vm-{{ opnsense_vm_id }}-disk-0 \
              --boot order=scsi0
              
        - name: Attach USB configuration disk
          command: |
            qm set {{ opnsense_vm_id }} \
              --args "-drive file={{ usb_config_path }},if=none,id=drive-usb0,format=raw,cache=none -device usb-storage,id=usb0,drive=drive-usb0,removable=on"
              
        - name: Create console monitoring script
          copy:
            dest: "{{ console_script }}"
            mode: '0755'
            content: |
              #!/usr/bin/expect -f
              #
              # OPNsense Console Monitor for Config Import
              # Monitors serial console and responds to prompts
              #
              
              set timeout 300
              set vm_id {{ opnsense_vm_id }}
              
              # Enable logging
              log_file /tmp/opnsense-console-{{ opnsense_vm_id }}.log
              
              proc send_slowly {text} {
                  foreach char [split $text ""] {
                      send -- $char
                      sleep 0.05
                  }
              }
              
              send_user "Starting console monitor for VM $vm_id\n"
              
              # Connect to serial console
              spawn qm terminal $vm_id -iface serial0
              
              # Monitor for prompts and respond
              while {1} {
                  expect {
                      timeout {
                          send_user "Timeout reached, exiting\n"
                          exit 0
                      }
                      "Press any key to start the configuration importer" {
                          send_user "Configuration importer prompt detected\n"
                          sleep 2
                          send " "
                      }
                      "Enter the device name" {
                          send_user "Device name prompt detected\n"
                          sleep 1
                          send_slowly "da1"
                          send "\r"
                      }
                      "Do you want to configure LAGGs" {
                          send_user "LAGG prompt detected\n"
                          sleep 1
                          send "n\r"
                      }
                      "Do you want to configure VLANs" {
                          send_user "VLAN prompt detected\n"
                          sleep 1
                          send "n\r"
                      }
                      "The firewall will reboot after importing" {
                          send_user "Import complete, reboot pending\n"
                          sleep 5
                          exit 0
                      }
                      "login:" {
                          send_user "System booted and ready\n"
                          exit 0
                      }
                  }
              }
              
              exit 0
              
        - name: Start VM
          command: qm start {{ opnsense_vm_id }}
          
        - name: Start console monitoring in background
          shell: |
            nohup {{ console_script }} > /tmp/opnsense-monitor-{{ opnsense_vm_id }}.out 2>&1 &
            echo $! > /tmp/opnsense-monitor-{{ opnsense_vm_id }}.pid
          async: 300
          poll: 0
          register: console_monitor
          
        - name: Wait for initial boot
          pause:
            seconds: 20
            prompt: "Waiting for OPNsense initial boot..."
            
        - name: Check console monitor status
          shell: |
            if [ -f /tmp/opnsense-monitor-{{ opnsense_vm_id }}.pid ]; then
              pid=$(cat /tmp/opnsense-monitor-{{ opnsense_vm_id }}.pid)
              if ps -p $pid > /dev/null; then
                echo "running"
              else
                echo "completed"
              fi
            else
              echo "not_found"
            fi
          register: monitor_status
          until: monitor_status.stdout == "completed"
          retries: 30
          delay: 10
          
        - name: Display console monitor output
          command: cat /tmp/opnsense-monitor-{{ opnsense_vm_id }}.out
          register: monitor_output
          failed_when: false
          
        - name: Show monitor results
          debug:
            msg: "{{ monitor_output.stdout_lines }}"
          when: monitor_output.stdout_lines is defined
          
        - name: Wait for system to stabilize after import
          pause:
            seconds: 60
            prompt: "Waiting for OPNsense to stabilize after configuration import..."
    
    # Verification
    - name: "{{ service_name }} - Verify deployment"
      tags: [opnsense, verify]
      block:
        - name: Wait for HTTPS interface
          wait_for:
            host: "{{ opnsense_lan_ip }}"
            port: 443
            delay: 10
            timeout: 300
            
        - name: Test HTTPS connectivity
          uri:
            url: "https://{{ opnsense_lan_ip }}"
            method: GET
            validate_certs: false
            status_code: [200, 302, 401]
          register: https_test
          
        - name: Display deployment summary
          debug:
            msg:
              - "=========================================="
              - "OPNsense IMG Deployment Complete!"
              - "=========================================="
              - ""
              - "VM ID: {{ opnsense_vm_id }}"
              - "VM Name: {{ opnsense_vm_name }}"
              - ""
              - "Access Information:"
              - "- Web UI: https://{{ opnsense_lan_ip }}"
              - "  Username: root"
              - "  Password: {{ opnsense_root_password }}"
              - ""
              - "- SSH: ssh -i ~/.ssh/your_key root@{{ opnsense_lan_ip }}"
              - ""
              - "Network Configuration:"
              - "- LAN IP: {{ opnsense_lan_ip }}/{{ opnsense_lan_netmask }}"
              - "- Gateway: {{ opnsense_lan_gateway }}"
              - ""
              - "Configuration imported via USB disk!"
              - "=========================================="
              
    # Cleanup
    - name: "{{ service_name }} - Cleanup"
      tags: [opnsense, cleanup]
      block:
        - name: Remove working directory
          file:
            path: "{{ work_dir }}"
            state: absent
          ignore_errors: true
          
        - name: Remove console monitoring script
          file:
            path: "{{ console_script }}"
            state: absent
          ignore_errors: true
          
        - name: Remove monitor PID file
          file:
            path: "/tmp/opnsense-monitor-{{ opnsense_vm_id }}.pid"
            state: absent
          ignore_errors: true