---
- name: "OPNsense 1: Establish Secure Access"
  hosts: proxmox
  gather_facts: yes
  vars:
    # Template configuration for Semaphore
    template_config:
      semaphore_environment: "ServicePasswords"
      semaphore_category: "infrastructure"
    
    # Fixed internal IP for OPNsense on Services VLAN
    opnsense_ip: "10.10.20.1"
    opnsense_hostname: "OPNsense.internal"
    
    # Passwords
    opnsense_default_password: "opnsense"
    admin_password: "{{ ADMIN_PASSWORD | default('') }}"
    
    # SSH configuration
    credentials_dir: "/root/.credentials/opnsense"
    ssh_key_path: "{{ credentials_dir }}/id_ed25519"
    disable_password_auth: false  # Keep enabled for recovery
    
    enable_debug: true

  tasks:
    # ============================================
    # Phase 1: Intelligence Gathering
    # ============================================
    
    - name: Check if SSH keypair exists locally
      stat:
        path: "{{ ssh_key_path }}"
      register: ssh_key_exists

    - name: Test SSH key authentication if key exists
      shell: |
        ssh -i {{ ssh_key_path }} \
          -o StrictHostKeyChecking=no \
          -o ConnectTimeout=5 \
          -o PasswordAuthentication=no \
          -o PreferredAuthentications=publickey \
          root@{{ opnsense_ip }} \
          "echo 'SSH_KEY_WORKS' && opnsense-version"
      register: ssh_key_test
      when: ssh_key_exists.stat.exists
      failed_when: false
      changed_when: false

    - name: Determine if SSH key setup is needed
      set_fact:
        ssh_setup_needed: "{{ not ssh_key_exists.stat.exists or ssh_key_test.rc | default(1) != 0 }}"

    - name: Display current access status
      debug:
        msg: "{{ 'SSH key authentication working - checking password sync status' if not ssh_setup_needed else 'SSH key setup required' }}"

    # Determine which password is currently active (only if we need to set up SSH)
    - name: Test with default password
      shell: |
        SSHPASS='{{ opnsense_default_password }}' sshpass -e ssh \
          -o StrictHostKeyChecking=no \
          -o ConnectTimeout=5 \
          -o PasswordAuthentication=yes \
          -o PreferredAuthentications=password \
          root@{{ opnsense_ip }} \
          "echo 'DEFAULT_PASSWORD_WORKS'"
      register: default_password_test
      when: ssh_setup_needed
      failed_when: false
      changed_when: false

    - name: Test with admin password if default failed
      shell: |
        SSHPASS='{{ admin_password }}' sshpass -e ssh \
          -o StrictHostKeyChecking=no \
          -o ConnectTimeout=5 \
          -o PasswordAuthentication=yes \
          -o PreferredAuthentications=password \
          root@{{ opnsense_ip }} \
          "echo 'ADMIN_PASSWORD_WORKS'"
      register: admin_password_test
      when: 
        - ssh_setup_needed
        - default_password_test.rc != 0
        - admin_password | length > 0
      failed_when: false
      changed_when: false
      no_log: true

    - name: Determine working password
      set_fact:
        working_password: >-
          {%- if not ssh_setup_needed -%}
          key_auth
          {%- elif default_password_test.rc == 0 -%}
          {{ opnsense_default_password }}
          {%- elif admin_password | length > 0 and admin_password_test.rc == 0 -%}
          {{ admin_password }}
          {%- else -%}
          none
          {%- endif -%}
        current_password_is_default: "{{ ssh_setup_needed and default_password_test.rc == 0 }}"

    - name: Fail if no working authentication method
      fail:
        msg: |
          Cannot connect to OPNsense at {{ opnsense_ip }}
          - SSH key authentication: {{ 'Working' if not ssh_setup_needed else 'Not working' }}
          - Default password: {{ 'Works' if (ssh_setup_needed and default_password_test.rc == 0) else 'Failed' }}
          - Admin password: {{ 'Works' if (ssh_setup_needed and admin_password | length > 0 and admin_password_test.rc == 0) else 'Not tested or failed' }}
          
          Please verify OPNsense is accessible and try again.
      when: 
        - ssh_setup_needed
        - working_password == "none"

    - name: Display authentication status
      debug:
        msg:
          - "Current authentication method: {{ 'SSH key' if working_password == 'key_auth' else 'Password' }}"
          - "{{ 'Using default password - will sync with Semaphore' if current_password_is_default else 'Password already synced' if working_password == admin_password else '' }}"
      when: enable_debug | bool

    # ============================================
    # Phase 2: Password Synchronization (if needed)
    # ============================================

    - name: Test if default password still works
      shell: |
        SSHPASS='{{ opnsense_default_password }}' sshpass -e ssh \
          -o StrictHostKeyChecking=no \
          -o ConnectTimeout=5 \
          -o PasswordAuthentication=yes \
          -o PreferredAuthentications=password \
          -o PubkeyAuthentication=no \
          root@{{ opnsense_ip }} \
          "echo 'DEFAULT_PASSWORD_WORKS'"
      register: default_password_test
      changed_when: false
      failed_when: false
      no_log: true

    - name: Determine if password sync is needed
      set_fact:
        password_sync_needed: >-
          {{ admin_password | length > 0 and 
             admin_password != opnsense_default_password and
             default_password_test.rc == 0 }}

    - name: Report password status
      debug:
        msg: >-
          {% if default_password_test.rc == 0 %}
          Default password is active - will sync with ADMIN_PASSWORD
          {% else %}
          Password already changed from default - skipping sync
          {% endif %}
      when: admin_password | length > 0

    - name: Sync OPNsense password with Semaphore
      block:
        # Use OPNsense's official password reset script (/usr/local/opnsense/scripts/shell/password.php)
        # This is the same script called by console menu "Option 3: Reset root password"
        # It updates BOTH system password (/etc/master.passwd) AND web UI password (/conf/config.xml)
        # Note: OPNsense uses tcsh, so we use 'set VAR=value' syntax (not bash-style VAR=value)
        # IMPORTANT: Run BEFORE SSH key setup because password.php regenerates authorized_keys from config.xml
        - name: Change root password to ADMIN_PASSWORD
          shell: |
            SSHPASS='{{ working_password }}' sshpass -e ssh \
              -o StrictHostKeyChecking=no \
              -o ConnectTimeout=5 \
              -o PasswordAuthentication=yes \
              -o PreferredAuthentications=password \
              root@{{ opnsense_ip }} \
              'set NEWPW="{{ admin_password }}" && printf "y\n$NEWPW\n$NEWPW\n" | /usr/local/opnsense/scripts/shell/password.php'
          register: password_change
          changed_when: "'successfully' in password_change.stdout"
          failed_when: password_change.rc != 0 or 'successfully' not in password_change.stdout
          no_log: true

        - name: Verify config.xml was modified (web UI password changed)
          shell: |
            SSHPASS='{{ admin_password }}' sshpass -e ssh \
              -o StrictHostKeyChecking=no \
              -o ConnectTimeout=5 \
              -o PasswordAuthentication=yes \
              -o PreferredAuthentications=password \
              root@{{ opnsense_ip }} \
              'grep -q "<password>.*2y.*" /conf/config.xml && echo CONFIG_UPDATED'
          register: config_verify
          changed_when: false
          failed_when: "'CONFIG_UPDATED' not in config_verify.stdout"
          when: password_change.changed
          no_log: true

        - name: Verify new password works (SSH)
          shell: |
            SSHPASS='{{ admin_password }}' sshpass -e ssh \
              -o StrictHostKeyChecking=no \
              -o ConnectTimeout=5 \
              -o PasswordAuthentication=yes \
              -o PreferredAuthentications=password \
              -o PubkeyAuthentication=no \
              root@{{ opnsense_ip }} \
              "echo 'NEW_PASSWORD_VERIFIED'"
          register: new_password_verify
          changed_when: false
          no_log: true
          failed_when: false  # We'll check this manually
          when: password_change.rc == 0

        - name: Check password change result
          fail:
            msg: "Password change command succeeded but new password does not work. Password may not have been changed."
          when:
            - password_change.rc == 0
            - new_password_verify.rc != 0

        - name: Update working_password fact after successful change
          set_fact:
            working_password: "{{ admin_password }}"
          when:
            - password_change.rc == 0
            - new_password_verify.rc == 0

        - name: Report password sync success
          debug:
            msg: "âœ“ OPNsense root password synchronized with ADMIN_PASSWORD from Semaphore"
          when:
            - password_change.rc == 0
            - new_password_verify.rc == 0

      rescue:
        - name: Report password sync failure
          fail:
            msg: "Failed to synchronize OPNsense password with ADMIN_PASSWORD from Semaphore"
      when: password_sync_needed

    # ============================================
    # Phase 3: SSH Key Deployment via API (if needed)
    # ============================================

    - name: Deploy SSH key via ephemeral API key
      block:
        - name: Create credentials directory
          file:
            path: "{{ credentials_dir }}"
            state: directory
            mode: '0700'
            owner: root
            group: root

        - name: Generate SSH keypair if missing
          openssh_keypair:
            path: "{{ ssh_key_path }}"
            type: ed25519
            comment: "opnsense-{{ opnsense_ip }}-{{ ansible_date_time.date }}"
            state: present
            mode: '0600'
          when: not ssh_key_exists.stat.exists

        - name: Read public key
          slurp:
            src: "{{ ssh_key_path }}.pub"
          register: public_key_content

        - name: Copy API key generation script to Proxmox
          copy:
            src: "{{ playbook_dir }}/../files/opnsense/create-apikey.php"
            dest: "/tmp/opnsense-create-apikey.php"
            mode: '0644'

        - name: Upload API key generation script to OPNsense
          shell: |
            SSHPASS='{{ working_password }}' sshpass -e scp \
              -o StrictHostKeyChecking=no \
              /tmp/opnsense-create-apikey.php \
              root@{{ opnsense_ip }}:/tmp/create-apikey.php
          changed_when: true

        - name: Generate temporary API key
          shell: |
            SSHPASS='{{ working_password }}' sshpass -e ssh \
              -o StrictHostKeyChecking=no \
              -o PasswordAuthentication=yes \
              -o PreferredAuthentications=password \
              root@{{ opnsense_ip }} \
              '/usr/local/bin/php /tmp/create-apikey.php'
          register: apikey_result
          changed_when: true
          no_log: true

        - name: Parse API key credentials
          set_fact:
            temp_api_key: "{{ (apikey_result.stdout | from_json).key }}"
            temp_api_secret: "{{ (apikey_result.stdout | from_json).secret }}"
          no_log: true

        - name: Get root user data including UUID via API
          shell: |
            ssh -o StrictHostKeyChecking=no \
              root@{{ opnsense_ip }} \
              "curl -s -k -u '{{ temp_api_key }}:{{ temp_api_secret }}' \
               https://localhost/api/auth/user/get"
          register: user_data
          changed_when: false
          no_log: true

        - name: Parse root user UUID from API response
          set_fact:
            root_uuid: "{{ (user_data.stdout | from_json).user.uuid }}"

        - name: Add SSH public key via API
          shell: |
            ssh -o StrictHostKeyChecking=no \
              root@{{ opnsense_ip }} \
              "curl -s -k -u '{{ temp_api_key }}:{{ temp_api_secret }}' \
               -X POST -H 'Content-Type: application/json' \
               -d '{\"user\":{\"authorizedkeys\":\"{{ public_key_content.content | b64decode | trim }}\"}}' \
               https://localhost/api/auth/user/set/{{ root_uuid }}"
          register: api_set_result
          changed_when: "'saved' in api_set_result.stdout"
          failed_when: "'saved' not in api_set_result.stdout"
          no_log: true

        - name: Sync user to apply SSH key to filesystem
          shell: |
            SSHPASS='{{ working_password }}' sshpass -e ssh \
              -o StrictHostKeyChecking=no \
              -o PasswordAuthentication=yes \
              -o PreferredAuthentications=password \
              root@{{ opnsense_ip }} \
              '/usr/local/opnsense/scripts/auth/sync_user.php -u root'
          register: sync_result
          changed_when: "'updated' in sync_result.stdout"
          no_log: true

        - name: Verify SSH key authentication works
          shell: |
            ssh -i {{ ssh_key_path }} \
              -o StrictHostKeyChecking=no \
              -o ConnectTimeout=5 \
              -o PasswordAuthentication=no \
              -o PreferredAuthentications=publickey \
              root@{{ opnsense_ip }} \
              "echo 'KEY_AUTH_SUCCESS' && hostname"
          register: key_verify
          changed_when: false

        - name: Get temporary API key ID for deletion
          shell: |
            ssh -i {{ ssh_key_path }} \
              -o StrictHostKeyChecking=no \
              -o ConnectTimeout=5 \
              root@{{ opnsense_ip }} \
              "curl -s -k -u '{{ temp_api_key }}:{{ temp_api_secret }}' \
               https://localhost/api/auth/user/searchApiKey | \
               jq -r '.rows[] | select(.key==\"{{ temp_api_key }}\") | .id'"
          register: api_key_id
          changed_when: false
          no_log: true

        - name: Delete temporary API key
          shell: |
            ssh -i {{ ssh_key_path }} \
              -o StrictHostKeyChecking=no \
              root@{{ opnsense_ip }} \
              "curl -s -k -u '{{ temp_api_key }}:{{ temp_api_secret }}' \
               -X POST https://localhost/api/auth/user/delApiKey/{{ api_key_id.stdout | trim }}"
          register: api_delete_result
          changed_when: "'deleted' in api_delete_result.stdout"
          no_log: true

        - name: Remove API key generation script from OPNsense
          shell: |
            ssh -i {{ ssh_key_path }} \
              -o StrictHostKeyChecking=no \
              root@{{ opnsense_ip }} \
              'rm -f /tmp/create-apikey.php'
          changed_when: true

        - name: Remove API key generation script from Proxmox
          file:
            path: "/tmp/opnsense-create-apikey.php"
            state: absent

        - name: Report SSH setup success
          debug:
            msg: "âœ“ SSH key authentication successfully configured via ephemeral API key"

      rescue:
        - name: Cleanup OPNsense on failure
          shell: |
            SSHPASS='{{ working_password }}' sshpass -e ssh \
              -o StrictHostKeyChecking=no \
              root@{{ opnsense_ip }} \
              'rm -f /tmp/create-apikey.php'
          failed_when: false

        - name: Cleanup Proxmox on failure
          file:
            path: "/tmp/opnsense-create-apikey.php"
            state: absent
          failed_when: false

        - name: Report SSH setup failure
          fail:
            msg: "Failed to set up SSH key authentication via API"

      when: ssh_setup_needed

    # ============================================
    # Phase 4: Optional - Disable Password Authentication
    # ============================================

    - name: Optional - Disable password authentication
      shell: |
        ssh -i {{ ssh_key_path }} \
          -o StrictHostKeyChecking=no \
          -o ConnectTimeout=5 \
          root@{{ opnsense_ip }} \
          "sed -i.bak 's/^#*PasswordAuthentication.*/PasswordAuthentication no/' /usr/local/etc/ssh/sshd_config && \
           sed -i 's/^#*ChallengeResponseAuthentication.*/ChallengeResponseAuthentication no/' /usr/local/etc/ssh/sshd_config && \
           service sshd reload && \
           echo 'PASSWORD_AUTH_DISABLED'"
      register: disable_password
      when: disable_password_auth | bool
      changed_when: "'PASSWORD_AUTH_DISABLED' in disable_password.stdout"

    # ============================================
    # Phase 5: Final Summary
    # ============================================

    - name: Get SSH key fingerprint
      shell: ssh-keygen -lf {{ ssh_key_path }}.pub | awk '{print $2}'
      register: key_fingerprint
      changed_when: false

    - name: Get OPNsense system info
      shell: |
        ssh -i {{ ssh_key_path }} \
          -o StrictHostKeyChecking=no \
          -o ConnectTimeout=5 \
          root@{{ opnsense_ip }} \
          "opnsense-version && echo '---' && ifconfig vtnet1 | grep 'inet ' | head -5"
      register: system_info
      changed_when: false

    - name: Display final status
      debug:
        msg:
          - "========================================"
          - "OPNsense Secure Access Configuration"
          - "========================================"
          - "Target: {{ opnsense_ip }} ({{ opnsense_hostname }})"
          - "SSH Key: {{ ssh_key_path }}"
          - "Key Fingerprint: {{ key_fingerprint.stdout }}"
          - "SSH Setup: {{ 'Newly configured' if ssh_setup_needed else 'Already configured' }}"
          - "Password Status: {{ 'Synced with Semaphore' if password_sync_needed else 'Using ADMIN_PASSWORD' if working_password == admin_password else 'Using default (no ADMIN_PASSWORD provided)' }}"
          - "Password Auth: {{ 'Disabled' if disable_password_auth else 'Enabled (for recovery)' }}"
          - ""
          - "System Info:"
          - "{{ system_info.stdout_lines | join('\n') }}"
          - ""
          - "Test connection: ssh -i {{ ssh_key_path }} root@{{ opnsense_ip }}"
          - "========================================"