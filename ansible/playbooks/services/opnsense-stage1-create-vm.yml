---
- name: "OPNsense: Stage 1 - Create FreeBSD VM"
  hosts: proxmox
  gather_facts: false
  
  vars:
    service_name: "OPNsense Firewall"
    service_description: "FreeBSD VM for OPNsense conversion"
    service_tag: "opnsense"
    
    # VM Configuration
    vmid: 963
    vm_name: "opnsense-firewall"
    vm_memory: 4096
    vm_cores: 2
    vm_disk_size: "32G"
    vm_storage: "local-lvm"
    wan_bridge: "vmbr0"
    lan_bridge: "vmbr1"
    # FreeBSD Image Configuration
    freebsd_version: "14.3"
    freebsd_image_url: "https://download.freebsd.org/releases/VM-IMAGES/14.3-RELEASE/amd64/Latest/FreeBSD-14.3-RELEASE-amd64-BASIC-CLOUDINIT-ufs.qcow2.xz"
    freebsd_image_cache: "/var/lib/vz/template/cache"
    freebsd_image_name: "FreeBSD-14.3-RELEASE-amd64-BASIC-CLOUDINIT-ufs.qcow2"
    freebsd_image_xz: "{{ freebsd_image_name }}.xz"
    
    # Output files
    vm_ip_file: "/tmp/opnsense-vm-ip"
    stage_marker_file: "/tmp/opnsense-stage1-complete"
    
    # Default FreeBSD credentials (no cloud-init)
    default_username: "freebsd"
    default_password: "freebsd"

  tasks:
    # Pre-flight checks
    - name: "{{ service_name }} - Pre-flight validation"
      tags: [opnsense, preflight]
      block:
        - name: Check if we're running on Proxmox host
          command: which qm
          register: qm_check
          changed_when: false
          failed_when: qm_check.rc != 0
          
        - name: Verify network bridges exist
          command: ip link show {{ item }}
          register: bridge_check
          changed_when: false
          failed_when: bridge_check.rc != 0
          loop:
            - "{{ wan_bridge }}"
            - "{{ lan_bridge }}"
            
        - name: Check if VM ID {{ vmid }} already exists
          command: qm status {{ vmid }}
          register: vm_exists
          changed_when: false
          failed_when: false
          
        - name: Destroy existing VM if present
          when: vm_exists.rc == 0
          block:
            - name: Stop VM {{ vmid }} if running
              command: qm stop {{ vmid }}
              register: vm_stop
              failed_when: false
              
            - name: Wait for VM to stop
              command: qm status {{ vmid }}
              register: vm_status
              until: "'stopped' in vm_status.stdout"
              retries: 30
              delay: 2
              when: vm_stop.rc == 0
              
            - name: Destroy VM {{ vmid }}
              command: qm destroy {{ vmid }} --purge
              
            - name: Confirm VM destroyed
              command: qm status {{ vmid }}
              register: destroy_check
              failed_when: destroy_check.rc == 0

    # FreeBSD image download and preparation
    - name: "{{ service_name }} - FreeBSD image preparation"
      tags: [opnsense, image]
      block:
        - name: Create cache directory
          file:
            path: "{{ freebsd_image_cache }}"
            state: directory
            mode: '0755'
            
        - name: Check if FreeBSD image already exists
          stat:
            path: "{{ freebsd_image_cache }}/{{ freebsd_image_name }}"
          register: freebsd_image_stat
          
        - name: Download FreeBSD image if not cached
          when: not freebsd_image_stat.stat.exists
          block:
            - name: Download FreeBSD .xz image
              get_url:
                url: "{{ freebsd_image_url }}"
                dest: "{{ freebsd_image_cache }}/{{ freebsd_image_xz }}"
                mode: '0644'
                timeout: 300
              register: download_result
              
            - name: Extract FreeBSD image from .xz
              command: xz -d "{{ freebsd_image_cache }}/{{ freebsd_image_xz }}"
              when: download_result.changed
              
        - name: Verify FreeBSD image exists
          stat:
            path: "{{ freebsd_image_cache }}/{{ freebsd_image_name }}"
          register: image_verify
          failed_when: not image_verify.stat.exists
          
        - name: Display image info
          debug:
            msg: "FreeBSD image ready: {{ freebsd_image_cache }}/{{ freebsd_image_name }}"


    # VM creation (no cloud-init - image doesn't support it)
    - name: "{{ service_name }} - VM creation"
      tags: [opnsense, create]
      block:
        - name: Create VM {{ vmid }}
          command: >
            qm create {{ vmid }}
            --name "{{ vm_name }}"
            --memory {{ vm_memory }}
            --cores {{ vm_cores }}
            --net0 virtio,bridge={{ wan_bridge }}
            --net1 virtio,bridge={{ lan_bridge }}
            --serial0 socket
            --vga serial0
            --agent enabled=1
            --ostype other
          register: vm_create
          
        - name: Import FreeBSD disk image
          command: >
            qm importdisk {{ vmid }} 
            "{{ freebsd_image_cache }}/{{ freebsd_image_name }}" 
            {{ vm_storage }}
          register: disk_import
          
        - name: Configure VM disk (no ipconfig0 - DHCP default)
          command: >
            qm set {{ vmid }}
            --scsihw virtio-scsi-pci
            --scsi0 {{ vm_storage }}:vm-{{ vmid }}-disk-0
            --boot c
            --bootdisk scsi0
            
        - name: Resize disk to {{ vm_disk_size }}
          command: qm resize {{ vmid }} scsi0 {{ vm_disk_size }}

    # VM startup and IP discovery
    - name: "{{ service_name }} - VM startup and IP discovery"
      tags: [opnsense, start]
      block:
        - name: Start VM {{ vmid }}
          command: qm start {{ vmid }}
          
        - name: Wait for VM to start
          command: qm status {{ vmid }}
          register: vm_status_check
          until: "'running' in vm_status_check.stdout"
          retries: 30
          delay: 2
          
        - name: Wait for FreeBSD VM to boot with DHCP
          pause:
            seconds: 60
            prompt: "Waiting for FreeBSD VM to boot and get DHCP IP"
          
        - name: Extract MAC address from VM config
          shell: qm config {{ vmid }} | grep net0 | sed -E 's/.*virtio=([^,]+).*/\1/'
          register: vm_mac_result
          changed_when: false
          
        - name: Set MAC address fact
          set_fact:
            vm_mac: "{{ vm_mac_result.stdout }}"
            
        - name: Debug MAC address
          debug:
            msg: "VM MAC address: {{ vm_mac }}"
            
        - name: Populate ARP table by pinging subnet range
          shell: |
            # Get current subnet from default gateway
            GATEWAY=$(ip route | grep default | awk '{print $3}')
            SUBNET=$(echo $GATEWAY | cut -d. -f1-3)
            echo "Scanning subnet: ${SUBNET}.1-254 (gateway: $GATEWAY)"
            
            # Ping range in parallel (background jobs)
            for ip in {1..254}; do 
              ping -c 1 -W 1 "${SUBNET}.${ip}" >/dev/null 2>&1 & 
            done
            wait
            
            echo "ARP population complete"
          changed_when: false
          
        - name: Discover VM IP from ARP table
          shell: |
            # Try modern 'ip neighbor' first, fallback to 'arp'
            VM_IP=$(ip neighbor show | grep -i "{{ vm_mac }}" | awk '{print $1}' | head -1)
            if [ -z "$VM_IP" ]; then
              VM_IP=$(arp -a | grep -i "{{ vm_mac }}" | sed -E 's/.*\(([0-9.]+)\).*/\1/' | head -1)
            fi
            echo "$VM_IP"
          register: vm_ip_result
          changed_when: false
          
        - name: Set VM IP fact
          set_fact:
            vm_ip: "{{ vm_ip_result.stdout }}"
          when: vm_ip_result.stdout != ""
          
        - name: Fail if VM IP not discovered
          fail:
            msg: "Could not discover VM IP via MAC address {{ vm_mac }}"
          when: vm_ip_result.stdout == ""
          
        - name: Debug discovered IP
          debug:
            msg: "Discovered VM IP: {{ vm_ip }}"
          
        - name: Test VM connectivity
          command: ping -c 3 -W 2 {{ vm_ip }}
          register: ping_test
          until: ping_test.rc == 0
          retries: 5
          delay: 3
          
        - name: Save VM IP to file
          copy:
            content: "{{ vm_ip }}"
            dest: "{{ vm_ip_file }}"
            mode: '0644'
          
        - name: Create stage completion marker
          copy:
            content: |
              Stage 1 Complete: {{ ansible_date_time.iso8601 }}
              VM ID: {{ vmid }}
              VM Name: {{ vm_name }}
              VM IP: {{ vm_ip | default('Not detected') }}
              FreeBSD Version: {{ freebsd_version }}
              Status: Ready for Stage 2 OPNsense bootstrap
            dest: "{{ stage_marker_file }}"
            mode: '0644'

    # Final validation and reporting
    - name: "{{ service_name }} - Stage 1 completion report"
      tags: [opnsense, report]
      block:
        - name: Verify stage completion
          assert:
            that:
              - vm_ip is defined
              - vm_ip != ""
              - ping_test.rc == 0
            fail_msg: "Stage 1 failed: VM not responding to ping"
            success_msg: "Stage 1 SUCCESS: FreeBSD VM responding at {{ vm_ip }}"
            
        - name: Display stage 1 completion
          debug:
            msg:
              - "=========================================="
              - "{{ service_name }} - Stage 1 COMPLETE"
              - "=========================================="
              - ""
              - "VM Status: Running and accessible"
              - "VM ID: {{ vmid }}"
              - "VM Name: {{ vm_name }}"
              - "VM IP: {{ vm_ip }}"
              - "FreeBSD Version: {{ freebsd_version }}"
              - "VM MAC: {{ vm_mac }}"
              - ""
              - "Network Configuration:"
              - "- WAN Interface (vtnet0): {{ wan_bridge }} - DHCP ({{ vm_ip }})"
              - "- LAN Interface (vtnet1): {{ lan_bridge }} - Unconfigured"
              - "- Default credentials: {{ default_username }}/{{ default_password }} (DHCP boot only)"
              - ""
              - "Next Steps:"
              - "- Run Stage 2: opnsense-stage2-bootstrap.yml"
              - "- This will convert FreeBSD to OPNsense 25.7"
              - ""
              - "VM Management:"
              - "- Status: qm status {{ vmid }}"
              - "- Console: qm terminal {{ vmid }}"
              - "- Stop: qm stop {{ vmid }}"
              - "- Start: qm start {{ vmid }}"
              - ""
              - "Files Created:"
              - "- VM IP: {{ vm_ip_file }}"
              - "- Stage marker: {{ stage_marker_file }}"
              - "=========================================="
              
        - name: Save stage 1 deployment info
          copy:
            content: |
              {{ service_name }} - Stage 1 Deployment Information
              =================================================
              Deployed: {{ ansible_date_time.iso8601 }}
              Host: {{ inventory_hostname }}
              
              VM Configuration:
              - VM ID: {{ vmid }}
              - VM Name: {{ vm_name }}
              - Memory: {{ vm_memory }} MB
              - Cores: {{ vm_cores }}
              - Disk: {{ vm_disk_size }}
              - Storage: {{ vm_storage }}
              
              Network Configuration:
              - WAN Bridge: {{ wan_bridge }} (vtnet0)
              - LAN Bridge: {{ lan_bridge }} (vtnet1)
              - VM IP: {{ vm_ip }}
              - VM MAC: {{ vm_mac }}
              
              FreeBSD Configuration:
              - Version: {{ freebsd_version }}
              - Image: {{ freebsd_image_name }}
              - Default User: {{ default_username }}/{{ default_password }}
              
              Status: Ready for Stage 2 OPNsense bootstrap
              
              Next Command:
              ansible-playbook -i inventory opnsense-stage2-bootstrap.yml
            dest: "/tmp/opnsense-stage1-deployment-info.txt"
            mode: '0644'