---
- name: "FreeBSD: Automated VM Install via Proxmox API"
  hosts: localhost
  gather_facts: true

  vars:
    proxmox_node: "{{ PROXMOX_NODE | default('proxmox') }}"
    iso_storage: "{{ ISO_STORAGE | default('local') }}"
    service_name: "FreeBSD VM (API)"
    service_description: "Automated FreeBSD VM installation using Proxmox API"
    service_tag: "freebsd-api"

    template_config:
      semaphore_environment: "ProxmoxAPI"

    # VM Configuration
    vmid: 9998
    vm_name: "freebsd-api-vm"
    vm_memory: 2048
    vm_cores: 2
    vm_disk_size: 20
    vm_storage: "local-lvm"
    network_bridge: "vmbr0"

    # FreeBSD Image Configuration
    # Using fixed ISO names for consistency

    # Network Configuration (guest)
    vm_static_ip: "192.168.1.55"
    vm_netmask: "255.255.255.0"
    vm_gateway: "192.168.1.1"
    vm_dns1: "8.8.8.8"
    vm_dns2: "8.8.4.4"

    # FreeBSD system/user config (for post checks / your installerconfig)
    freebsd_hostname: "freebsd-privatebox"
    freebsd_interface: "vtnet0"
    freebsd_timezone: "UTC"
    freebsd_swap_size: "2G"
    freebsd_username: "freebsd"
    freebsd_password: "{{ SERVICES_PASSWORD | default('privatebox123') }}"
    freebsd_fullname: "FreeBSD PrivateBox User"
    freebsd_shell: "/bin/sh"
    freebsd_sudo_access: true
    freebsd_packages: ["bash", "nano", "curl", "wget", "git", "rsync", "htop"]
    freebsd_security_hardening: true
    freebsd_ssh_security: true
    freebsd_enable_firewall: true
    freebsd_firewall_type: "simple"
    freebsd_firewall_services: "ssh"
    freebsd_firewall_allowed_ips: "192.168.1.0/24"

    # Proxmox API Configuration
    proxmox_host: "{{ PROXMOX_API_HOST | default('192.168.1.10') }}"
    proxmox_user: "{{ PROXMOX_USER | default(PROXMOX_TOKEN_ID.split('!')[0] if PROXMOX_TOKEN_ID and '!' in PROXMOX_TOKEN_ID else 'root@pam') }}"
    proxmox_password: "{{ PROXMOX_PASSWORD | default('') }}"
    proxmox_token_id: "{{ PROXMOX_TOKEN_ID.split('!')[1] if PROXMOX_TOKEN_ID and '!' in PROXMOX_TOKEN_ID else '' }}"
    proxmox_token_secret: "{{ PROXMOX_TOKEN_SECRET | default('') }}"
    proxmox_validate_certs: false
    proxmox_timeout: 300

  tasks:
    - name: "{{ service_name }} - Pre-flight validation"
      tags: [freebsd, preflight, api]
      block:
        - name: Decide auth method
          set_fact:
            use_api_token: "{{ proxmox_token_id != '' and proxmox_token_secret != '' }}"
            use_password: "{{ proxmox_password != '' }}"

        - name: Validate credentials
          assert:
            that: [use_api_token or use_password]
            fail_msg: "Provide API token (PROXMOX_TOKEN_ID/PROXMOX_TOKEN_SECRET) or password (PROXMOX_PASSWORD)."

        - name: Probe VM existence
          community.general.proxmox_kvm:
            api_host: "{{ proxmox_host }}"
            api_user: "{{ proxmox_user }}"
            api_password: "{{ proxmox_password if use_password else omit }}"
            api_token_id: "{{ proxmox_token_id if use_api_token else omit }}"
            api_token_secret: "{{ proxmox_token_secret if use_api_token else omit }}"
            validate_certs: "{{ proxmox_validate_certs }}"
            node: "{{ proxmox_node }}"
            vmid: "{{ vmid }}"
            state: current
          register: vm_current_state
          failed_when: false

        - name: Remove existing VM (if present)
          when: vm_current_state.msg is not defined or "does not exist" not in vm_current_state.msg
          community.general.proxmox_kvm:
            api_host: "{{ proxmox_host }}"
            api_user: "{{ proxmox_user }}"
            api_password: "{{ proxmox_password if use_password else omit }}"
            api_token_id: "{{ proxmox_token_id if use_api_token else omit }}"
            api_token_secret: "{{ proxmox_token_secret if use_api_token else omit }}"
            validate_certs: "{{ proxmox_validate_certs }}"
            node: "{{ proxmox_node }}"
            vmid: "{{ vmid }}"
            state: absent
            force: true
            timeout: "{{ proxmox_timeout }}"

    - name: "{{ service_name }} - Verify custom installer ISO exists"
      tags: [freebsd, verify, api]
      block:
        - name: List local ISO content
          uri:
            url: "https://{{ proxmox_host }}:8006/api2/json/nodes/{{ proxmox_node }}/storage/{{ iso_storage }}/content"
            method: GET
            headers:
              Authorization: "{{ 'PVEAPIToken=' + PROXMOX_TOKEN_ID + '=' + proxmox_token_secret if use_api_token else 'Basic ' + ((proxmox_user + ':' + proxmox_password) | b64encode) }}"
            validate_certs: "{{ proxmox_validate_certs }}"
          register: storage_content

        - name: Assert custom ISO present
          assert:
            that:
              - (storage_content.json.data | selectattr('volid','search', 'mfsbsd-freebsd-autoinstaller.iso') | list | length) > 0
            fail_msg: "Custom installer ISO mfsbsd-freebsd-autoinstaller.iso not found on '{{ iso_storage }}'. Build it first."
            success_msg: "Found mfsbsd-freebsd-autoinstaller.iso."

    - name: "{{ service_name }} - VM creation via API"
      tags: [freebsd, create, api]
      block:
        - name: Create VM
          community.general.proxmox_kvm:
            api_host: "{{ proxmox_host }}"
            api_user: "{{ proxmox_user }}"
            api_password: "{{ proxmox_password if use_password else omit }}"
            api_token_id: "{{ proxmox_token_id if use_api_token else omit }}"
            api_token_secret: "{{ proxmox_token_secret if use_api_token else omit }}"
            validate_certs: "{{ proxmox_validate_certs }}"
            node: "{{ proxmox_node }}"
            vmid: "{{ vmid }}"
            name: "{{ vm_name }}"
            memory: "{{ vm_memory }}"
            cores: "{{ vm_cores }}"
            ostype: other
            boot: "order=ide2"
            serial: { serial0: socket }
            vga: serial0
            net: { net0: "virtio,bridge={{ network_bridge }}" }
            virtio: { virtio0: "{{ vm_storage }}:{{ vm_disk_size }}" }
            ide:
              ide2: "{{ iso_storage }}:iso/mfsbsd-freebsd-autoinstaller.iso,media=cdrom"
              ide3: "{{ iso_storage }}:iso/freebsd-installer-config.iso,media=cdrom"
            state: present
            timeout: "{{ proxmox_timeout }}"

    - name: "{{ service_name }} - Automated installation via API"
      tags: [freebsd, install, api]
      block:
        - name: Start VM
          community.general.proxmox_kvm:
            api_host: "{{ proxmox_host }}"
            api_user: "{{ proxmox_user }}"
            api_password: "{{ proxmox_password if use_password else omit }}"
            api_token_id: "{{ proxmox_token_id if use_api_token else omit }}"
            api_token_secret: "{{ proxmox_token_secret if use_api_token else omit }}"
            validate_certs: "{{ proxmox_validate_certs }}"
            node: "{{ proxmox_node }}"
            vmid: "{{ vmid }}"
            state: started
            timeout: "{{ proxmox_timeout }}"

        - name: Wait until VM is running
          community.general.proxmox_kvm:
            api_host: "{{ proxmox_host }}"
            api_user: "{{ proxmox_user }}"
            api_password: "{{ proxmox_password if use_password else omit }}"
            api_token_id: "{{ proxmox_token_id if use_api_token else omit }}"
            api_token_secret: "{{ proxmox_token_secret if use_api_token else omit }}"
            validate_certs: "{{ proxmox_validate_certs }}"
            node: "{{ proxmox_node }}"
            vmid: "{{ vmid }}"
            state: current
          register: vm_status
          until: vm_status.status == "running"
          retries: 30
          delay: 10

        - name: Wait for installer to finish (VM stops itself)
          community.general.proxmox_kvm:
            api_host: "{{ proxmox_host }}"
            api_user: "{{ proxmox_user }}"
            api_password: "{{ proxmox_password if use_password else omit }}"
            api_token_id: "{{ proxmox_token_id if use_api_token else omit }}"
            api_token_secret: "{{ proxmox_token_secret if use_api_token else omit }}"
            validate_certs: "{{ proxmox_validate_certs }}"
            vmid: "{{ vmid }}"
            state: current
          register: installation_status
          until: installation_status.status == "stopped"
          retries: 90
          delay: 30
          timeout: "{{ proxmox_timeout }}"

        - name: Switch boot to disk, detach ISO
          community.general.proxmox_kvm:
            api_host: "{{ proxmox_host }}"
            api_user: "{{ proxmox_user }}"
            api_password: "{{ proxmox_password if use_password else omit }}"
            api_token_id: "{{ proxmox_token_id if use_api_token else omit }}"
            api_token_secret: "{{ proxmox_token_secret if use_api_token else omit }}"
            validate_certs: "{{ proxmox_validate_certs }}"
            node: "{{ proxmox_node }}"
            vmid: "{{ vmid }}"
            boot: "order=virtio0"
            ide: { ide2: "" }
            update: true
            timeout: "{{ proxmox_timeout }}"

        - name: Start VM from disk
          community.general.proxmox_kvm:
            api_host: "{{ proxmox_host }}"
            api_user: "{{ proxmox_user }}"
            api_password: "{{ proxmox_password if use_password else omit }}"
            api_token_id: "{{ proxmox_token_id if use_api_token else omit }}"
            api_token_secret: "{{ proxmox_token_secret if use_api_token else omit }}"
            validate_certs: "{{ proxmox_validate_certs }}"
            node: "{{ proxmox_node }}"
            vmid: "{{ vmid }}"
            state: started
            timeout: "{{ proxmox_timeout }}"

    - name: "{{ service_name }} - Post-installation validation"
      tags: [freebsd, validate, api]
      block:
        - name: Wait for SSH
          wait_for:
            host: "{{ vm_static_ip }}"
            port: 22
            timeout: 300

        - name: Install sshpass (if available)
          package:
            name: sshpass
            state: present
          become: true
          when: ansible_facts['pkg_mgr'] in ['apt','yum','dnf','zypper']

        - name: Test SSH
          shell: >
            sshpass -p '{{ freebsd_password }}' ssh -o StrictHostKeyChecking=no
            -o UserKnownHostsFile=/dev/null -o ConnectTimeout=10
            {{ freebsd_username }}@{{ vm_static_ip }} 'uname -a'
          register: ssh_test
          changed_when: false
          retries: 5
          delay: 10

        - name: Verify SSH
          assert:
            that: [ssh_test.rc == 0, "'FreeBSD' in ssh_test.stdout"]
            fail_msg: "SSH test failed or FreeBSD not detected"
            success_msg: "FreeBSD VM installed and reachable"

    - name: "{{ service_name }} - Cleanup and reporting"
      tags: [freebsd, cleanup, api]
      block:
        - name: Summary
          debug:
            msg:
              - "=============================================="
              - "{{ service_name }} Installation COMPLETE"
              - "VM ID: {{ vmid }}, Name: {{ vm_name }}, Disk: {{ vm_disk_size }}G, RAM: {{ vm_memory }}M"
              - "ISO used: mfsbsd-freebsd-autoinstaller.iso"
              - "SSH: ssh {{ freebsd_username }}@{{ vm_static_ip }}"
              - "=============================================="

        - name: Save deployment info
          copy:
            dest: "/tmp/freebsd-{{ vmid }}-api-deployment-info.txt"
            mode: "0644"
            content: |
              FreeBSD VM Deployment (API)
              Deployed: {{ ansible_date_time.iso8601 }}
              VM: id={{ vmid }}, name={{ vm_name }}, cpu={{ vm_cores }}, ram={{ vm_memory }}MB, disk={{ vm_disk_size }}GB
              Network: {{ vm_static_ip }} / {{ vm_netmask }}, gw={{ vm_gateway }}, dns={{ vm_dns1 }},{{ vm_dns2 }}
              ISO: mfsbsd-freebsd-autoinstaller.iso
              Auth: {{ 'API Token' if use_api_token else 'Username/Password' }}
