---
# Create Basic Alpine Linux VM
# Simplified playbook that just creates an Alpine VM with password auth
#
# Usage:
#   ansible-playbook -i inventory.yml alpine-vm-create.yml

- name: "Alpine VM: Create Basic Alpine Linux VM"
  hosts: proxmox
  become: false
  gather_facts: true
  
  vars:
    # VM Configuration
    vm_id: 9002
    vm_name: "alpine-test"
    vm_memory: 512
    vm_cores: 1
    vm_storage: "local-lvm"
    vm_disk_size: "4G"
    vm_network_bridge: "vmbr0"
    
    # Alpine Configuration
    alpine_version: "3.20"
    alpine_arch: "x86_64"
    alpine_image_name: "alpine-{{ alpine_version }}-{{ alpine_arch }}.qcow2"
    # Using generic cloud image URL
    alpine_image_url: "https://dl-cdn.alpinelinux.org/alpine/v{{ alpine_version }}/releases/cloud/nocloud_alpine-{{ alpine_version }}.0-{{ alpine_arch }}-bios-cloudinit-r0.qcow2"
    
    # Network Configuration
    vm_ip: "192.168.1.23"
    vm_gateway: "192.168.1.1"
    vm_netmask: "24"
    
    # User Configuration
    alpine_user: "alpine"
    alpine_password: "alpine123"  # Change this!
    
    # Temporary directory
    temp_dir: "/tmp/alpine-vm-{{ vm_id }}"
    
  tasks:
    # Check if VM exists
    - name: Check if VM already exists
      command: qm status {{ vm_id }}
      register: vm_exists
      failed_when: false
      changed_when: false
      
    - name: Stop if VM already exists
      fail:
        msg: "VM {{ vm_id }} already exists. Remove it first with: qm destroy {{ vm_id }}"
      when: vm_exists.rc == 0

    # Create VM
    - name: Create temporary directory
      file:
        path: "{{ temp_dir }}"
        state: directory
        mode: '0755'
        
    - name: Download Alpine cloud image
      get_url:
        url: "{{ alpine_image_url }}"
        dest: "{{ temp_dir }}/{{ alpine_image_name }}"
        mode: '0644'
        timeout: 300
        
    - name: Generate simple cloud-init user-data
      copy:
        dest: "{{ temp_dir }}/user-data"
        content: |
          #cloud-config
          hostname: {{ vm_name }}
          manage_etc_hosts: true
          
          users:
            - name: {{ alpine_user }}
              gecos: Alpine User
              sudo: ALL=(ALL) NOPASSWD:ALL
              shell: /bin/ash
              lock_passwd: false
              plain_text_passwd: {{ alpine_password }}
              
          # Enable password authentication
          ssh_pwauth: true
          
          # Basic packages
          packages:
            - openssh
            - nano
            - curl
            
          # Start SSH
          runcmd:
            - rc-update add sshd default
            - rc-service sshd start
            
    - name: Generate cloud-init meta-data
      copy:
        dest: "{{ temp_dir }}/meta-data"
        content: |
          instance-id: {{ vm_name }}-{{ vm_id }}
          local-hostname: {{ vm_name }}
          
    - name: Create cloud-init ISO
      command: |
        genisoimage -output {{ temp_dir }}/cloud-init.iso -V cidata -r -J \
          {{ temp_dir }}/meta-data {{ temp_dir }}/user-data
          
    - name: Create VM
      command: |
        qm create {{ vm_id }} \
          --name {{ vm_name }} \
          --memory {{ vm_memory }} \
          --cores {{ vm_cores }} \
          --net0 virtio,bridge={{ vm_network_bridge }} \
          --serial0 socket \
          --vga serial0
          
    - name: Import disk image
      command: |
        qm importdisk {{ vm_id }} {{ temp_dir }}/{{ alpine_image_name }} {{ vm_storage }}
        
    - name: Attach disk to VM
      command: |
        qm set {{ vm_id }} --scsi0 {{ vm_storage }}:vm-{{ vm_id }}-disk-0
        
    - name: Set boot options
      command: |
        qm set {{ vm_id }} --boot c --bootdisk scsi0
        
    - name: Resize disk
      command: |
        qm resize {{ vm_id }} scsi0 {{ vm_disk_size }}
        
    - name: Add cloud-init drive
      command: |
        qm set {{ vm_id }} --ide2 {{ vm_storage }}:cloudinit
        
    - name: Set network configuration
      command: |
        qm set {{ vm_id }} --ipconfig0 ip={{ vm_ip }}/{{ vm_netmask }},gw={{ vm_gateway }}
        
    - name: Start VM
      command: qm start {{ vm_id }}
      
    - name: Wait for VM to be accessible
      wait_for:
        host: "{{ vm_ip }}"
        port: 22
        delay: 30
        timeout: 300
        
    - name: Clean up temporary files
      file:
        path: "{{ temp_dir }}"
        state: absent
        
    - name: Display access information
      debug:
        msg:
          - "=================================="
          - "Alpine VM Created Successfully!"
          - "=================================="
          - "VM ID: {{ vm_id }}"
          - "VM Name: {{ vm_name }}"
          - "IP Address: {{ vm_ip }}"
          - ""
          - "SSH Access:"
          - "  ssh {{ alpine_user }}@{{ vm_ip }}"
          - "  Password: {{ alpine_password }}"
          - ""
          - "To remove this VM:"
          - "  qm stop {{ vm_id }} && qm destroy {{ vm_id }}"
          - "=================================="