---
- name: "OPNsense: Setup SSH key-based authentication"
  hosts: proxmox
  gather_facts: yes
  vars:
    # Override with -e opnsense_vm_name=exact-name or set in Semaphore
    opnsense_vm_name: "{{ vm_name | default('') }}"
    opnsense_default_password: "opnsense"
    disable_password_auth: false
    enable_debug: true
    credentials_dir: "/root/.credentials/opnsense"
    ssh_key_path: "{{ credentials_dir }}/id_ed25519"
    discovery_file: "/tmp/opnsense-discovery.env"
    setup_state_file: "/tmp/opnsense-ssh-setup.env"

  tasks:
    - name: Check if discovery has been completed
      stat:
        path: "{{ discovery_file }}"
      register: discovery_check

    - name: Fail if discovery not completed
      fail:
        msg: |
          OPNsense discovery has not been completed!
          Please run the opnsense-discover-ip.yml playbook first.
          Expected file not found: {{ discovery_file }}
      when: not discovery_check.stat.exists

    - name: Read discovery results
      slurp:
        src: "{{ discovery_file }}"
      register: discovery_content

    - name: Parse discovery results
      set_fact:
        discovery_data: "{{ (discovery_content.content | b64decode).split('\n') | 
                           select('match', '^[A-Z_]+=') | 
                           map('regex_replace', '([^=]+)=(.*)', '\\1: \\2') | 
                           join('\n') | from_yaml }}"

    - name: Set OPNsense facts from discovery
      set_fact:
        opnsense_ip: "{{ discovery_data.OPNSENSE_IP }}"
        opnsense_mac: "{{ discovery_data.OPNSENSE_MAC }}"
        discovered_vm_id: "{{ discovery_data.OPNSENSE_VM_ID }}"
        discovered_vm_name: "{{ discovery_data.OPNSENSE_VM_NAME }}"

    - name: Debug - Show discovered information
      debug:
        msg:
          - "OPNsense IP: {{ opnsense_ip }}"
          - "OPNsense MAC: {{ opnsense_mac }}"
          - "VM ID: {{ discovered_vm_id }}"
          - "VM Name: {{ discovered_vm_name }}"
      when: enable_debug | bool

    - name: Check if SSH setup already completed
      stat:
        path: "{{ setup_state_file }}"
      register: setup_check

    - name: Read existing setup state if present
      slurp:
        src: "{{ setup_state_file }}"
      register: setup_content
      when: setup_check.stat.exists

    - name: Parse existing setup state
      set_fact:
        setup_data: "{{ (setup_content.content | b64decode).split('\n') | 
                       select('match', '^[A-Z_]+=') | 
                       map('regex_replace', '([^=]+)=(.*)', '\\1: \\2') | 
                       join('\n') | from_yaml }}"
      when: setup_check.stat.exists

    - name: Check if setup needs to be done
      set_fact:
        needs_setup: "{{ not setup_check.stat.exists or 
                        (setup_data.SSH_SETUP_COMPLETE | default('false')) != 'true' or
                        (setup_data.OPNSENSE_IP | default('')) != opnsense_ip }}"

    - name: Display setup status
      debug:
        msg: "{{ 'SSH setup already completed for ' + opnsense_ip if not needs_setup else 'Starting SSH setup for ' + opnsense_ip }}"

    - name: Create credentials directory
      file:
        path: "{{ credentials_dir }}"
        state: directory
        mode: '0700'
        owner: root
        group: root
      when: needs_setup

    - name: Check if SSH key already exists
      stat:
        path: "{{ ssh_key_path }}"
      register: ssh_key_check

    - name: Generate SSH keypair
      openssh_keypair:
        path: "{{ ssh_key_path }}"
        type: ed25519
        comment: "opnsense-{{ discovered_vm_name }}-{{ discovered_vm_id }}"
        state: present
        mode: '0600'
      when: 
        - needs_setup
        - not ssh_key_check.stat.exists
      register: ssh_key_generated

    - name: Read public key
      slurp:
        src: "{{ ssh_key_path }}.pub"
      register: public_key_content
      when: needs_setup

    - name: Set public key fact
      set_fact:
        ssh_public_key: "{{ public_key_content.content | b64decode | trim }}"
      when: needs_setup

    - name: Debug - Show public key
      debug:
        msg: "Public key to deploy: {{ ssh_public_key }}"
      when: 
        - needs_setup
        - enable_debug | bool

    - name: Test current SSH access with password
      shell: |
        SSHPASS='{{ opnsense_default_password }}' sshpass -e ssh \
          -o StrictHostKeyChecking=no \
          -o ConnectTimeout=5 \
          -o PasswordAuthentication=yes \
          -o PreferredAuthentications=password \
          root@{{ opnsense_ip }} \
          "echo 'SSH_ACCESS_OK'"
      register: ssh_test
      changed_when: false
      failed_when: false
      when: needs_setup

    - name: Fail if password access not available
      fail:
        msg: |
          Cannot connect to OPNsense at {{ opnsense_ip }} with default password.
          This could mean:
          1. The default password has been changed
          2. SSH is disabled on the WAN interface
          3. Network connectivity issue
          
          Please verify OPNsense is accessible and try again.
      when: 
        - needs_setup
        - ssh_test.rc != 0

    - name: Deploy SSH public key to OPNsense
      shell: |
        SSHPASS='{{ opnsense_default_password }}' sshpass -e ssh \
          -o StrictHostKeyChecking=no \
          -o ConnectTimeout=5 \
          -o PasswordAuthentication=yes \
          -o PreferredAuthentications=password \
          root@{{ opnsense_ip }} \
          "mkdir -p /root/.ssh && \
           chmod 700 /root/.ssh && \
           echo '{{ ssh_public_key }}' >> /root/.ssh/authorized_keys && \
           chmod 600 /root/.ssh/authorized_keys && \
           echo 'KEY_DEPLOYED'"
      register: key_deploy
      when: needs_setup
      changed_when: "'KEY_DEPLOYED' in key_deploy.stdout"

    - name: Test SSH key-based authentication
      shell: |
        ssh -i {{ ssh_key_path }} \
          -o StrictHostKeyChecking=no \
          -o ConnectTimeout=5 \
          -o PasswordAuthentication=no \
          -o PreferredAuthentications=publickey \
          root@{{ opnsense_ip }} \
          "echo 'KEY_AUTH_SUCCESS' && hostname && opnsense-version"
      register: key_test
      when: needs_setup
      changed_when: false

    - name: Verify key authentication worked
      fail:
        msg: |
          SSH key authentication test failed!
          Key was deployed but authentication is not working.
          Please check the OPNsense SSH configuration.
      when:
        - needs_setup
        - "'KEY_AUTH_SUCCESS' not in key_test.stdout"

    - name: Display key authentication test results
      debug:
        msg: 
          - "âœ“ SSH key authentication successful!"
          - "OPNsense details:"
          - "{{ key_test.stdout_lines }}"
      when: needs_setup

    - name: Get SSH key fingerprint
      shell: ssh-keygen -lf {{ ssh_key_path }}.pub | awk '{print $2}'
      register: key_fingerprint
      changed_when: false
      when: needs_setup

    - name: Disable password authentication (optional)
      shell: |
        ssh -i {{ ssh_key_path }} \
          -o StrictHostKeyChecking=no \
          -o ConnectTimeout=5 \
          root@{{ opnsense_ip }} \
          "sed -i.bak 's/^#*PasswordAuthentication.*/PasswordAuthentication no/' /usr/local/etc/ssh/sshd_config && \
           sed -i 's/^#*ChallengeResponseAuthentication.*/ChallengeResponseAuthentication no/' /usr/local/etc/ssh/sshd_config && \
           service sshd reload && \
           echo 'PASSWORD_AUTH_DISABLED'"
      register: disable_password
      when: 
        - needs_setup
        - disable_password_auth | bool
      changed_when: "'PASSWORD_AUTH_DISABLED' in disable_password.stdout"

    - name: Save SSH setup state
      copy:
        content: |
          # OPNsense SSH Setup Results
          SSH_SETUP_COMPLETE=true
          OPNSENSE_IP={{ opnsense_ip }}
          OPNSENSE_MAC={{ opnsense_mac }}
          OPNSENSE_VM_ID={{ discovered_vm_id }}
          OPNSENSE_VM_NAME={{ discovered_vm_name }}
          SSH_KEY_PATH={{ ssh_key_path }}
          SSH_KEY_FINGERPRINT={{ key_fingerprint.stdout }}
          SSH_PUBKEY_PATH={{ ssh_key_path }}.pub
          PASSWORD_AUTH_DISABLED={{ disable_password_auth | lower }}
          SETUP_TIMESTAMP={{ ansible_date_time.iso8601 }}
          SETUP_HOST={{ inventory_hostname }}
        dest: "{{ setup_state_file }}"
        mode: '0644'
      when: needs_setup

    - name: Display completion summary
      debug:
        msg:
          - "========================================"
          - "SSH Setup Complete!"
          - "========================================"
          - "OPNsense IP: {{ opnsense_ip }}"
          - "SSH Key: {{ ssh_key_path }}"
          - "Key Fingerprint: {{ (key_fingerprint.stdout if key_fingerprint is defined else setup_data.SSH_KEY_FINGERPRINT | default('unknown')) if needs_setup else setup_data.SSH_KEY_FINGERPRINT | default('unknown') }}"
          - "Password Auth: {{ 'Disabled' if disable_password_auth else 'Still Enabled' }}"
          - ""
          - "Test connection:"
          - "  ssh -i {{ ssh_key_path }} root@{{ opnsense_ip }}"
          - ""
          - "Results saved to: {{ setup_state_file }}"
          - "========================================"

    - name: Note about existing setup
      debug:
        msg:
          - "SSH setup was already completed on {{ setup_data.SETUP_TIMESTAMP | default('unknown') }}"
          - "Using existing key at: {{ setup_data.SSH_KEY_PATH | default(ssh_key_path) }}"
          - "To force re-setup, remove: {{ setup_state_file }}"
      when: not needs_setup