---
- name: "OPNsense: Configure Interfaces"
  hosts: container-host
  gather_facts: false
  
  vars:
    service_name: "OPNsense Network Configuration"
    service_description: "Configure LAN/WAN interfaces and basic firewall rules"
    
    # Network configuration variables (can be overridden)
    opnsense_host: "{{ opnsense_wan_ip | default('192.168.1.100') }}"
    opnsense_api_key: "{{ lookup('file', '/etc/privatebox-opnsense-api-key', errors='ignore') | default('') }}"
    opnsense_api_secret: "{{ lookup('file', '/etc/privatebox-opnsense-api-secret', errors='ignore') | default('') }}"
    
    # LAN Configuration
    lan_interface_name: "{{ lan_interface | default('vtnet1') }}"
    lan_ip_address: "{{ opnsense_lan_ip | default('192.168.2.1') }}"
    lan_subnet_mask: "{{ opnsense_lan_subnet | default('24') }}"
    lan_network: "{{ opnsense_lan_network | default('192.168.2.0/24') }}"
    
    # WAN Configuration
    wan_interface_name: "{{ wan_interface | default('vtnet0') }}"
    wan_type: "{{ opnsense_wan_type | default('dhcp') }}"
    wan_ip_address: "{{ opnsense_wan_static_ip | default('') }}"
    wan_subnet_mask: "{{ opnsense_wan_subnet | default('24') }}"
    wan_gateway: "{{ opnsense_wan_gateway | default('') }}"
    
    # Firewall defaults
    firewall_default_lan_to_wan: "allow"
    firewall_default_wan_to_lan: "block"
    firewall_log_default_block: true

  tasks:
    - name: Display service information
      debug:
        msg:
          - "{{ service_name }}"
          - "{{ service_description }}"
          - "Target: {{ opnsense_host }}"
          - "LAN: {{ lan_ip_address }}/{{ lan_subnet_mask }} on {{ lan_interface_name }}"
          - "WAN: {{ wan_type }} on {{ wan_interface_name }}"

    - name: Check for API credentials
      fail:
        msg: "OPNsense API credentials not found. Please run deploy-opnsense.yml first."
      when: opnsense_api_key == '' or opnsense_api_secret == ''

    - name: Configure LAN interface
      ansibleguy.opnsense.interface:
        target: "{{ opnsense_host }}"
        api_key: "{{ opnsense_api_key }}"
        api_secret: "{{ opnsense_api_secret }}"
        ssl_verify: false
        interface: "{{ lan_interface_name }}"
        enabled: true
        description: "LAN"
        ipv4_type: "static"
        ipv4_address: "{{ lan_ip_address }}"
        ipv4_subnet: "{{ lan_subnet_mask | int }}"
        apply: true
      register: lan_config

    - name: Configure WAN interface for DHCP
      ansibleguy.opnsense.interface:
        target: "{{ opnsense_host }}"
        api_key: "{{ opnsense_api_key }}"
        api_secret: "{{ opnsense_api_secret }}"
        ssl_verify: false
        interface: "{{ wan_interface_name }}"
        enabled: true
        description: "WAN"
        ipv4_type: "{{ wan_type }}"
        ipv4_address: "{{ wan_ip_address if wan_type == 'static' else omit }}"
        ipv4_subnet: "{{ wan_subnet_mask | int if wan_type == 'static' else omit }}"
        ipv4_gateway: "{{ wan_gateway if wan_type == 'static' else omit }}"
        apply: true
      register: wan_config

    - name: Create firewall rule - Allow LAN to WAN
      ansibleguy.opnsense.rule:
        target: "{{ opnsense_host }}"
        api_key: "{{ opnsense_api_key }}"
        api_secret: "{{ opnsense_api_secret }}"
        ssl_verify: false
        description: "Allow LAN to WAN traffic"
        interface: "lan"
        direction: "in"
        action: "pass"
        source: "lan"
        destination: "any"
        protocol: "any"
        log: false
        enabled: true
        apply: true
      register: lan_to_wan_rule

    - name: Create firewall rule - Block WAN to LAN (default)
      ansibleguy.opnsense.rule:
        target: "{{ opnsense_host }}"
        api_key: "{{ opnsense_api_key }}"
        api_secret: "{{ opnsense_api_secret }}"
        ssl_verify: false
        description: "Block WAN to LAN traffic (default)"
        interface: "wan"
        direction: "in"
        action: "block"
        source: "any"
        destination: "lan"
        protocol: "any"
        log: "{{ firewall_log_default_block }}"
        enabled: true
        apply: true
      register: wan_to_lan_rule

    - name: Create firewall rule - Allow established connections
      ansibleguy.opnsense.rule:
        target: "{{ opnsense_host }}"
        api_key: "{{ opnsense_api_key }}"
        api_secret: "{{ opnsense_api_secret }}"
        ssl_verify: false
        description: "Allow established/related connections"
        interface: "wan"
        direction: "in"
        action: "pass"
        source: "any"
        destination: "any"
        protocol: "any"
        state: "established,related"
        log: false
        enabled: true
        apply: true
      register: established_rule

    - name: Apply firewall changes
      ansibleguy.opnsense.reload:
        target: "{{ opnsense_host }}"
        api_key: "{{ opnsense_api_key }}"
        api_secret: "{{ opnsense_api_secret }}"
        ssl_verify: false
        service: "filter"

    - name: Display configuration results
      debug:
        msg:
          - "LAN Interface: {{ 'Configured' if lan_config.changed else 'Already configured' }}"
          - "WAN Interface: {{ 'Configured' if wan_config.changed else 'Already configured' }}"
          - "Firewall Rules: {{ (lan_to_wan_rule.changed or wan_to_lan_rule.changed or established_rule.changed) | ternary('Updated', 'No changes') }}"
          - ""
          - "Network configuration complete!"
          - "LAN: {{ lan_ip_address }}/{{ lan_subnet_mask }}"
          - "WAN: {{ wan_type | upper }}"
          - "Access OPNsense at: https://{{ lan_ip_address }}"