---
# Install and Configure Caddy on Alpine Linux VM
# This playbook installs Caddy reverse proxy directly on Alpine Linux
# and configures it to proxy PrivateBox services with HTTPS
#
# Usage:
#   ansible-playbook -i inventories/development/hosts.yml caddy-alpine-install.yml
#
# Semaphore Template Configuration:
#   This playbook is designed for Semaphore UI integration
#   Uses the alpine-vm inventory created during VM deployment

- name: "Caddy: Install and Configure on Alpine Linux"
  hosts: alpine-vm
  become: true
  gather_facts: true
  
  vars:
    service_name: "Caddy Reverse Proxy"
    service_description: "Fast and automatic HTTPS reverse proxy for PrivateBox services"
    service_tag: "caddy"
    
    # Template configuration for Semaphore
    template_config:
      semaphore_template_name: "Caddy: Install on Alpine VM"
      semaphore_template_desc: "Install and configure Caddy reverse proxy on Alpine VM"
      semaphore_inventory: "alpine-vm"
      semaphore_environment: "Default"
    
    # Caddy configuration
    caddy_version: "2.8.4"
    caddy_config_dir: "/etc/caddy"
    caddy_data_dir: "/var/lib/caddy"
    caddy_log_dir: "/var/log/caddy"
    
    # Service endpoints to proxy (Ubuntu VM)
    backend_host: "192.168.1.20"
    
    # Default values for hands-off deployment
    confirm_deploy: true
    
  # Note: vars_prompt is not used in Semaphore execution
  # The playbook runs with confirm_deploy: true by default

  tasks:
    # Pre-deployment validation
    - name: "{{ service_name }} - Pre-deployment checks"
      when: confirm_deploy | bool
      tags: [caddy, preflight]
      block:
        - name: Check system requirements
          assert:
            that:
              - ansible_distribution == "Alpine"
              - ansible_distribution_version is version('3.18', '>=')
            fail_msg: "This playbook requires Alpine Linux 3.18 or later"
            
        - name: Update package index
          apk:
            update_cache: yes
            cache_valid_time: 3600

    # Caddy installation
    - name: "{{ service_name }} - Install Caddy"
      when: confirm_deploy | bool
      tags: [caddy, install]
      block:
        - name: Install Caddy and dependencies
          apk:
            name:
              - caddy
              - curl
              - ca-certificates
            state: present
            
        - name: Create Caddy directories
          file:
            path: "{{ item }}"
            state: directory
            owner: caddy
            group: caddy
            mode: '0755'
          loop:
            - "{{ caddy_config_dir }}"
            - "{{ caddy_data_dir }}"
            - "{{ caddy_log_dir }}"
            - "{{ caddy_config_dir }}/conf.d"
            
        - name: Set up certificate storage directory
          file:
            path: "{{ caddy_data_dir }}/certificates"
            state: directory
            owner: caddy
            group: caddy
            mode: '0700'

    # Deploy configuration
    - name: "{{ service_name }} - Configure Caddy"
      when: confirm_deploy | bool
      tags: [caddy, configure]
      block:
        - name: Check if services registry exists
          delegate_to: localhost
          stat:
            path: "{{ playbook_dir }}/../../group_vars/all/services.yml"
          register: services_file
          
        - name: Load services configuration
          when: services_file.stat.exists
          include_vars:
            file: "{{ playbook_dir }}/../../group_vars/all/services.yml"
            
        - name: Set default services if not defined
          when: not services_file.stat.exists or privatebox_services is not defined
          set_fact:
            privatebox_services:
              - name: adguard
                backend_host: "{{ backend_host }}"
                backend_port: 8080
                domain: adguard.lan
                description: "AdGuard Home - DNS-level ad blocking"
              - name: semaphore
                backend_host: "{{ backend_host }}"
                backend_port: 3000
                domain: semaphore.lan
                description: "Semaphore - Ansible UI"
              - name: portainer
                backend_host: "{{ backend_host }}"
                backend_port: 9000
                domain: portainer.lan
                description: "Portainer - Container Management"
                
        - name: Deploy Caddyfile
          template:
            src: ../../files/caddy/Caddyfile.j2
            dest: "{{ caddy_config_dir }}/Caddyfile"
            owner: caddy
            group: caddy
            mode: '0644'
            backup: yes
          register: caddyfile_deployed
          
        - name: Validate Caddyfile syntax
          command: caddy validate --config {{ caddy_config_dir }}/Caddyfile
          changed_when: false
          
        - name: Enable Caddy service
          service:
            name: caddy
            enabled: yes
            
        - name: Start/reload Caddy service
          service:
            name: caddy
            state: "{{ 'reloaded' if caddyfile_deployed.changed else 'started' }}"
          register: service_status

    # Configure firewall
    - name: "{{ service_name }} - Configure firewall"
      when: confirm_deploy | bool
      tags: [caddy, firewall]
      block:
        - name: Check if iptables is available
          command: which iptables
          register: iptables_check
          changed_when: false
          failed_when: false
          
        - name: Configure firewall rules
          when: iptables_check.rc == 0
          block:
            - name: Allow HTTP traffic
              iptables:
                chain: INPUT
                protocol: tcp
                destination_port: 80
                jump: ACCEPT
                comment: "Caddy HTTP"
                
            - name: Allow HTTPS traffic
              iptables:
                chain: INPUT
                protocol: tcp
                destination_port: 443
                jump: ACCEPT
                comment: "Caddy HTTPS"
                
            - name: Save iptables rules
              shell: |
                rc-service iptables save
                rc-update add iptables default
              args:
                creates: /etc/iptables/rules-save

    # Post-deployment validation
    - name: "{{ service_name }} - Post-deployment validation"
      when: confirm_deploy | bool
      tags: [caddy, validate]
      block:
        - name: Check Caddy service status
          service:
            name: caddy
          register: caddy_status
          
        - name: Verify Caddy is listening on ports
          wait_for:
            port: "{{ item }}"
            host: 0.0.0.0
            timeout: 30
          loop:
            - 80
            - 443
            
        - name: Test Caddy health endpoint
          uri:
            url: "http://localhost/health"
            status_code: 200
            timeout: 10
          register: health_check
          
        - name: Get Caddy version
          command: caddy version
          register: caddy_version_output
          changed_when: false

    # Display summary
    - name: "{{ service_name }} - Display summary"
      when: confirm_deploy | bool
      tags: [caddy, summary]
      block:
        - name: Display deployment summary
          debug:
            msg:
              - "========================================"
              - "Caddy Deployed Successfully!"
              - "========================================"
              - ""
              - "Version: {{ caddy_version_output.stdout }}"
              - "Configuration: {{ caddy_config_dir }}/Caddyfile"
              - "Data directory: {{ caddy_data_dir }}"
              - "Log directory: {{ caddy_log_dir }}"
              - ""
              - "Service Status: {{ 'Running' if caddy_status.status.ActiveState == 'active' else 'Not Running' }}"
              - ""
              - "Configured Services:"
              - "{% for service in privatebox_services %}"
              - "  - https://{{ service.domain }} â†’ {{ service.backend_host | default(backend_host) }}:{{ service.backend_port }}"
              - "{% endfor %}"
              - ""
              - "Notes:"
              - "  - Internal .lan domains use self-signed certificates"
              - "  - Public domains will get Let's Encrypt certificates"
              - "  - Remember to configure DNS entries for your domains"
              - "========================================"