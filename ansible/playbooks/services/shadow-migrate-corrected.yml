---
# Shadow Clone Migration for VM 9000 - CORRECTED VERSION
# Safely migrates management VM from vmbr0 to vmbr1 VLAN 20
# NO NAT, NO firewall changes, proper VM stopping before network changes

- name: Shadow Clone Migration - Corrected
  hosts: proxmox
  gather_facts: no
  vars:
    source_vm: 9000
    clone_vm: 9001
    current_ip: "192.168.1.100"
    new_ip: "10.10.20.20"
    new_gateway: "10.10.20.1"
    vlan_tag: 20
    opnsense_ip: "192.168.1.187"
    
  tasks:
    # ============================================
    # PHASE 1: Pre-flight Checks
    # ============================================
    - name: Verify source VM is running
      command: qm status {{ source_vm }}
      register: vm_status
      changed_when: false
      failed_when: "'running' not in vm_status.stdout"
      
    - name: Check if clone already exists
      command: qm status {{ clone_vm }}
      register: clone_check
      failed_when: false
      changed_when: false
      
    - name: Fail if clone already exists
      fail:
        msg: "Clone VM {{ clone_vm }} already exists. Remove it first: qm destroy {{ clone_vm }} --purge"
      when: clone_check.rc == 0
      
    # ============================================
    # PHASE 2: Clone the Running VM
    # ============================================
    - name: Clone running VM {{ source_vm }} to {{ clone_vm }}
      command: |
        qm clone {{ source_vm }} {{ clone_vm }} \
        --name privatebox-vlan20-test \
        --full 1
      register: clone_result
      
    - name: Wait for cloning to complete
      shell: |
        while qm status {{ clone_vm }} 2>&1 | grep -q "lock"; do
          echo "Waiting for clone to complete..."
          sleep 5
        done
      register: clone_wait
      changed_when: false
      
    - name: Verify clone is stopped
      command: qm status {{ clone_vm }}
      register: clone_status
      failed_when: "'stopped' not in clone_status.stdout"
      changed_when: false
      
    # ============================================
    # PHASE 3: Modify Clone Network (VM STOPPED)
    # ============================================
    - name: Generate new MAC address for clone
      set_fact:
        new_mac: "BC:24:11:{{ '%02X' | format(range(0, 256) | random) }}:{{ '%02X' | format(range(0, 256) | random) }}:{{ '%02X' | format(range(0, 256) | random) }}"
        
    - name: Update clone network to VLAN {{ vlan_tag }} (VM is stopped)
      command: |
        qm set {{ clone_vm }} \
        --net0 "virtio={{ new_mac }},bridge=vmbr1,tag={{ vlan_tag }}"
      register: network_update
      
    - name: Update cloud-init network config if present
      command: |
        qm set {{ clone_vm }} \
        --ipconfig0 "ip={{ new_ip }}/24,gw={{ new_gateway }}"
      register: cloudinit_update
      failed_when: false  # Not all VMs have cloud-init
      
    - name: Create network fix script for manual run inside VM
      copy:
        dest: /tmp/fix_network_{{ clone_vm }}.sh
        mode: '0755'
        content: |
          #!/bin/bash
          # Network reconfiguration script for inside the clone VM
          # Run this manually inside the VM if network doesn't auto-configure
          
          echo "Configuring network for {{ new_ip }}..."
          
          # Debian/Ubuntu with /etc/network/interfaces
          if [ -f /etc/network/interfaces ]; then
            cat > /etc/network/interfaces <<EOF
          auto lo
          iface lo inet loopback
          
          auto eth0
          iface eth0 inet static
            address {{ new_ip }}
            netmask 255.255.255.0
            gateway {{ new_gateway }}
            dns-nameservers {{ new_gateway }} 8.8.8.8
          EOF
            echo "Updated /etc/network/interfaces"
            systemctl restart networking || (ifdown eth0; ifup eth0)
          fi
          
          # Ubuntu with netplan
          if [ -d /etc/netplan ]; then
            cat > /etc/netplan/50-cloud-init.yaml <<EOF
          network:
            version: 2
            ethernets:
              eth0:
                addresses: [{{ new_ip }}/24]
                gateway4: {{ new_gateway }}
                nameservers:
                  addresses: [{{ new_gateway }}, 8.8.8.8]
          EOF
            echo "Updated netplan configuration"
            netplan apply
          fi
          
          # Update hosts file
          sed -i "s/{{ current_ip }}/{{ new_ip }}/g" /etc/hosts
          
          # Update Semaphore/Portainer configs if they exist
          for service in semaphore portainer; do
            if [ -f /etc/$service/config.env ]; then
              sed -i "s/{{ current_ip }}/{{ new_ip }}/g" /etc/$service/config.env
              systemctl restart $service 2>/dev/null || true
            fi
          done
          
          echo "Network configuration complete!"
          echo "New IP: {{ new_ip }}"
          ip addr show eth0
          
    # ============================================
    # PHASE 4: Start Clone VM
    # ============================================
    - name: Start the clone VM
      command: qm start {{ clone_vm }}
      register: start_result
      
    - name: Wait for VM to boot
      pause:
        seconds: 45
        prompt: "Waiting for clone VM to boot..."
        
    # ============================================
    # PHASE 5: Test Connectivity via OPNsense
    # ============================================
    - name: Test clone connectivity from OPNsense
      shell: |
        sshpass -p 'opnsense' ssh -o StrictHostKeyChecking=no root@{{ opnsense_ip }} <<'EOF'
        echo "Testing connectivity to {{ new_ip }} from OPNsense..."
        
        # Test ping
        if ping -c 3 {{ new_ip }}; then
          echo "✓ Ping successful"
        else
          echo "✗ Ping failed"
        fi
        
        # Test SSH port
        if nc -z -w5 {{ new_ip }} 22; then
          echo "✓ SSH port 22 is open"
        else
          echo "✗ SSH port 22 is closed"
        fi
        
        # Test Semaphore port
        if nc -z -w5 {{ new_ip }} 3000; then
          echo "✓ Semaphore port 3000 is open"
        else
          echo "✗ Semaphore port 3000 is closed"
        fi
        
        # Test HTTP connectivity to Semaphore
        if curl -s -o /dev/null -w "%{http_code}" -m 5 http://{{ new_ip }}:3000 | grep -q "200\|302"; then
          echo "✓ Semaphore web UI is responding"
        else
          echo "✗ Semaphore web UI is not responding"
        fi
        EOF
      register: connectivity_test
      
    - name: Display connectivity test results
      debug:
        msg: "{{ connectivity_test.stdout_lines }}"
        
    # ============================================
    # PHASE 6: Advanced Testing from OPNsense
    # ============================================
    - name: Try to SSH into clone from OPNsense
      shell: |
        sshpass -p 'opnsense' ssh -o StrictHostKeyChecking=no root@{{ opnsense_ip }} <<'EOF'
        echo "Attempting SSH to clone VM..."
        ssh -o StrictHostKeyChecking=no -o ConnectTimeout=10 \
            -o PasswordAuthentication=no \
            root@{{ new_ip }} "hostname && ip addr show eth0 | grep inet" || \
        echo "SSH key auth failed (expected if keys not set up)"
        EOF
      register: ssh_test
      failed_when: false
      
    # ============================================
    # PHASE 7: Summary and Manual Steps
    # ============================================
    - name: Create completion script
      copy:
        dest: /tmp/complete_migration_{{ source_vm }}.sh
        mode: '0755'
        content: |
          #!/bin/bash
          # Script to complete the migration
          
          echo "This script will complete the migration of VM {{ source_vm }}"
          echo "Current state:"
          echo "  - Original VM {{ source_vm }} at {{ current_ip }} (running)"
          echo "  - Clone VM {{ clone_vm }} at {{ new_ip }} (running)"
          echo ""
          read -p "Complete migration? (yes/no): " confirm
          
          if [ "$confirm" = "yes" ]; then
            echo "Stopping original VM..."
            qm stop {{ source_vm }}
            
            echo "Renaming VMs..."
            qm set {{ source_vm }} --name privatebox-old-backup
            qm set {{ clone_vm }} --name privatebox-management
            
            echo "Setting clone to auto-start..."
            qm set {{ clone_vm }} --onboot 1
            qm set {{ source_vm }} --onboot 0
            
            echo "Migration complete!"
            echo "New management VM: {{ clone_vm }} at {{ new_ip }}"
          else
            echo "Migration not completed. Run this script again when ready."
          fi
          
    - name: Create rollback script
      copy:
        dest: /tmp/rollback_migration_{{ source_vm }}.sh
        mode: '0755'
        content: |
          #!/bin/bash
          # Script to rollback the migration
          
          echo "This will rollback the migration and delete clone VM {{ clone_vm }}"
          read -p "Are you sure? (yes/no): " confirm
          
          if [ "$confirm" = "yes" ]; then
            echo "Stopping clone VM..."
            qm stop {{ clone_vm }} 2>/dev/null || true
            
            echo "Destroying clone VM..."
            qm destroy {{ clone_vm }} --purge
            
            echo "Rollback complete!"
            echo "Original VM {{ source_vm }} continues running at {{ current_ip }}"
          else
            echo "Rollback cancelled"
          fi
          
    - name: Migration Test Summary
      debug:
        msg:
          - "========================================="
          - "SHADOW CLONE MIGRATION TEST RESULTS"
          - "========================================="
          - "Status: Clone VM {{ clone_vm }} is running"
          - "Network: VLAN {{ vlan_tag }} ({{ new_ip }})"
          - ""
          - "CONNECTIVITY TESTS:"
          - "  Check results above for ping/port tests"
          - ""
          - "TESTING FROM YOUR WORKSTATION:"
          - "  1. SSH to OPNsense: ssh root@{{ opnsense_ip }}"
          - "  2. From OPNsense, test clone:"
          - "     - ping {{ new_ip }}"
          - "     - curl http://{{ new_ip }}:3000"
          - "     - ssh root@{{ new_ip }}"
          - ""
          - "TO COMPLETE MIGRATION:"
          - "  Run: /tmp/complete_migration_{{ source_vm }}.sh"
          - ""
          - "TO ROLLBACK:"
          - "  Run: /tmp/rollback_migration_{{ source_vm }}.sh"
          - ""
          - "MANUAL FIX (if network didn't configure):"
          - "  1. Access VM console in Proxmox"
          - "  2. Run: /tmp/fix_network_{{ clone_vm }}.sh"
          - "========================================="
          
    - name: Save migration state
      copy:
        dest: /tmp/migration_state_{{ source_vm }}.yml
        content: |
          migration_timestamp: "{{ lookup('pipe', 'date +%Y-%m-%d_%H:%M:%S') }}"
          source_vm: {{ source_vm }}
          source_ip: {{ current_ip }}
          clone_vm: {{ clone_vm }}
          clone_ip: {{ new_ip }}
          vlan: {{ vlan_tag }}
          mac_address: {{ new_mac }}
          status: testing
          test_results: |
            {{ connectivity_test.stdout | default('No test results') }}