---
# Update DNS Blocklists Playbook
# Updates AdGuard Home blocklists and Unbound DNS configurations

- name: Update DNS Blocklists
  hosts: dns_hosts
  gather_facts: true
  become: true
  tags:
    - maintenance
    - dns
    - blocklists
  
  vars:
    blocklist_update_log: /var/log/privatebox/blocklist_updates.log
    adguard_api_url: "http://localhost:3000"
    backup_blocklists: true

  pre_tasks:
    - name: Create log directory
      ansible.builtin.file:
        path: "{{ blocklist_update_log | dirname }}"
        state: directory
        mode: '0755'
      tags:
        - logging

    - name: Log update start
      ansible.builtin.lineinfile:
        path: "{{ blocklist_update_log }}"
        line: "{{ ansible_date_time.iso8601 }} - Starting blocklist update on {{ inventory_hostname }}"
        create: true
      tags:
        - logging

    - name: Check DNS service status
      ansible.builtin.systemd:
        name: "{{ item }}"
      register: service_status
      failed_when: false
      loop:
        - AdGuardHome
        - unbound
      tags:
        - pre-check

  tasks:
    - name: Backup current AdGuard configuration
      ansible.builtin.copy:
        src: /opt/AdGuardHome/AdGuardHome.yaml
        dest: "/opt/AdGuardHome/AdGuardHome.yaml.backup.{{ ansible_date_time.epoch }}"
        remote_src: true
        backup: true
      when: 
        - backup_blocklists
        - "'AdGuardHome' in service_status.results | map(attribute='item') | list"
      tags:
        - backup
        - adguard

    - name: Update AdGuard Home blocklists
      ansible.builtin.uri:
        url: "{{ adguard_api_url }}/control/filtering/refresh"
        method: POST
        headers:
          Authorization: "Bearer {{ vault_adguard_api_token }}"
        body_format: json
        body:
          whitelist: false
      register: adguard_update
      when: adguard_enabled | default(true)
      tags:
        - adguard
        - update-lists

    - name: Get AdGuard blocklist status
      ansible.builtin.uri:
        url: "{{ adguard_api_url }}/control/filtering/status"
        method: GET
        headers:
          Authorization: "Bearer {{ vault_adguard_api_token }}"
      register: adguard_status
      when: adguard_enabled | default(true)
      tags:
        - adguard
        - status

    - name: Update Unbound root hints
      ansible.builtin.get_url:
        url: https://www.internic.net/domain/named.cache
        dest: /etc/unbound/root.hints
        mode: '0644'
        backup: true
      notify: restart unbound
      when: unbound_enabled | default(true)
      tags:
        - unbound
        - root-hints

    - name: Update Unbound blocklist configurations
      ansible.builtin.include_tasks: tasks/update_unbound_blocklists.yml
      when: unbound_enabled | default(true)
      tags:
        - unbound
        - blocklists

    - name: Validate DNS configuration
      ansible.builtin.command: unbound-checkconf
      register: unbound_check
      changed_when: false
      failed_when: unbound_check.rc != 0
      when: unbound_enabled | default(true)
      tags:
        - validation
        - unbound

    - name: Clear DNS cache
      ansible.builtin.command: "{{ item }}"
      loop:
        - unbound-control reload
        - unbound-control flush_zone .
      when: unbound_enabled | default(true)
      notify: restart unbound
      tags:
        - cache
        - unbound

  post_tasks:
    - name: Test DNS resolution with updated blocklists
      ansible.builtin.command: "dig @localhost {{ item }}"
      register: dns_tests
      changed_when: false
      failed_when: false
      loop:
        - google.com
        - doubleclick.net  # Should be blocked
        - example.com
      tags:
        - testing
        - validation

    - name: Analyze blocklist effectiveness
      ansible.builtin.include_tasks: tasks/analyze_blocklist_effectiveness.yml
      tags:
        - analysis
        - reporting

    - name: Generate blocklist update report
      ansible.builtin.template:
        src: templates/blocklist_update_report.j2
        dest: "/var/log/privatebox/blocklist_report_{{ ansible_date_time.epoch }}.txt"
      vars:
        adguard_result: "{{ adguard_status | default({}) }}"
        dns_test_results: "{{ dns_tests }}"
      tags:
        - reporting

    - name: Clean old backups
      ansible.builtin.find:
        paths: /opt/AdGuardHome
        patterns: "AdGuardHome.yaml.backup.*"
        age: "30d"
      register: old_backups
      tags:
        - cleanup

    - name: Remove old backup files
      ansible.builtin.file:
        path: "{{ item.path }}"
        state: absent
      loop: "{{ old_backups.files }}"
      when: old_backups.matched > 0
      tags:
        - cleanup

    - name: Log update completion
      ansible.builtin.lineinfile:
        path: "{{ blocklist_update_log }}"
        line: "{{ ansible_date_time.iso8601 }} - Completed blocklist update on {{ inventory_hostname }}"
      tags:
        - logging

  handlers:
    - name: restart unbound
      ansible.builtin.systemd:
        name: unbound
        state: restarted
      become: true

    - name: restart adguard
      ansible.builtin.systemd:
        name: AdGuardHome
        state: restarted
      become: true