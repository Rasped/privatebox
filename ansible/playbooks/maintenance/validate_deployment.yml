---
# Validate Deployment Playbook
# Comprehensive validation of all PrivateBox services and configurations

- name: Validate PrivateBox Deployment
  hosts: all
  gather_facts: true
  tags:
    - validation
    - maintenance
  
  vars:
    validation_report_dir: /var/log/privatebox/validation
    validation_tests_failed: []
    validation_tests_passed: []

  pre_tasks:
    - name: Create validation report directory
      ansible.builtin.file:
        path: "{{ validation_report_dir }}"
        state: directory
        mode: '0755'
      delegate_to: localhost
      run_once: true
      tags:
        - setup

    - name: Initialize validation report
      ansible.builtin.set_fact:
        validation_start_time: "{{ ansible_date_time.iso8601 }}"
        validation_results: {}
      tags:
        - setup

- name: Validate Proxmox Infrastructure
  hosts: proxmox_hosts
  gather_facts: false
  tags:
    - validation
    - proxmox
  
  tasks:
    - name: Check Proxmox cluster status
      ansible.builtin.command: pvecm status
      register: cluster_status
      changed_when: false
      failed_when: false
      tags:
        - cluster

    - name: Validate VM status
      ansible.builtin.shell: qm list | grep -E "running|stopped"
      register: vm_status
      changed_when: false
      tags:
        - vms

    - name: Check storage health
      ansible.builtin.command: pvesm status
      register: storage_status
      changed_when: false
      tags:
        - storage

    - name: Store Proxmox validation results
      ansible.builtin.set_fact:
        proxmox_validation:
          cluster_healthy: "{{ cluster_status.rc == 0 }}"
          vms_present: "{{ vm_status.stdout_lines | length > 0 }}"
          storage_healthy: "{{ 'active' in storage_status.stdout }}"
      tags:
        - results

- name: Validate Network Services
  hosts: network_services
  gather_facts: false
  tags:
    - validation
    - network
  
  tasks:
    - name: Validate OPNSense accessibility
      ansible.builtin.uri:
        url: "https://{{ ansible_default_ipv4.address }}"
        validate_certs: false
        status_code: [200, 301, 302]
      register: opnsense_web
      failed_when: false
      when: inventory_hostname in groups['opnsense_hosts']
      tags:
        - opnsense

    - name: Test DNS resolution
      ansible.builtin.command: "dig @{{ ansible_default_ipv4.address }} google.com +short"
      register: dns_test
      changed_when: false
      failed_when: dns_test.stdout == ""
      when: inventory_hostname in groups['dns_hosts']
      tags:
        - dns

    - name: Check AdGuard Home status
      ansible.builtin.uri:
        url: "http://{{ ansible_default_ipv4.address }}:3000/control/status"
        status_code: 200
      register: adguard_status
      failed_when: false
      when: 
        - inventory_hostname in groups['dns_hosts']
        - adguard_enabled | default(true)
      tags:
        - adguard

    - name: Verify firewall rules
      ansible.builtin.iptables:
        chain: INPUT
        jump: ACCEPT
        protocol: tcp
        destination_port: 22
        state: present
        action: check
      register: ssh_rule
      become: true
      failed_when: false
      when: inventory_hostname in groups['opnsense_hosts']
      tags:
        - firewall

    - name: Store network validation results
      ansible.builtin.set_fact:
        network_validation:
          opnsense_accessible: "{{ opnsense_web.status | default(0) in [200, 301, 302] }}"
          dns_functional: "{{ dns_test.rc | default(1) == 0 }}"
          adguard_running: "{{ adguard_status.status | default(0) == 200 }}"
          firewall_configured: "{{ ssh_rule is defined and not ssh_rule.failed | default(true) }}"
      tags:
        - results

- name: Validate Management Services
  hosts: management_hosts
  gather_facts: false
  tags:
    - validation
    - management
  
  tasks:
    - name: Check Portainer status
      ansible.builtin.uri:
        url: "https://{{ ansible_default_ipv4.address }}:9443/api/system/status"
        validate_certs: false
        status_code: 200
      register: portainer_check
      failed_when: false
      when: portainer_enabled | default(true)
      tags:
        - portainer

    - name: Check Semaphore status
      ansible.builtin.uri:
        url: "http://{{ ansible_default_ipv4.address }}:3000/api/ping"
        status_code: 200
      register: semaphore_check
      failed_when: false
      when: semaphore_enabled | default(true)
      tags:
        - semaphore

    - name: Verify Docker daemon
      ansible.builtin.command: docker ps
      register: docker_check
      changed_when: false
      failed_when: false
      tags:
        - docker

    - name: Store management validation results
      ansible.builtin.set_fact:
        management_validation:
          portainer_running: "{{ portainer_check.status | default(0) == 200 }}"
          semaphore_running: "{{ semaphore_check.status | default(0) == 200 }}"
          docker_functional: "{{ docker_check.rc | default(1) == 0 }}"
      tags:
        - results

- name: Compile Validation Report
  hosts: localhost
  gather_facts: false
  tags:
    - validation
    - reporting
  
  tasks:
    - name: Gather all validation results
      ansible.builtin.set_fact:
        all_validation_results:
          proxmox: "{{ hostvars[groups['proxmox_hosts'][0]]['proxmox_validation'] | default({}) }}"
          network: "{{ hostvars[groups['network_services'][0]]['network_validation'] | default({}) }}"
          management: "{{ hostvars[groups['management_hosts'][0]]['management_validation'] | default({}) }}"
      when: 
        - groups['proxmox_hosts'] is defined
        - groups['network_services'] is defined
        - groups['management_hosts'] is defined

    - name: Calculate validation summary
      ansible.builtin.set_fact:
        validation_summary:
          total_checks: "{{ all_validation_results | dict2items | map(attribute='value') | map('dict2items') | flatten | length }}"
          passed_checks: "{{ all_validation_results | dict2items | map(attribute='value') | map('dict2items') | flatten | selectattr('value', 'equalto', true) | list | length }}"
          failed_checks: "{{ all_validation_results | dict2items | map(attribute='value') | map('dict2items') | flatten | selectattr('value', 'equalto', false) | list | length }}"
          validation_time: "{{ ansible_date_time.iso8601 }}"

    - name: Generate comprehensive validation report
      ansible.builtin.template:
        src: templates/validation_report.j2
        dest: "{{ validation_report_dir }}/validation_report_{{ ansible_date_time.epoch }}.html"
      vars:
        results: "{{ all_validation_results }}"
        summary: "{{ validation_summary }}"

    - name: Generate summary for console
      ansible.builtin.debug:
        msg: |
          ========================================
          PrivateBox Deployment Validation Summary
          ========================================
          Total Checks: {{ validation_summary.total_checks }}
          Passed: {{ validation_summary.passed_checks }}
          Failed: {{ validation_summary.failed_checks }}
          Success Rate: {{ ((validation_summary.passed_checks / validation_summary.total_checks) * 100) | round(2) }}%
          ========================================

    - name: Fail if critical validations failed
      ansible.builtin.fail:
        msg: "Critical validation failures detected. Please review the validation report."
      when: 
        - validation_summary.failed_checks > 0
        - fail_on_validation_errors | default(false)