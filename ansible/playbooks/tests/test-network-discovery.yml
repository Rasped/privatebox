---
# Test Suite: Network Discovery (Task 2.1)
# Tests dynamic environment discovery functionality

- name: Test Network Discovery Components
  hosts: localhost
  gather_facts: yes
  vars:
    test_results: []
    test_start_time: "{{ ansible_date_time.iso8601 }}"
  
  tasks:
    # Test 1: Basic Facts Gathering
    - name: Test 1.1 - Verify ansible_facts availability
      set_fact:
        test_results: "{{ test_results + [{'test': 'ansible_facts_available', 'status': 'pass' if ansible_facts is defined else 'fail', 'details': 'ansible_facts collection status'}] }}"
    
    - name: Test 1.2 - Check required network facts
      set_fact:
        test_results: "{{ test_results + [{'test': 'network_facts_complete', 'status': status, 'details': details}] }}"
      vars:
        status: "{{ 'pass' if (ansible_default_ipv4 is defined and ansible_interfaces is defined and ansible_hostname is defined) else 'fail' }}"
        details: "Default IPv4: {{ ansible_default_ipv4.address | default('not found') }}, Interfaces: {{ ansible_interfaces | length | default(0) }}"
    
    # Test 2: Proxmox API Connectivity
    - name: Test 2.1 - Check Proxmox host reachability
      uri:
        url: "https://{{ proxmox_host | default('192.168.1.250') }}:8006"
        validate_certs: no
        timeout: 5
      register: proxmox_check
      ignore_errors: yes
    
    - name: Test 2.2 - Record Proxmox connectivity result
      set_fact:
        test_results: "{{ test_results + [{'test': 'proxmox_reachable', 'status': status, 'details': details}] }}"
      vars:
        status: "{{ 'pass' if proxmox_check.status is defined and proxmox_check.status == 200 else 'fail' }}"
        details: "HTTP Status: {{ proxmox_check.status | default('unreachable') }}, Error: {{ proxmox_check.msg | default('none') }}"
    
    # Test 3: SSH Key Detection
    - name: Test 3.1 - Check for SSH keys
      stat:
        path: "{{ item }}"
      register: ssh_key_checks
      loop:
        - /home/{{ ansible_user }}/.ssh/id_rsa
        - /home/{{ ansible_user }}/.ssh/id_ed25519
        - /root/.ssh/id_rsa
        - /root/.ssh/id_ed25519
    
    - name: Test 3.2 - Evaluate SSH key availability
      set_fact:
        test_results: "{{ test_results + [{'test': 'ssh_keys_available', 'status': status, 'details': details}] }}"
      vars:
        available_keys: "{{ ssh_key_checks.results | selectattr('stat.exists', 'equalto', true) | map(attribute='item') | list }}"
        status: "{{ 'pass' if available_keys | length > 0 else 'fail' }}"
        details: "Found keys: {{ available_keys | join(', ') | default('none') }}"
    
    # Test 4: Network Interface Discovery
    - name: Test 4.1 - Analyze network interfaces
      set_fact:
        physical_interfaces: "{{ ansible_interfaces | select('match', '^(eth|eno|ens|enp)') | list }}"
        bridge_interfaces: "{{ ansible_interfaces | select('match', '^(vmbr|br)') | list }}"
        vlan_interfaces: "{{ ansible_interfaces | select('match', '\\.[0-9]+$') | list }}"
    
    - name: Test 4.2 - Record interface discovery results
      set_fact:
        test_results: "{{ test_results + [{'test': 'interface_discovery', 'status': 'pass', 'details': details}] }}"
      vars:
        details: "Physical: {{ physical_interfaces | length }}, Bridges: {{ bridge_interfaces | length }}, VLANs: {{ vlan_interfaces | length }}"
    
    # Test 5: IP Address Allocation Discovery
    - name: Test 5.1 - Discover used IP addresses
      set_fact:
        discovered_ips: []
    
    - name: Test 5.2 - Collect IPs from all interfaces
      set_fact:
        discovered_ips: "{{ discovered_ips + [hostvars[inventory_hostname]['ansible_' + item].ipv4.address] }}"
      when:
        - hostvars[inventory_hostname]['ansible_' + item] is defined
        - hostvars[inventory_hostname]['ansible_' + item].ipv4 is defined
        - hostvars[inventory_hostname]['ansible_' + item].ipv4.address is defined
      loop: "{{ ansible_interfaces }}"
      ignore_errors: yes
    
    - name: Test 5.3 - Record IP discovery results
      set_fact:
        test_results: "{{ test_results + [{'test': 'ip_discovery', 'status': 'pass', 'details': details}] }}"
      vars:
        details: "Discovered {{ discovered_ips | length }} IP addresses"
    
    # Test 6: VLAN Detection
    - name: Test 6.1 - Parse VLAN information
      set_fact:
        vlan_info: []
    
    - name: Test 6.2 - Extract VLAN IDs from interfaces
      set_fact:
        vlan_info: "{{ vlan_info + [{'interface': item, 'vlan_id': item.split('.')[-1]}] }}"
      when: "'.' in item"
      loop: "{{ ansible_interfaces }}"
    
    - name: Test 6.3 - Record VLAN detection results
      set_fact:
        test_results: "{{ test_results + [{'test': 'vlan_detection', 'status': status, 'details': details}] }}"
      vars:
        status: "{{ 'info' }}"
        details: "Found {{ vlan_info | length }} VLAN interfaces"
    
    # Test 7: Storage Discovery
    - name: Test 7.1 - Check available storage
      set_fact:
        storage_info: "{{ ansible_mounts | selectattr('mount', 'in', ['/var/lib/vz', '/', '/mnt']) | list }}"
    
    - name: Test 7.2 - Record storage discovery results
      set_fact:
        test_results: "{{ test_results + [{'test': 'storage_discovery', 'status': 'pass', 'details': details}] }}"
      vars:
        details: "Found {{ storage_info | length }} relevant mount points"
    
    # Test 8: Environment Type Detection
    - name: Test 8.1 - Detect environment type
      set_fact:
        environment_type: >-
          {%- if ansible_virtualization_role == 'host' and ansible_virtualization_type == 'kvm' -%}
            proxmox-host
          {%- elif ansible_virtualization_role == 'guest' -%}
            vm-guest
          {%- elif ansible_system == 'Linux' and ansible_os_family == 'Debian' -%}
            debian-system
          {%- else -%}
            unknown
          {%- endif -%}
    
    - name: Test 8.2 - Record environment detection
      set_fact:
        test_results: "{{ test_results + [{'test': 'environment_detection', 'status': 'pass', 'details': 'Type: ' + environment_type}] }}"
    
    # Test 9: Negative Test - Invalid Discovery
    - name: Test 9.1 - Test discovery with invalid parameters
      uri:
        url: "https://invalid.host.local:8006"
        validate_certs: no
        timeout: 2
      register: negative_test
      ignore_errors: yes
    
    - name: Test 9.2 - Verify negative test fails appropriately
      set_fact:
        test_results: "{{ test_results + [{'test': 'negative_test_invalid_host', 'status': status, 'details': 'Correctly failed on invalid host'}] }}"
      vars:
        status: "{{ 'pass' if negative_test.failed else 'fail' }}"
    
    # Generate Test Report
    - name: Generate test summary
      set_fact:
        test_summary:
          total_tests: "{{ test_results | length }}"
          passed: "{{ test_results | selectattr('status', 'equalto', 'pass') | list | length }}"
          failed: "{{ test_results | selectattr('status', 'equalto', 'fail') | list | length }}"
          info: "{{ test_results | selectattr('status', 'equalto', 'info') | list | length }}"
          start_time: "{{ test_start_time }}"
          end_time: "{{ ansible_date_time.iso8601 }}"
    
    - name: Display test results
      debug:
        msg: |
          Network Discovery Test Results
          ==============================
          Total Tests: {{ test_summary.total_tests }}
          Passed: {{ test_summary.passed }}
          Failed: {{ test_summary.failed }}
          Info: {{ test_summary.info }}
          
          Detailed Results:
          {% for result in test_results %}
          - {{ result.test }}: {{ result.status | upper }}
            Details: {{ result.details }}
          {% endfor %}
    
    - name: Write test results to file
      copy:
        content: |
          Network Discovery Test Report
          Generated: {{ ansible_date_time.iso8601 }}
          
          Summary:
          --------
          Total Tests: {{ test_summary.total_tests }}
          Passed: {{ test_summary.passed }}
          Failed: {{ test_summary.failed }}
          Info: {{ test_summary.info }}
          
          Detailed Results:
          ----------------
          {% for result in test_results %}
          Test: {{ result.test }}
          Status: {{ result.status | upper }}
          Details: {{ result.details }}
          
          {% endfor %}
          
          System Information:
          ------------------
          Hostname: {{ ansible_hostname }}
          OS: {{ ansible_distribution }} {{ ansible_distribution_version }}
          Kernel: {{ ansible_kernel }}
          Python: {{ ansible_python_version }}
          
          Network Configuration:
          ---------------------
          Default Interface: {{ ansible_default_ipv4.interface | default('unknown') }}
          Default IP: {{ ansible_default_ipv4.address | default('unknown') }}
          Total Interfaces: {{ ansible_interfaces | length }}
        dest: /tmp/test-network-discovery-{{ ansible_date_time.epoch }}.txt
    
    - name: Fail if critical tests failed
      fail:
        msg: "{{ test_summary.failed }} tests failed. Check detailed results above."
      when: test_summary.failed | int > 0