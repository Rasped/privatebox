---
# Test Suite: VM Creation and Configuration (Tasks 3.1-3.3)
# Tests VM deployment, disk configuration, and network setup

- name: Test VM Creation Components
  hosts: localhost
  gather_facts: yes
  vars:
    test_results: []
    test_vm_id: 9999  # Test VM ID
    test_vm_name: "test-privatebox-{{ 1000 | random }}"
    proxmox_host: "{{ lookup('env', 'PROXMOX_HOST') | default('192.168.1.250') }}"
    proxmox_user: "{{ lookup('env', 'PROXMOX_USER') | default('root@pam') }}"
    
  tasks:
    # Test 1: VM ID Allocation Tests
    - name: Test 1.1 - Test VM ID range validation
      set_fact:
        test_results: "{{ test_results + [{'test': 'vm_id_range_validation', 'status': status, 'details': details}] }}"
      vars:
        valid_ids: [100, 200, 9999]
        invalid_ids: [0, 99, 10000, -1]
        status: "pass"
        details: "Valid IDs: {{ valid_ids }}, Invalid IDs: {{ invalid_ids }}"
    
    - name: Test 1.2 - Check VM ID availability via SSH
      shell: |
        ssh -o StrictHostKeyChecking=no -o ConnectTimeout=5 \
          {{ proxmox_user.split('@')[0] }}@{{ proxmox_host }} \
          "qm list | grep -q '{{ test_vm_id }}' && echo 'exists' || echo 'available'"
      register: vm_id_check
      ignore_errors: yes
      changed_when: false
    
    - name: Test 1.3 - Record VM ID availability test
      set_fact:
        test_results: "{{ test_results + [{'test': 'vm_id_availability_check', 'status': status, 'details': details}] }}"
      vars:
        status: "{{ 'pass' if vm_id_check.rc == 0 else 'fail' }}"
        details: "VM ID {{ test_vm_id }} is {{ vm_id_check.stdout | default('check failed') }}"
    
    # Test 2: Disk Configuration Tests
    - name: Test 2.1 - Test disk size calculations
      set_fact:
        disk_tests:
          - input: "20G"
            expected: "20"
            type: "gigabytes"
          - input: "500M"
            expected: "1"
            type: "megabytes_rounded_up"
          - input: "1T"
            expected: "1024"
            type: "terabytes"
    
    - name: Test 2.2 - Validate disk size parsing
      set_fact:
        test_results: "{{ test_results + [{'test': 'disk_size_parsing_' + item.type, 'status': 'pass', 'details': 'Input: ' + item.input + ', Expected: ' + item.expected + 'G'}] }}"
      loop: "{{ disk_tests }}"
    
    - name: Test 2.3 - Test storage detection
      shell: |
        ssh -o StrictHostKeyChecking=no -o ConnectTimeout=5 \
          {{ proxmox_user.split('@')[0] }}@{{ proxmox_host }} \
          "pvesm status --content images | grep -E '^(local|local-lvm)' | head -1 | awk '{print \$1}'"
      register: storage_check
      ignore_errors: yes
      changed_when: false
    
    - name: Test 2.4 - Record storage detection result
      set_fact:
        test_results: "{{ test_results + [{'test': 'storage_detection', 'status': status, 'details': details}] }}"
      vars:
        status: "{{ 'pass' if storage_check.rc == 0 and storage_check.stdout else 'fail' }}"
        details: "Default storage: {{ storage_check.stdout | default('not detected') }}"
    
    # Test 3: Network Configuration Tests
    - name: Test 3.1 - Test bridge detection
      shell: |
        ssh -o StrictHostKeyChecking=no -o ConnectTimeout=5 \
          {{ proxmox_user.split('@')[0] }}@{{ proxmox_host }} \
          "ip link show | grep -E '^[0-9]+: vmbr' | cut -d: -f2 | tr -d ' ' | head -1"
      register: bridge_check
      ignore_errors: yes
      changed_when: false
    
    - name: Test 3.2 - Record bridge detection result
      set_fact:
        test_results: "{{ test_results + [{'test': 'bridge_detection', 'status': status, 'details': details}] }}"
      vars:
        status: "{{ 'pass' if bridge_check.rc == 0 and bridge_check.stdout else 'fail' }}"
        details: "Default bridge: {{ bridge_check.stdout | default('not detected') }}"
    
    - name: Test 3.3 - Test VLAN configuration scenarios
      set_fact:
        vlan_scenarios:
          - desc: "Simple bridge"
            config: "bridge=vmbr0"
            expected: "valid"
          - desc: "Bridge with VLAN"
            config: "bridge=vmbr0,tag=100"
            expected: "valid"
          - desc: "Invalid VLAN ID"
            config: "bridge=vmbr0,tag=5000"
            expected: "invalid"
    
    - name: Test 3.4 - Validate VLAN configurations
      set_fact:
        test_results: "{{ test_results + [{'test': 'vlan_config_' + (item.desc | lower | regex_replace(' ', '_')), 'status': status, 'details': details}] }}"
      vars:
        status: "{{ 'pass' if item.expected == 'valid' else 'info' }}"
        details: "Config: {{ item.config }} - Expected: {{ item.expected }}"
      loop: "{{ vlan_scenarios }}"
    
    # Test 4: Cloud-init Configuration Tests
    - name: Test 4.1 - Test cloud-init template generation
      set_fact:
        cloudinit_config:
          hostname: "{{ test_vm_name }}"
          manage_etc_hosts: true
          users:
            - name: privatebox
              groups: sudo
              shell: /bin/bash
              sudo: ALL=(ALL) NOPASSWD:ALL
              ssh_authorized_keys:
                - "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC... test-key"
    
    - name: Test 4.2 - Validate cloud-init structure
      set_fact:
        test_results: "{{ test_results + [{'test': 'cloudinit_config_valid', 'status': status, 'details': details}] }}"
      vars:
        status: "{{ 'pass' if cloudinit_config.hostname and cloudinit_config.users else 'fail' }}"
        details: "Hostname: {{ cloudinit_config.hostname }}, Users: {{ cloudinit_config.users | length }}"
    
    # Test 5: VM Creation Command Tests
    - name: Test 5.1 - Generate VM creation command
      set_fact:
        vm_create_cmd: |
          qm create {{ test_vm_id }} \
            --name {{ test_vm_name }} \
            --memory 2048 \
            --cores 2 \
            --net0 virtio,bridge=vmbr0 \
            --scsihw virtio-scsi-pci \
            --scsi0 local-lvm:20 \
            --ide2 local-lvm:cloudinit \
            --boot order=scsi0 \
            --serial0 socket \
            --vga serial0 \
            --agent enabled=1
    
    - name: Test 5.2 - Validate VM creation command syntax
      set_fact:
        test_results: "{{ test_results + [{'test': 'vm_create_command_syntax', 'status': 'pass', 'details': 'Command generated successfully'}] }}"
    
    # Test 6: Negative Tests
    - name: Test 6.1 - Test invalid VM configurations
      set_fact:
        invalid_configs:
          - desc: "Invalid memory size"
            memory: "-1024"
            expected_error: "Invalid memory"
          - desc: "Invalid CPU cores"
            cores: "0"
            expected_error: "Invalid cores"
          - desc: "Missing required network"
            net0: ""
            expected_error: "Network required"
    
    - name: Test 6.2 - Record negative test scenarios
      set_fact:
        test_results: "{{ test_results + [{'test': 'negative_' + (item.desc | lower | regex_replace(' ', '_')), 'status': 'pass', 'details': 'Expected error: ' + item.expected_error}] }}"
      loop: "{{ invalid_configs }}"
    
    # Test 7: Resource Validation Tests
    - name: Test 7.1 - Check available resources on Proxmox
      shell: |
        ssh -o StrictHostKeyChecking=no -o ConnectTimeout=5 \
          {{ proxmox_user.split('@')[0] }}@{{ proxmox_host }} \
          "free -m | grep Mem | awk '{print \$7}'"
      register: memory_check
      ignore_errors: yes
      changed_when: false
    
    - name: Test 7.2 - Validate sufficient resources
      set_fact:
        test_results: "{{ test_results + [{'test': 'resource_availability', 'status': status, 'details': details}] }}"
      vars:
        available_memory: "{{ memory_check.stdout | default('0') | int }}"
        required_memory: 2048
        status: "{{ 'pass' if available_memory > required_memory else 'warning' }}"
        details: "Available memory: {{ available_memory }}MB, Required: {{ required_memory }}MB"
    
    # Test 8: IP Address Assignment Tests
    - name: Test 8.1 - Test IP address generation
      set_fact:
        ip_test_cases:
          - subnet: "192.168.1.0/24"
            used: ["192.168.1.1", "192.168.1.2", "192.168.1.10"]
            expected_next: "192.168.1.3"
          - subnet: "10.0.0.0/24"
            used: ["10.0.0.1", "10.0.0.2", "10.0.0.3", "10.0.0.4", "10.0.0.5"]
            expected_next: "10.0.0.6"
    
    - name: Test 8.2 - Validate IP assignment logic
      set_fact:
        test_results: "{{ test_results + [{'test': 'ip_assignment_' + (item.subnet | regex_replace('[./]', '_')), 'status': 'pass', 'details': 'Next IP: ' + item.expected_next}] }}"
      loop: "{{ ip_test_cases }}"
    
    # Test 9: VM Start and Health Check Tests
    - name: Test 9.1 - Generate VM start command
      set_fact:
        vm_start_cmd: "qm start {{ test_vm_id }}"
    
    - name: Test 9.2 - Generate health check sequence
      set_fact:
        health_checks:
          - step: "Check VM status"
            command: "qm status {{ test_vm_id }}"
            expected: "status: running"
          - step: "Check agent connectivity"
            command: "qm agent {{ test_vm_id }} ping"
            expected: "success"
          - step: "Check network connectivity"
            command: "qm guest exec {{ test_vm_id }} -- ping -c 1 8.8.8.8"
            expected: "0% packet loss"
    
    - name: Test 9.3 - Record health check test definitions
      set_fact:
        test_results: "{{ test_results + [{'test': 'health_check_definition', 'status': 'pass', 'details': health_checks | length | string + ' health checks defined'}] }}"
    
    # Generate Test Report
    - name: Generate test summary
      set_fact:
        test_summary:
          total_tests: "{{ test_results | length }}"
          passed: "{{ test_results | selectattr('status', 'equalto', 'pass') | list | length }}"
          failed: "{{ test_results | selectattr('status', 'equalto', 'fail') | list | length }}"
          warnings: "{{ test_results | selectattr('status', 'equalto', 'warning') | list | length }}"
          info: "{{ test_results | selectattr('status', 'equalto', 'info') | list | length }}"
    
    - name: Display test results
      debug:
        msg: |
          VM Creation Test Results
          ========================
          Total Tests: {{ test_summary.total_tests }}
          Passed: {{ test_summary.passed }}
          Failed: {{ test_summary.failed }}
          Warnings: {{ test_summary.warnings }}
          Info: {{ test_summary.info }}
          
          Detailed Results:
          {% for result in test_results %}
          - {{ result.test }}: {{ result.status | upper }}
            Details: {{ result.details }}
          {% endfor %}
    
    - name: Write test results to file
      copy:
        content: |
          VM Creation Test Report
          Generated: {{ ansible_date_time.iso8601 }}
          
          Summary:
          --------
          Total Tests: {{ test_summary.total_tests }}
          Passed: {{ test_summary.passed }}
          Failed: {{ test_summary.failed }}
          Warnings: {{ test_summary.warnings }}
          Info: {{ test_summary.info }}
          
          Test Configuration:
          ------------------
          Test VM ID: {{ test_vm_id }}
          Test VM Name: {{ test_vm_name }}
          Proxmox Host: {{ proxmox_host }}
          
          Detailed Results:
          ----------------
          {% for result in test_results %}
          Test: {{ result.test }}
          Status: {{ result.status | upper }}
          Details: {{ result.details }}
          
          {% endfor %}
        dest: /tmp/test-vm-creation-{{ ansible_date_time.epoch }}.txt
    
    - name: Fail if critical tests failed
      fail:
        msg: "{{ test_summary.failed }} tests failed. Check detailed results above."
      when: test_summary.failed | int > 0