#!/bin/sh
# FreeBSD {{ freebsd_version }} Auto-installer configuration
# Generated by PrivateBox automation

# Non-interactive mode
export ASSUME_ALWAYS_YES=YES
export nonInteractive=YES

# Log all output
exec > /tmp/installerconfig.log 2>&1

echo "=== FreeBSD {{ freebsd_version }} Automated Installation ==="
echo "Started: $(date)"

# Mount config drive by label to access additional configs
echo "Mounting config drive..."
mkdir -p /tmp/config
if mount -t cd9660 /dev/disk/by-label/FBSD_CONFIG /tmp/config 2>/dev/null; then
    echo "Config drive mounted successfully"
    CONFIG_AVAILABLE=1
else
    echo "Config drive not found, using defaults"
    CONFIG_AVAILABLE=0
fi

# Disk configuration - use first available disk
DISKNAME=$(sysctl -n kern.disks | awk '{print $1}')

echo "Starting automated FreeBSD installation on disk: $DISKNAME"

# Destroy any existing partition table
gpart destroy -F $DISKNAME || true

# Create GPT partition scheme
gpart create -s gpt $DISKNAME

# Create partitions
gpart add -t freebsd-boot -l boot0 -s 512k $DISKNAME
{% if freebsd_swap_size is defined and freebsd_swap_size != "0" %}
gpart add -t freebsd-swap -l swap0 -s {{ freebsd_swap_size | default('2G') }} $DISKNAME
{% endif %}
gpart add -t freebsd-ufs -l root0 $DISKNAME

# Install bootcode
gpart bootcode -b /boot/pmbr -p /boot/gptboot -i 1 $DISKNAME

# Create UFS filesystem with soft updates
newfs -U /dev/gpt/root0

# Mount root filesystem
mount /dev/gpt/root0 /mnt

# Extract base system
echo "Installing FreeBSD base system..."
cd /mnt && tar --unlink -xpJf /usr/freebsd-dist/base.txz

# Extract kernel
echo "Installing FreeBSD kernel..."
cd /mnt && tar --unlink -xpJf /usr/freebsd-dist/kernel.txz

# Basic system configuration in rc.conf
echo "Configuring system..."
cat > /mnt/etc/rc.conf << 'EOF'
# Hostname
hostname="{{ freebsd_hostname | default('freebsd-vm') }}"

# Network configuration
{% if vm_static_ip is defined %}
ifconfig_{{ freebsd_interface | default('vtnet0') }}="inet {{ vm_static_ip }} netmask {{ vm_netmask | default('255.255.255.0') }}"
defaultrouter="{{ vm_gateway }}"
{% else %}
ifconfig_{{ freebsd_interface | default('vtnet0') }}="DHCP"
{% endif %}

# System services
sshd_enable="YES"
ntpd_enable="YES"
dumpdev="AUTO"

# Security
clear_tmp_enable="YES"
sendmail_enable="NO"
sendmail_submit_enable="NO"
sendmail_outbound_enable="NO"
sendmail_msp_queue_enable="NO"

# Additional services
{% for service in freebsd_services | default([]) %}
{{ service }}_enable="YES"
{% endfor %}
EOF

# DNS configuration
{% if vm_dns1 is defined or vm_dns2 is defined %}
cat > /mnt/etc/resolv.conf << 'EOF'
{% if vm_dns1 is defined %}
nameserver {{ vm_dns1 }}
{% endif %}
{% if vm_dns2 is defined %}
nameserver {{ vm_dns2 }}
{% endif %}
EOF
{% endif %}

# Time zone configuration
{% if freebsd_timezone is defined %}
cp /mnt/usr/share/zoneinfo/{{ freebsd_timezone }} /mnt/etc/localtime
echo "{{ freebsd_timezone }}" > /mnt/etc/timezone
{% else %}
cp /mnt/usr/share/zoneinfo/UTC /mnt/etc/localtime
echo "UTC" > /mnt/etc/timezone
{% endif %}

# Create fstab
cat > /mnt/etc/fstab << 'EOF'
/dev/gpt/root0 / ufs rw 1 1
{% if freebsd_swap_size is defined and freebsd_swap_size != "0" %}
/dev/gpt/swap0 none swap sw 0 0
{% endif %}
EOF

# Enable serial console for Proxmox/VM environments
cat >> /mnt/boot/loader.conf << 'EOF'
# Serial console configuration
console="comconsole"
boot_multicons="YES"
comconsole_speed="115200"
EOF

# Create user account
echo "Creating user account: {{ freebsd_username }}"

# Generate password hash if not provided
{% if freebsd_password_hash is defined %}
USER_HASH="{{ freebsd_password_hash }}"
{% else %}
USER_HASH=$(echo "{{ freebsd_password }}" | chroot /mnt /usr/bin/passwd -l -H 0)
{% endif %}

# Add user to master.passwd
echo "{{ freebsd_username }}:${USER_HASH}:1001:1001::0:0:{{ freebsd_fullname | default('FreeBSD User') }}:/home/{{ freebsd_username }}:{{ freebsd_shell | default('/bin/sh') }}" >> /mnt/etc/master.passwd

# Create group
echo "{{ freebsd_username }}:*:1001:" >> /mnt/etc/group

# Add user to wheel group for sudo access
{% if freebsd_sudo_access | default(true) %}
echo "wheel:*:0:root,{{ freebsd_username }}" > /tmp/wheel_group
grep -v "^wheel:" /mnt/etc/group >> /tmp/wheel_group
mv /tmp/wheel_group /mnt/etc/group
{% endif %}

# Create home directory
mkdir -p /mnt/home/{{ freebsd_username }}
chroot /mnt chown {{ freebsd_username }}:{{ freebsd_username }} /home/{{ freebsd_username }}
chroot /mnt chmod 755 /home/{{ freebsd_username }}

# Enable sudo for wheel group
{% if freebsd_sudo_access | default(true) %}
sed -i '' 's/^# %wheel ALL=(ALL) ALL$/%wheel ALL=(ALL) ALL/' /mnt/usr/local/etc/sudoers || echo '%wheel ALL=(ALL) ALL' >> /mnt/usr/local/etc/sudoers
{% endif %}

# Rebuild password database
chroot /mnt pwd_mkdb -p /etc/master.passwd

# Bootstrap pkg and install essential packages
echo "Installing essential packages..."
chroot /mnt env ASSUME_ALWAYS_YES=YES /usr/sbin/pkg bootstrap -f

# Install essential packages
ESSENTIAL_PACKAGES="sudo bash nano curl wget git"
{% if freebsd_packages is defined %}
ESSENTIAL_PACKAGES="$ESSENTIAL_PACKAGES {{ freebsd_packages | join(' ') }}"
{% endif %}

chroot /mnt pkg install -y $ESSENTIAL_PACKAGES

# SSH key setup if provided
{% if freebsd_ssh_key is defined %}
mkdir -p /mnt/home/{{ freebsd_username }}/.ssh
echo "{{ freebsd_ssh_key }}" > /mnt/home/{{ freebsd_username }}/.ssh/authorized_keys
chroot /mnt chmod 700 /home/{{ freebsd_username }}/.ssh
chroot /mnt chmod 600 /home/{{ freebsd_username }}/.ssh/authorized_keys
chroot /mnt chown -R {{ freebsd_username }}:{{ freebsd_username }} /home/{{ freebsd_username }}/.ssh
{% endif %}

# Custom post-install commands
{% if freebsd_post_install_commands is defined %}
echo "Running post-install commands..."
{% for command in freebsd_post_install_commands %}
chroot /mnt {{ command }}
{% endfor %}
{% endif %}

# Execute post-install script if available
if [ "$CONFIG_AVAILABLE" = "1" ] && [ -f /tmp/config/postinstall ]; then
    echo "Executing post-install script..."
    cp /tmp/config/postinstall /mnt/tmp/postinstall
    chmod +x /mnt/tmp/postinstall
    chroot /mnt /tmp/postinstall || echo "Post-install script failed, continuing..."
    rm -f /mnt/tmp/postinstall
fi

# Signal successful installation
echo "FreeBSD installation completed successfully!" > /mnt/tmp/install-complete
echo "Installation completed at: $(date)" >> /mnt/tmp/install-complete
echo "Disk: $DISKNAME" >> /mnt/tmp/install-complete
echo "Hostname: {{ freebsd_hostname | default('freebsd-vm') }}" >> /mnt/tmp/install-complete
echo "User: {{ freebsd_username }}" >> /mnt/tmp/install-complete

# Copy installation log to installed system
cp /tmp/installerconfig.log /mnt/tmp/ || true

# Clean up config drive mount
if [ "$CONFIG_AVAILABLE" = "1" ]; then
    umount /tmp/config || true
fi

# Final sync and unmount
echo "Syncing filesystems..."
sync
sync
echo "Unmounting installation target..."
umount /mnt

echo "=== FreeBSD {{ freebsd_version }} installation complete ==="
echo "Completed: $(date)"
echo "Rebooting system..."
reboot