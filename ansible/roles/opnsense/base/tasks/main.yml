---
# OPNsense base configuration tasks

- name: Wait for OPNsense to be accessible
  ansible.builtin.wait_for:
    host: "{{ opnsense_api.host }}"
    port: "{{ opnsense_api.port }}"
    delay: 30
    timeout: 600
    state: started
  delegate_to: localhost

- name: Wait for OPNsense web interface to be ready
  ansible.builtin.uri:
    url: "https://{{ opnsense_api.host }}:{{ opnsense_api.port }}/api/core/system/status"
    method: GET
    validate_certs: "{{ opnsense_api.verify_ssl }}"
    force_basic_auth: true
    user: "{{ opnsense_api.username }}"
    password: "{{ opnsense_api.password }}"
    status_code: [200, 401]
  register: web_ready
  until: web_ready.status in [200, 401]
  retries: 30
  delay: 10
  delegate_to: localhost

- name: Configure system settings
  ansible.builtin.uri:
    url: "https://{{ opnsense_api.host }}:{{ opnsense_api.port }}/api/core/system/settings/set"
    method: POST
    validate_certs: "{{ opnsense_api.verify_ssl }}"
    force_basic_auth: true
    user: "{{ opnsense_api.username }}"
    password: "{{ opnsense_api.password }}"
    body_format: json
    body:
      system:
        hostname: "{{ opnsense_base_config.hostname }}"
        domain: "{{ opnsense_base_config.domain }}"
        timezone: "{{ opnsense_base_config.timezone }}"
        dnsserver: "{{ opnsense_base_config.dns_servers }}"
    status_code: 200
  delegate_to: localhost

- name: Configure WAN interface
  ansible.builtin.uri:
    url: "https://{{ opnsense_api.host }}:{{ opnsense_api.port }}/api/interfaces/settings/set"
    method: POST
    validate_certs: "{{ opnsense_api.verify_ssl }}"
    force_basic_auth: true
    user: "{{ opnsense_api.username }}"
    password: "{{ opnsense_api.password }}"
    body_format: json
    body:
      interface:
        wan:
          if: "{{ opnsense_interfaces.wan.name }}"
          descr: "{{ opnsense_interfaces.wan.description }}"
          enable: "{{ opnsense_interfaces.wan.enable | int }}"
          ipaddr: "{{ opnsense_interfaces.wan.ipv4_type }}"
          ipaddrv6: "{{ opnsense_interfaces.wan.ipv6_type }}"
    status_code: 200
  delegate_to: localhost

- name: Configure LAN interface
  ansible.builtin.uri:
    url: "https://{{ opnsense_api.host }}:{{ opnsense_api.port }}/api/interfaces/settings/set"
    method: POST
    validate_certs: "{{ opnsense_api.verify_ssl }}"
    force_basic_auth: true
    user: "{{ opnsense_api.username }}"
    password: "{{ opnsense_api.password }}"
    body_format: json
    body:
      interface:
        lan:
          if: "{{ opnsense_interfaces.lan.name }}"
          descr: "{{ opnsense_interfaces.lan.description }}"
          enable: "{{ opnsense_interfaces.lan.enable | int }}"
          ipaddr: "{{ opnsense_interfaces.lan.ipv4_address }}"
          subnet: "{{ opnsense_interfaces.lan.ipv4_subnet }}"
          ipaddrv6: "{{ opnsense_interfaces.lan.ipv6_type }}"
    status_code: 200
  delegate_to: localhost

- name: Apply interface changes
  ansible.builtin.uri:
    url: "https://{{ opnsense_api.host }}:{{ opnsense_api.port }}/api/interfaces/reconfigure"
    method: POST
    validate_certs: "{{ opnsense_api.verify_ssl }}"
    force_basic_auth: true
    user: "{{ opnsense_api.username }}"
    password: "{{ opnsense_api.password }}"
    status_code: 200
  delegate_to: localhost

- name: Configure basic firewall settings
  ansible.builtin.uri:
    url: "https://{{ opnsense_api.host }}:{{ opnsense_api.port }}/api/firewall/filter/set"
    method: POST
    validate_certs: "{{ opnsense_api.verify_ssl }}"
    force_basic_auth: true
    user: "{{ opnsense_api.username }}"
    password: "{{ opnsense_api.password }}"
    body_format: json
    body:
      filter:
        rule:
          - interface: "wan"
            type: "block"
            ipprotocol: "inet"
            descr: "Default block WAN to LAN"
            source: "any"
            destination: "lan"
            enabled: "1"
          - interface: "lan"
            type: "pass"
            ipprotocol: "inet"
            descr: "Default allow LAN to any"
            source: "lan"
            destination: "any"
            enabled: "1"
    status_code: 200
  delegate_to: localhost

- name: Apply firewall rules
  ansible.builtin.uri:
    url: "https://{{ opnsense_api.host }}:{{ opnsense_api.port }}/api/firewall/filter/apply"
    method: POST
    validate_certs: "{{ opnsense_api.verify_ssl }}"
    force_basic_auth: true
    user: "{{ opnsense_api.username }}"
    password: "{{ opnsense_api.password }}"
    status_code: 200
  delegate_to: localhost

- name: Enable SSH service
  ansible.builtin.uri:
    url: "https://{{ opnsense_api.host }}:{{ opnsense_api.port }}/api/core/service/set"
    method: POST
    validate_certs: "{{ opnsense_api.verify_ssl }}"
    force_basic_auth: true
    user: "{{ opnsense_api.username }}"
    password: "{{ opnsense_api.password }}"
    body_format: json
    body:
      service:
        ssh:
          enabled: "1"
          permitrootlogin: "0"
          passwordauth: "1"
          port: "22"
          interfaces: "lan"
    status_code: 200
  delegate_to: localhost

- name: Generate API key/secret if requested
  block:
    - name: Create API user
      ansible.builtin.uri:
        url: "https://{{ opnsense_api.host }}:{{ opnsense_api.port }}/api/core/user/addUser"
        method: POST
        validate_certs: "{{ opnsense_api.verify_ssl }}"
        force_basic_auth: true
        user: "{{ opnsense_api.username }}"
        password: "{{ opnsense_api.password }}"
        body_format: json
        body:
          user:
            username: "ansible"
            password: "{{ opnsense_ansible_password | password_hash('bcrypt') }}"
            full_name: "Ansible API User"
            email: "ansible@localhost"
            groups: "admins"
            apikeys:
              - description: "Ansible Automation"
        status_code: 200
      delegate_to: localhost
      register: api_user_result
      when: opnsense_create_api_user | default(false)

    - name: Save API credentials
      ansible.builtin.copy:
        content: |
          API Key: {{ api_user_result.json.apikeys[0].key }}
          API Secret: {{ api_user_result.json.apikeys[0].secret }}
        dest: "{{ opnsense_api_credentials_file | default('/tmp/opnsense_api_creds.txt') }}"
        mode: '0600'
      delegate_to: localhost
      when: 
        - opnsense_create_api_user | default(false)
        - api_user_result is defined

- name: Save configuration
  ansible.builtin.uri:
    url: "https://{{ opnsense_api.host }}:{{ opnsense_api.port }}/api/core/backup/backupconfig"
    method: POST
    validate_certs: "{{ opnsense_api.verify_ssl }}"
    force_basic_auth: true
    user: "{{ opnsense_api.username }}"
    password: "{{ opnsense_api.password }}"
    body_format: json
    body:
      description: "Base configuration by Ansible"
    status_code: 200
  delegate_to: localhost

- name: Display configuration summary
  ansible.builtin.debug:
    msg:
      - "OPNsense base configuration completed"
      - "Web UI: https://{{ opnsense_api.host }}"
      - "SSH: ssh root@{{ opnsense_api.host }}"
      - "LAN IP: {{ opnsense_interfaces.lan.ipv4_address }}/{{ opnsense_interfaces.lan.ipv4_subnet }}"