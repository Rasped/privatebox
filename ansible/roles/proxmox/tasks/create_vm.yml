---
# Tasks for creating VMs in Proxmox using community.general.proxmox_kvm module

- name: Validate required VM parameters
  assert:
    that:
      - proxmox_vm_name is defined
      - proxmox_vm_node is defined
      - proxmox_vm_vmid is defined
    fail_msg: "Required VM parameters are missing"
    success_msg: "All required VM parameters are present"

- name: Verify Proxmox node is accessible
  community.general.proxmox_node_info:
    api_host: "{{ proxmox_api_host }}"
    api_user: "{{ proxmox_api_user }}"
    api_password: "{{ proxmox_api_password }}"
    api_validate_certs: "{{ proxmox_api_validate_certs | default(false) }}"
    node: "{{ proxmox_vm_node }}"
  register: node_info
  failed_when: node_info.proxmox_nodes | length == 0

- name: Handle cloud image preparation if specified
  include_tasks: prepare_cloud_image.yml
  when: 
    - proxmox_vm_cloud_image_url is defined
    - proxmox_vm_cloud_image_url | length > 0

- name: Create VM with specified configuration
  community.general.proxmox_kvm:
    api_host: "{{ proxmox_api_host }}"
    api_user: "{{ proxmox_api_user }}"
    api_password: "{{ proxmox_api_password }}"
    api_token_id: "{{ proxmox_api_token_id | default(omit) }}"
    api_token_secret: "{{ proxmox_api_token_secret | default(omit) }}"
    validate_certs: "{{ proxmox_validate_certs | default(true) }}"
    node: "{{ proxmox_vm_node }}"
    vmid: "{{ proxmox_vm_vmid }}"
    name: "{{ proxmox_vm_name }}"
    description: "{{ proxmox_vm_description | default('Managed by Ansible') }}"
    state: present
    # CPU Configuration
    cores: "{{ proxmox_vm_cores | default(2) }}"
    sockets: "{{ proxmox_vm_sockets | default(1) }}"
    cpu: "{{ proxmox_vm_cpu_type | default('host') }}"
    # Memory Configuration
    memory: "{{ proxmox_vm_memory | default(2048) }}"
    balloon: "{{ proxmox_vm_balloon | default(0) }}"
    # Disk Configuration
    scsihw: "{{ proxmox_vm_scsihw | default('virtio-scsi-pci') }}"
    scsi: "{{ proxmox_vm_disks | default({}) }}"
    # Network Configuration
    net: "{{ proxmox_vm_networks | default({}) }}"
    # Boot Configuration
    boot: "{{ proxmox_vm_boot_order | default('order=scsi0;ide2;net0') }}"
    bootdisk: "{{ proxmox_vm_bootdisk | default('scsi0') }}"
    # OS Type
    ostype: "{{ proxmox_vm_ostype | default('l26') }}"
    # Hardware features
    hotplug: "{{ proxmox_vm_hotplug | default('network,disk,cpu,memory') }}"
    agent: "{{ proxmox_vm_agent | default(1) }}"
    # Start on boot
    onboot: "{{ proxmox_vm_onboot | default(true) }}"
    # Protection
    protection: "{{ proxmox_vm_protection | default(false) }}"
  register: vm_creation_result
  retries: 3
  delay: 10
  until: vm_creation_result is succeeded

- name: Display VM creation result
  debug:
    msg: "VM {{ proxmox_vm_name }} (ID: {{ proxmox_vm_vmid }}) created successfully on node {{ proxmox_vm_node }}"
  when: vm_creation_result is changed

- name: Wait for VM to be ready
  pause:
    seconds: 5
  when: vm_creation_result is changed

- name: Import cloud image as VM disk
  include_tasks: import_cloud_image.yml
  when: 
    - vm_creation_result is changed
    - proxmox_vm_cloud_image_url is defined
    - proxmox_vm_cloud_image_url | length > 0
    - _cloud_image_ready is defined
    - _cloud_image_ready | bool

- name: Configure cloud-init for VM
  include_tasks: configure_cloud_init.yml
  when:
    - vm_creation_result is changed
    - proxmox_vm_cloud_image_url is defined
    - proxmox_vm_cloud_image_url | length > 0
    - proxmox_vm_cloud_init_enabled | default(true)

- name: Start VM after creation
  community.general.proxmox_kvm:
    api_host: "{{ proxmox_api_host }}"
    api_user: "{{ proxmox_api_user }}"
    api_password: "{{ proxmox_api_password }}"
    api_token_id: "{{ proxmox_api_token_id | default(omit) }}"
    api_token_secret: "{{ proxmox_api_token_secret | default(omit) }}"
    validate_certs: "{{ proxmox_validate_certs | default(true) }}"
    node: "{{ proxmox_vm_node }}"
    vmid: "{{ proxmox_vm_vmid }}"
    state: started
  when:
    - vm_creation_result is changed
    - proxmox_vm_start_after_create | default(true)
  register: vm_start_result
  retries: 3
  delay: 10
  until: vm_start_result is succeeded

- name: Display VM start status
  debug:
    msg: "VM {{ proxmox_vm_name }} started successfully"
  when: vm_start_result is changed

# Example usage in playbook:
# - name: Create OPNsense VM
#   include_role:
#     name: proxmox
#   vars:
#     proxmox_operation: create_vm
#     proxmox_vm_name: opnsense-fw01
#     proxmox_vm_node: pve01
#     proxmox_vm_vmid: 100
#     proxmox_vm_cores: 2
#
# Example with cloud image:
# - name: Create Ubuntu VM from cloud image
#   include_role:
#     name: proxmox
#   vars:
#     proxmox_operation: create_vm
#     proxmox_vm_name: ubuntu-cloud-01
#     proxmox_vm_node: pve01
#     proxmox_vm_vmid: 200
#     proxmox_vm_cloud_image_url: "{{ proxmox_cloud_image_urls['ubuntu-24.04'] }}"
#     proxmox_vm_cloud_init_user: myuser
#     proxmox_vm_cloud_init_ssh_keys:
#       - "{{ lookup('file', '~/.ssh/id_rsa.pub') }}"
#     proxmox_vm_cloud_init_ip: "192.168.1.100/24"
#     proxmox_vm_cloud_init_gw: "192.168.1.1"
#     proxmox_vm_memory: 4096
#     proxmox_vm_disks:
#       scsi0: "local-lvm:32,format=qcow2"
#     proxmox_vm_networks:
#       net0: "virtio,bridge=vmbr0,firewall=1"
#       net1: "virtio,bridge=vmbr1,firewall=1"