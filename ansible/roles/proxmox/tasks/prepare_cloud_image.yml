---
# Prepare cloud image for VM creation
# This task downloads and prepares cloud images when proxmox_vm_cloud_image_url is defined

- name: Set cloud image facts
  set_fact:
    _cloud_image_filename: "{{ proxmox_vm_cloud_image_url | basename }}"
    _cloud_image_name: "{{ proxmox_vm_cloud_image_url | basename | regex_replace('\\.(img|qcow2|raw)(\\..*)?$', '') }}"
    _cloud_image_cache_path: "{{ proxmox_cloud_image_cache_dir }}/{{ proxmox_vm_cloud_image_url | basename }}"

- name: Display cloud image information
  debug:
    msg:
      - "Cloud image URL: {{ proxmox_vm_cloud_image_url }}"
      - "Local filename: {{ _cloud_image_filename }}"
      - "Cache path: {{ _cloud_image_cache_path }}"
  when: ansible_verbosity >= 1

- name: Ensure cloud image cache directory exists
  file:
    path: "{{ proxmox_cloud_image_cache_dir }}"
    state: directory
    mode: '0755'
    owner: root
    group: root

- name: Check if cloud image already exists in cache
  stat:
    path: "{{ _cloud_image_cache_path }}"
  register: _cached_image

- name: Download cloud image
  get_url:
    url: "{{ proxmox_vm_cloud_image_url }}"
    dest: "{{ _cloud_image_cache_path }}"
    checksum: "{{ proxmox_vm_cloud_image_checksum | default(omit) }}"
    timeout: "{{ proxmox_iso_download_timeout | default(600) }}"
    force: "{{ proxmox_vm_cloud_image_force_download | default(false) }}"
    mode: '0644'
    owner: root
    group: root
  register: _cloud_image_download
  when: not _cached_image.stat.exists or proxmox_vm_cloud_image_force_download | default(false)

- name: Display download result
  debug:
    msg: "Cloud image downloaded: {{ _cloud_image_download.dest | default(_cloud_image_cache_path) }}"
  when: _cloud_image_download is changed

- name: Extract compressed images if needed
  block:
    - name: Check if image is compressed (.bz2)
      set_fact:
        _image_is_compressed: "{{ _cloud_image_filename.endswith('.bz2') }}"
    
    - name: Extract .bz2 compressed image
      command: "bunzip2 -kf {{ _cloud_image_cache_path }}"
      args:
        creates: "{{ _cloud_image_cache_path | regex_replace('\\.bz2$', '') }}"
      when: _image_is_compressed
      register: _extract_result
    
    - name: Update image path after extraction
      set_fact:
        _cloud_image_cache_path: "{{ _cloud_image_cache_path | regex_replace('\\.bz2$', '') }}"
        _cloud_image_filename: "{{ _cloud_image_filename | regex_replace('\\.bz2$', '') }}"
      when: _image_is_compressed and _extract_result is changed

- name: Verify cloud image exists and is readable
  stat:
    path: "{{ _cloud_image_cache_path }}"
  register: _final_image_check
  failed_when: not _final_image_check.stat.exists or not _final_image_check.stat.readable

- name: Set cloud image ready fact
  set_fact:
    _cloud_image_ready: true
    _cloud_image_path: "{{ _cloud_image_cache_path }}"

- name: Override disk configuration for cloud image VM
  set_fact:
    proxmox_vm_disks: {}
  when: proxmox_vm_cloud_image_disk_override | default(true)