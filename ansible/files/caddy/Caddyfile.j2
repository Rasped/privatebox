# Caddy Configuration for PrivateBox Services
# Generated by Ansible - Do not edit directly
# Running on Alpine VM, proxying to services on Ubuntu VM

# Global options
{
    # Use internal CA for .lan domains
    local_certs
    
    # Admin API endpoint (internal only)
    admin localhost:2019
    
    # Certificate storage
    storage file_system {
        root /var/lib/caddy
    }
}

# Health check endpoint
:80 {
    respond /health "OK" 200
}

# Redirect HTTP to HTTPS for configured domains
http:// {
    @configured_domains {
{% for service in privatebox_services %}
        host {{ service.domain }}
{% if service.public_domain is defined %}
        host {{ service.public_domain }}
{% endif %}
{% endfor %}
    }
    redir @configured_domains https://{host}{uri} permanent
}

# HTTPS Services
{% for service in privatebox_services %}
# {{ service.description | default(service.name) }}
{{ service.domain }}{% if service.public_domain is defined %}, {{ service.public_domain }}{% endif %} {
    # Certificate configuration
    {% if service.domain.endswith('.lan') %}
    tls internal
    {% elif service.public_domain is defined %}
    # Let's Encrypt for public domain
    tls {
        dns cloudflare {env.CLOUDFLARE_API_TOKEN}
    }
    {% endif %}

    # Reverse proxy to service on Ubuntu VM
    reverse_proxy {{ service.backend_host | default(backend_host) }}:{{ service.backend_port }} {
        # Add common headers
        header_up Host {host}
        header_up X-Real-IP {remote_host}
        header_up X-Forwarded-For {remote_host}
        header_up X-Forwarded-Proto {scheme}
        
        # Backend health check
        health_uri {{ service.health_endpoint | default('/') }}
        health_interval 30s
        health_timeout 5s
        health_status {{ service.health_status | default('2xx') }}
        
        # Transport configuration
        transport http {
            dial_timeout 5s
            response_header_timeout 30s
        }
    }

    # Security headers
    header {
        # Disable FLoC tracking
        Permissions-Policy interest-cohort=()
        
        # Enable HSTS for HTTPS
        Strict-Transport-Security "max-age=31536000; includeSubDomains"
        
        # Prevent clickjacking (unless service needs framing)
        {% if service.allow_framing is not defined or not service.allow_framing %}
        X-Frame-Options DENY
        {% endif %}
        
        # Prevent content type sniffing
        X-Content-Type-Options nosniff
        
        # Basic XSS protection
        X-XSS-Protection "1; mode=block"
        
        # Remove server header
        -Server
        
        # Add custom headers if defined
        {% if service.custom_headers is defined %}
        {% for header, value in service.custom_headers.items() %}
        {{ header }} "{{ value }}"
        {% endfor %}
        {% endif %}
    }

    # Service-specific configurations
    {% if service.name == "portainer" %}
    # Portainer WebSocket support
    @websockets {
        header Connection *Upgrade*
        header Upgrade websocket
    }
    reverse_proxy @websockets {{ service.backend_host | default(backend_host) }}:{{ service.backend_port }}
    {% endif %}

    # Logging
    log {
        output file /var/log/caddy/{{ service.name }}.log {
            roll_size 10mb
            roll_keep 5
            roll_keep_for 720h
        }
        format console
        level INFO
    }
}

{% endfor %}

# Catch-all for undefined .lan services
https://*.lan {
    tls internal
    respond "Service not configured" 404
}

# Optional: Catch-all for public domains
# Uncomment if you want to handle undefined public domains
# https:// {
#     respond "Service not configured" 404
# }